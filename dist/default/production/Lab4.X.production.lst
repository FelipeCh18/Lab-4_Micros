

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Thu May 18 07:50:14 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og9 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    56                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    65                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    66                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    67                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    68                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    69   000000                     
    70                           ; Version 2.40
    71                           ; Generated 04/07/2022 GMT
    72                           ; 
    73                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    74                           ; All rights reserved.
    75                           ; 
    76                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    77                           ; 
    78                           ; Redistribution and use in source and binary forms, with or without modification, are
    79                           ; permitted provided that the following conditions are met:
    80                           ; 
    81                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    82                           ;        conditions and the following disclaimer.
    83                           ; 
    84                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    85                           ;        of conditions and the following disclaimer in the documentation and/or other
    86                           ;        materials provided with the distribution. Publication is not required when
    87                           ;        this file is used in an embedded application.
    88                           ; 
    89                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    90                           ;        software without specific prior written permission.
    91                           ; 
    92                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    93                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    94                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    95                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    96                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    97                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    98                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    99                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   100                           ; 
   101                           ; 
   102                           ; Code-generator required, PIC18F4550 Definitions
   103                           ; 
   104                           ; SFR Addresses
   105   000000                     
   106                           	psect	idataCOMRAM
   107   002BE1                     __pidataCOMRAM:
   108                           	callstack 0
   109                           
   110                           ;initializer for _interfaz
   111   002BE1  08                 	db	8
   112                           
   113                           	psect	idataBANK0
   114   002BDE                     __pidataBANK0:
   115                           	callstack 0
   116                           
   117                           ;initializer for _n2c
   118   002BDE  20                 	db	32
   119                           
   120                           ;initializer for _n1c
   121   002BDF  20                 	db	32
   122                           
   123                           ;initializer for _op
   124   002BE0  20                 	db	32
   125                           
   126                           	psect	smallconst
   127   000800                     __psmallconst:
   128                           	callstack 0
   129   000800  00                 	db	0
   130   000801                     exp@coeff:
   131                           	callstack 0
   132   000801  00                 	db	0
   133   000802  80                 	db	128
   134   000803  3F                 	db	63
   135   000804  72                 	db	114
   136   000805  31                 	db	49
   137   000806  3F                 	db	63
   138   000807  FE                 	db	254
   139   000808  75                 	db	117
   140   000809  3E                 	db	62
   141   00080A  58                 	db	88
   142   00080B  63                 	db	99
   143   00080C  3D                 	db	61
   144   00080D  95                 	db	149
   145   00080E  1D                 	db	29
   146   00080F  3C                 	db	60
   147   000810  C5                 	db	197
   148   000811  AE                 	db	174
   149   000812  3A                 	db	58
   150   000813  79                 	db	121
   151   000814  21                 	db	33
   152   000815  39                 	db	57
   153   000816  94                 	db	148
   154   000817  80                 	db	128
   155   000818  37                 	db	55
   156   000819  93                 	db	147
   157   00081A  A7                 	db	167
   158   00081B  35                 	db	53
   159   00081C  56                 	db	86
   160   00081D  15                 	db	21
   161   00081E  34                 	db	52
   162   00081F                     __end_ofexp@coeff:
   163                           	callstack 0
   164   00081F                     log@coeff:
   165                           	callstack 0
   166   00081F  00                 	db	0
   167   000820  00                 	db	0
   168   000821  00                 	db	0
   169   000822  00                 	db	0
   170   000823  80                 	db	128
   171   000824  3F                 	db	63
   172   000825  F0                 	db	240
   173   000826  FF                 	db	255
   174   000827  BE                 	db	190
   175   000828  E2                 	db	226
   176   000829  A9                 	db	169
   177   00082A  3E                 	db	62
   178   00082B  83                 	db	131
   179   00082C  76                 	db	118
   180   00082D  BE                 	db	190
   181   00082E  AE                 	db	174
   182   00082F  2B                 	db	43
   183   000830  3E                 	db	62
   184   000831  3C                 	db	60
   185   000832  C3                 	db	195
   186   000833  BD                 	db	189
   187   000834  D2                 	db	210
   188   000835  13                 	db	19
   189   000836  3D                 	db	61
   190   000837  78                 	db	120
   191   000838  D3                 	db	211
   192   000839  BB                 	db	187
   193   00083A                     __end_oflog@coeff:
   194                           	callstack 0
   195   000000                     _LATC	set	3979
   196   000000                     _TRISC	set	3988
   197   000000                     _LATC7	set	31839
   198   000000                     _LATE2	set	31850
   199   000000                     _RB7	set	31759
   200   000000                     _RB6	set	31758
   201   000000                     _RB5	set	31757
   202   000000                     _POR	set	32385
   203   000000                     _PD	set	32386
   204   000000                     _TMR0ON	set	32431
   205   000000                     _GIE	set	32663
   206   000000                     _TMR0IE	set	32661
   207   000000                     _LATE1	set	31849
   208   000000                     _LATB	set	3978
   209   000000                     _LATD	set	3980
   210   000000                     _RB4	set	31756
   211   000000                     _TRISB	set	3987
   212   000000                     _TRISD	set	3989
   213   000000                     _ADCON1	set	4033
   214   000000                     _LATE0	set	31848
   215   000000                     _OSCCON	set	4051
   216   000000                     _T0CON	set	4053
   217   000000                     _TO	set	32387
   218   000000                     _RBPU	set	32655
   219   000000                     _TRISE	set	3990
   220   000000                     _TMR0IF	set	32658
   221   000000                     _TMR0	set	4054
   222   00083A                     STR_7:
   223   00083A  4D                 	db	77	;'M'
   224   00083B  6F                 	db	111	;'o'
   225   00083C  64                 	db	100	;'d'
   226   00083D  6F                 	db	111	;'o'
   227   00083E  20                 	db	32
   228   00083F  46                 	db	70	;'F'
   229   000840  61                 	db	97	;'a'
   230   000841  63                 	db	99	;'c'
   231   000842  74                 	db	116	;'t'
   232   000843  6F                 	db	111	;'o'
   233   000844  72                 	db	114	;'r'
   234   000845  69                 	db	105	;'i'
   235   000846  61                 	db	97	;'a'
   236   000847  6C                 	db	108	;'l'
   237   000848  00                 	db	0
   238   000849                     STR_3:
   239   000849  4D                 	db	77	;'M'
   240   00084A  6F                 	db	111	;'o'
   241   00084B  64                 	db	100	;'d'
   242   00084C  6F                 	db	111	;'o'
   243   00084D  20                 	db	32
   244   00084E  50                 	db	80	;'P'
   245   00084F  6F                 	db	111	;'o'
   246   000850  74                 	db	116	;'t'
   247   000851  65                 	db	101	;'e'
   248   000852  6E                 	db	110	;'n'
   249   000853  63                 	db	99	;'c'
   250   000854  69                 	db	105	;'i'
   251   000855  61                 	db	97	;'a'
   252   000856  00                 	db	0
   253   000857                     STR_15:
   254   000857  49                 	db	73	;'I'
   255   000858  6E                 	db	110	;'n'
   256   000859  64                 	db	100	;'d'
   257   00085A  65                 	db	101	;'e'
   258   00085B  74                 	db	116	;'t'
   259   00085C  65                 	db	101	;'e'
   260   00085D  72                 	db	114	;'r'
   261   00085E  6D                 	db	109	;'m'
   262   00085F  69                 	db	105	;'i'
   263   000860  6E                 	db	110	;'n'
   264   000861  61                 	db	97	;'a'
   265   000862  64                 	db	100	;'d'
   266   000863  6F                 	db	111	;'o'
   267   000864  00                 	db	0
   268   000865                     STR_11:
   269   000865  4C                 	db	76	;'L'
   270   000866  56                 	db	86	;'V'
   271   000867  50                 	db	80	;'P'
   272   000868  20                 	db	32
   273   000869  41                 	db	65	;'A'
   274   00086A  63                 	db	99	;'c'
   275   00086B  74                 	db	116	;'t'
   276   00086C  69                 	db	105	;'i'
   277   00086D  76                 	db	118	;'v'
   278   00086E  61                 	db	97	;'a'
   279   00086F  64                 	db	100	;'d'
   280   000870  6F                 	db	111	;'o'
   281   000871  00                 	db	0
   282   000872                     STR_13:
   283   000872  64                 	db	100	;'d'
   284   000873  65                 	db	101	;'e'
   285   000874  20                 	db	32
   286   000875  63                 	db	99	;'c'
   287   000876  61                 	db	97	;'a'
   288   000877  6C                 	db	108	;'l'
   289   000878  63                 	db	99	;'c'
   290   000879  75                 	db	117	;'u'
   291   00087A  6C                 	db	108	;'l'
   292   00087B  61                 	db	97	;'a'
   293   00087C  72                 	db	114	;'r'
   294   00087D  00                 	db	0
   295   00087E                     STR_9:
   296   00087E  4D                 	db	77	;'M'
   297   00087F  6F                 	db	111	;'o'
   298   000880  64                 	db	100	;'d'
   299   000881  6F                 	db	111	;'o'
   300   000882  20                 	db	32
   301   000883  52                 	db	82	;'R'
   302   000884  65                 	db	101	;'e'
   303   000885  73                 	db	115	;'s'
   304   000886  74                 	db	116	;'t'
   305   000887  61                 	db	97	;'a'
   306   000888  00                 	db	0
   307   000889                     STR_5:
   308   000889  4D                 	db	77	;'M'
   309   00088A  6F                 	db	111	;'o'
   310   00088B  64                 	db	100	;'d'
   311   00088C  6F                 	db	111	;'o'
   312   00088D  20                 	db	32
   313   00088E  53                 	db	83	;'S'
   314   00088F  75                 	db	117	;'u'
   315   000890  6D                 	db	109	;'m'
   316   000891  61                 	db	97	;'a'
   317   000892  00                 	db	0
   318   000893                     STR_12:
   319   000893  49                 	db	73	;'I'
   320   000894  6D                 	db	109	;'m'
   321   000895  70                 	db	112	;'p'
   322   000896  6F                 	db	111	;'o'
   323   000897  73                 	db	115	;'s'
   324   000898  69                 	db	105	;'i'
   325   000899  62                 	db	98	;'b'
   326   00089A  6C                 	db	108	;'l'
   327   00089B  65                 	db	101	;'e'
   328   00089C  00                 	db	0
   329   00089D                     STR_14:
   330   00089D  49                 	db	73	;'I'
   331   00089E  6E                 	db	110	;'n'
   332   00089F  66                 	db	102	;'f'
   333   0008A0  69                 	db	105	;'i'
   334   0008A1  6E                 	db	110	;'n'
   335   0008A2  69                 	db	105	;'i'
   336   0008A3  74                 	db	116	;'t'
   337   0008A4  6F                 	db	111	;'o'
   338   0008A5  00                 	db	0
   339   0008A6                     STR_1:
   340   0008A6  45                 	db	69	;'E'
   341   0008A7  6E                 	db	110	;'n'
   342   0008A8  65                 	db	101	;'e'
   343   0008A9  72                 	db	114	;'r'
   344   0008AA  67                 	db	103	;'g'
   345   0008AB  69                 	db	105	;'i'
   346   0008AC  61                 	db	97	;'a'
   347   0008AD  00                 	db	0
   348   0008AE                     STR_2:
   349   0008AE  4D                 	db	77	;'M'
   350   0008AF  43                 	db	67	;'C'
   351   0008B0  4C                 	db	76	;'L'
   352   0008B1  52                 	db	82	;'R'
   353   0008B2  00                 	db	0
   354   0008B3  00                 	db	0	; dummy byte at the end
   355   000000                     
   356                           ; #config settings
   357                           
   358                           	psect	cinit
   359   002730                     __pcinit:
   360                           	callstack 0
   361   002730                     start_initialization:
   362                           	callstack 0
   363   002730                     __initialization:
   364                           	callstack 0
   365                           
   366                           ; Initialize objects allocated to BANK0 (3 bytes)
   367                           ; load TBLPTR registers with __pidataBANK0
   368   002730  0EDE               	movlw	low __pidataBANK0
   369   002732  6EF6               	movwf	tblptrl,c
   370   002734  0E2B               	movlw	high __pidataBANK0
   371   002736  6EF7               	movwf	tblptrh,c
   372   002738  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   373   00273A  6EF8               	movwf	tblptru,c
   374   00273C  0009               	tblrd		*+	;fetch initializer
   375   00273E  CFF5 F09E          	movff	tablat,__pdataBANK0
   376   002742  0009               	tblrd		*+	;fetch initializer
   377   002744  CFF5 F09F          	movff	tablat,__pdataBANK0+1
   378   002748  0009               	tblrd		*+	;fetch initializer
   379   00274A  CFF5 F0A0          	movff	tablat,__pdataBANK0+2
   380                           
   381                           ; Initialize objects allocated to COMRAM (1 bytes)
   382                           ; load TBLPTR registers with __pidataCOMRAM
   383   00274E  0EE1               	movlw	low __pidataCOMRAM
   384   002750  6EF6               	movwf	tblptrl,c
   385   002752  0E2B               	movlw	high __pidataCOMRAM
   386   002754  6EF7               	movwf	tblptrh,c
   387   002756  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   388   002758  6EF8               	movwf	tblptru,c
   389   00275A  0009               	tblrd		*+	;fetch initializer
   390   00275C  CFF5 F050          	movff	tablat,__pdataCOMRAM
   391                           
   392                           ; Clear objects allocated to BANK0 (27 bytes)
   393   002760  EE00  F083         	lfsr	0,__pbssBANK0
   394   002764  0E1B               	movlw	27
   395   002766                     clear_0:
   396   002766  6AEE               	clrf	postinc0,c
   397   002768  06E8               	decf	wreg,f,c
   398   00276A  E1FD               	bnz	clear_0
   399                           
   400                           ; Clear objects allocated to COMRAM (12 bytes)
   401   00276C  EE00  F044         	lfsr	0,__pbssCOMRAM
   402   002770  0E0C               	movlw	12
   403   002772                     clear_1:
   404   002772  6AEE               	clrf	postinc0,c
   405   002774  06E8               	decf	wreg,f,c
   406   002776  E1FD               	bnz	clear_1
   407   002778                     end_of_initialization:
   408                           	callstack 0
   409   002778                     __end_of__initialization:
   410                           	callstack 0
   411   002778  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   412   00277A  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   413   00277C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   414   00277E  6EF8               	movwf	tblptru,c
   415   002780  0100               	movlb	0
   416   002782  EF5A  F004         	goto	_main	;jump to C main() function
   417                           
   418                           	psect	bssCOMRAM
   419   000044                     __pbssCOMRAM:
   420                           	callstack 0
   421   000044                     _b:
   422                           	callstack 0
   423   000044                     	ds	2
   424   000046                     _verificador:
   425                           	callstack 0
   426   000046                     	ds	2
   427   000048                     _contador:
   428                           	callstack 0
   429   000048                     	ds	2
   430   00004A                     _color:
   431                           	callstack 0
   432   00004A                     	ds	2
   433   00004C                     _m:
   434                           	callstack 0
   435   00004C                     	ds	4
   436                           
   437                           	psect	dataCOMRAM
   438   000050                     __pdataCOMRAM:
   439                           	callstack 0
   440   000050                     _interfaz:
   441                           	callstack 0
   442   000050                     	ds	1
   443                           
   444                           	psect	bssBANK0
   445   000083                     __pbssBANK0:
   446                           	callstack 0
   447   000083                     _res:
   448                           	callstack 0
   449   000083                     	ds	4
   450   000087                     _r:
   451                           	callstack 0
   452   000087                     	ds	4
   453   00008B                     _partdecl:
   454                           	callstack 0
   455   00008B                     	ds	4
   456   00008F                     _errno:
   457                           	callstack 0
   458   00008F                     	ds	2
   459   000091                     _a:
   460                           	callstack 0
   461   000091                     	ds	2
   462   000093                     _contador_digitos:
   463                           	callstack 0
   464   000093                     	ds	2
   465   000095                     _i:
   466                           	callstack 0
   467   000095                     	ds	2
   468   000097                     _n2:
   469                           	callstack 0
   470   000097                     	ds	2
   471   000099                     _n1:
   472                           	callstack 0
   473   000099                     	ds	2
   474   00009B                     _factorial:
   475                           	callstack 0
   476   00009B                     	ds	1
   477   00009C                     _potencia:
   478                           	callstack 0
   479   00009C                     	ds	1
   480   00009D                     _Tecla:
   481                           	callstack 0
   482   00009D                     	ds	1
   483                           
   484                           	psect	dataBANK0
   485   00009E                     __pdataBANK0:
   486                           	callstack 0
   487   00009E                     _n2c:
   488                           	callstack 0
   489   00009E                     	ds	1
   490   00009F                     _n1c:
   491                           	callstack 0
   492   00009F                     	ds	1
   493   0000A0                     _op:
   494                           	callstack 0
   495   0000A0                     	ds	1
   496                           
   497                           	psect	cstackBANK0
   498   000060                     __pcstackBANK0:
   499                           	callstack 0
   500   000060                     ??_ldexp:
   501                           
   502                           ; 1 bytes @ 0x0
   503   000060                     	ds	2
   504   000062                     ?_exp:
   505                           	callstack 0
   506   000062                     exp@x:
   507                           	callstack 0
   508                           
   509                           ; 3 bytes @ 0x2
   510   000062                     	ds	3
   511   000065                     _exp$899:
   512                           	callstack 0
   513                           
   514                           ; 3 bytes @ 0x5
   515   000065                     	ds	3
   516   000068                     exp@exponent:
   517                           	callstack 0
   518                           
   519                           ; 2 bytes @ 0x8
   520   000068                     	ds	2
   521   00006A                     exp@sign:
   522                           	callstack 0
   523                           
   524                           ; 1 bytes @ 0xA
   525   00006A                     	ds	1
   526   00006B                     ?_pow:
   527                           	callstack 0
   528   00006B                     pow@x:
   529                           	callstack 0
   530                           
   531                           ; 3 bytes @ 0xB
   532   00006B                     	ds	3
   533   00006E                     pow@y:
   534                           	callstack 0
   535                           
   536                           ; 3 bytes @ 0xE
   537   00006E                     	ds	3
   538   000071                     _pow$897:
   539                           	callstack 0
   540                           
   541                           ; 3 bytes @ 0x11
   542   000071                     	ds	3
   543   000074                     _pow$898:
   544                           	callstack 0
   545                           
   546                           ; 3 bytes @ 0x14
   547   000074                     	ds	3
   548   000077                     pow@sign:
   549                           	callstack 0
   550                           
   551                           ; 1 bytes @ 0x17
   552   000077                     	ds	1
   553   000078                     pow@yi:
   554                           	callstack 0
   555                           
   556                           ; 4 bytes @ 0x18
   557   000078                     	ds	4
   558   00007C                     ??_main:
   559                           
   560                           ; 1 bytes @ 0x1C
   561   00007C                     	ds	2
   562   00007E                     _main$896:
   563                           	callstack 0
   564                           
   565                           ; 3 bytes @ 0x1E
   566   00007E                     	ds	3
   567   000081                     _main$158:
   568                           	callstack 0
   569                           
   570                           ; 1 bytes @ 0x21
   571   000081                     	ds	1
   572   000082                     _main$159:
   573                           	callstack 0
   574                           
   575                           ; 1 bytes @ 0x22
   576   000082                     	ds	1
   577                           
   578                           	psect	cstackCOMRAM
   579   000001                     __pcstackCOMRAM:
   580                           	callstack 0
   581   000001                     ??i2_RetardoLCD:
   582                           
   583                           ; 1 bytes @ 0x0
   584   000001                     	ds	1
   585   000002                     i2RetardoLCD@a:
   586                           	callstack 0
   587                           
   588                           ; 1 bytes @ 0x1
   589   000002                     	ds	1
   590   000003                     ??i2_EnviaDato:
   591                           
   592                           ; 1 bytes @ 0x2
   593   000003                     	ds	1
   594   000004                     i2EnviaDato@a:
   595                           	callstack 0
   596                           
   597                           ; 1 bytes @ 0x3
   598   000004                     	ds	1
   599   000005                     i2EscribeLCD_c@a:
   600                           	callstack 0
   601   000005                     i2DireccionaLCD@a:
   602                           	callstack 0
   603                           
   604                           ; 1 bytes @ 0x4
   605   000005                     	ds	1
   606   000006                     i2MensajeLCD_Var@a:
   607                           	callstack 0
   608                           
   609                           ; 1 bytes @ 0x5
   610   000006                     	ds	1
   611   000007                     ??i2_MensajeLCD_Var:
   612                           
   613                           ; 1 bytes @ 0x6
   614   000007                     	ds	1
   615   000008                     i2MensajeLCD_Var@i:
   616                           	callstack 0
   617                           
   618                           ; 2 bytes @ 0x7
   619   000008                     	ds	2
   620   00000A                     ??_ISR:
   621                           
   622                           ; 1 bytes @ 0x9
   623   00000A                     	ds	4
   624   00000E                     ??_RetardoLCD:
   625   00000E                     ??_ColorRGB:
   626   00000E                     ?___wmul:
   627                           	callstack 0
   628   00000E                     ?___lwmod:
   629                           	callstack 0
   630   00000E                     ?___ftpack:
   631                           	callstack 0
   632   00000E                     ?_frexp:
   633                           	callstack 0
   634   00000E                     ?___ftneg:
   635                           	callstack 0
   636   00000E                     ?___lmul:
   637                           	callstack 0
   638   00000E                     ?___llmod:
   639                           	callstack 0
   640   00000E                     ConfiguraLCD@a:
   641                           	callstack 0
   642   00000E                     ___wmul@multiplier:
   643                           	callstack 0
   644   00000E                     ___lwmod@dividend:
   645                           	callstack 0
   646   00000E                     ___ftpack@arg:
   647                           	callstack 0
   648   00000E                     ___ftge@ff1:
   649                           	callstack 0
   650   00000E                     ___ftneg@f1:
   651                           	callstack 0
   652   00000E                     frexp@value:
   653                           	callstack 0
   654   00000E                     ___lmul@multiplier:
   655                           	callstack 0
   656   00000E                     ___llmod@dividend:
   657                           	callstack 0
   658                           
   659                           ; 4 bytes @ 0xD
   660   00000E                     	ds	1
   661   00000F                     RetardoLCD@a:
   662                           	callstack 0
   663                           
   664                           ; 1 bytes @ 0xE
   665   00000F                     	ds	1
   666   000010                     ??_EnviaDato:
   667   000010                     ___wmul@multiplicand:
   668                           	callstack 0
   669   000010                     ___lwmod@divisor:
   670                           	callstack 0
   671                           
   672                           ; 2 bytes @ 0xF
   673   000010                     	ds	1
   674   000011                     EnviaDato@a:
   675                           	callstack 0
   676   000011                     ___ftpack@exp:
   677                           	callstack 0
   678   000011                     frexp@eptr:
   679                           	callstack 0
   680   000011                     ___ftge@ff2:
   681                           	callstack 0
   682                           
   683                           ; 3 bytes @ 0x10
   684   000011                     	ds	1
   685   000012                     ??_frexp:
   686   000012                     EscribeLCD_c@a:
   687                           	callstack 0
   688   000012                     DireccionaLCD@a:
   689                           	callstack 0
   690   000012                     ___ftpack@sign:
   691                           	callstack 0
   692   000012                     ___lwmod@counter:
   693                           	callstack 0
   694   000012                     ___wmul@product:
   695                           	callstack 0
   696   000012                     ___lmul@multiplicand:
   697                           	callstack 0
   698   000012                     ___llmod@divisor:
   699                           	callstack 0
   700                           
   701                           ; 4 bytes @ 0x11
   702   000012                     	ds	1
   703   000013                     ??___ftpack:
   704   000013                     MensajeLCD_Var@a:
   705                           	callstack 0
   706                           
   707                           ; 1 bytes @ 0x12
   708   000013                     	ds	1
   709   000014                     ??_MensajeLCD_Var:
   710   000014                     ??___ftge:
   711   000014                     ?___lwdiv:
   712                           	callstack 0
   713   000014                     ?_factorial_function:
   714                           	callstack 0
   715   000014                     factorial_function@a:
   716                           	callstack 0
   717   000014                     ___lwdiv@dividend:
   718                           	callstack 0
   719                           
   720                           ; 2 bytes @ 0x13
   721   000014                     	ds	1
   722   000015                     MensajeLCD_Var@i:
   723                           	callstack 0
   724                           
   725                           ; 2 bytes @ 0x14
   726   000015                     	ds	1
   727   000016                     ?___ftdiv:
   728                           	callstack 0
   729   000016                     ?___awtoft:
   730                           	callstack 0
   731   000016                     ?___lltoft:
   732                           	callstack 0
   733   000016                     ?___lwtoft:
   734                           	callstack 0
   735   000016                     ___llmod@counter:
   736                           	callstack 0
   737   000016                     ___awtoft@c:
   738                           	callstack 0
   739   000016                     ___lwdiv@divisor:
   740                           	callstack 0
   741   000016                     ___lwtoft@c:
   742                           	callstack 0
   743   000016                     ___ftdiv@f1:
   744                           	callstack 0
   745   000016                     ___lmul@product:
   746                           	callstack 0
   747   000016                     ___lltoft@c:
   748                           	callstack 0
   749                           
   750                           ; 4 bytes @ 0x15
   751   000016                     	ds	1
   752   000017                     ?___lldiv:
   753                           	callstack 0
   754   000017                     ___lldiv@dividend:
   755                           	callstack 0
   756                           
   757                           ; 4 bytes @ 0x16
   758   000017                     	ds	1
   759   000018                     factorial_function@fact:
   760                           	callstack 0
   761   000018                     ___lwdiv@quotient:
   762                           	callstack 0
   763                           
   764                           ; 2 bytes @ 0x17
   765   000018                     	ds	1
   766   000019                     ?___fttol:
   767                           	callstack 0
   768   000019                     ___awtoft@sign:
   769                           	callstack 0
   770   000019                     ___ftdiv@f2:
   771                           	callstack 0
   772   000019                     ___fttol@f1:
   773                           	callstack 0
   774                           
   775                           ; 3 bytes @ 0x18
   776   000019                     	ds	1
   777   00001A                     ??___lltoft:
   778   00001A                     ?___ftmul:
   779                           	callstack 0
   780   00001A                     ___lwdiv@counter:
   781                           	callstack 0
   782   00001A                     ___ftmul@f1:
   783                           	callstack 0
   784                           
   785                           ; 3 bytes @ 0x19
   786   00001A                     	ds	1
   787   00001B                     ___lldiv@divisor:
   788                           	callstack 0
   789                           
   790                           ; 4 bytes @ 0x1A
   791   00001B                     	ds	1
   792   00001C                     ??___ftdiv:
   793                           
   794                           ; 1 bytes @ 0x1B
   795   00001C                     	ds	1
   796   00001D                     ??___fttol:
   797   00001D                     ___ftmul@f2:
   798                           	callstack 0
   799                           
   800                           ; 3 bytes @ 0x1C
   801   00001D                     	ds	1
   802   00001E                     ___lltoft@exp:
   803                           	callstack 0
   804                           
   805                           ; 1 bytes @ 0x1D
   806   00001E                     	ds	1
   807   00001F                     ___ftdiv@cntr:
   808                           	callstack 0
   809   00001F                     ___lldiv@quotient:
   810                           	callstack 0
   811                           
   812                           ; 4 bytes @ 0x1E
   813   00001F                     	ds	1
   814   000020                     ??___ftmul:
   815   000020                     ___ftdiv@f3:
   816                           	callstack 0
   817                           
   818                           ; 3 bytes @ 0x1F
   819   000020                     	ds	2
   820   000022                     ___fttol@sign1:
   821                           	callstack 0
   822                           
   823                           ; 1 bytes @ 0x21
   824   000022                     	ds	1
   825   000023                     ___lldiv@counter:
   826                           	callstack 0
   827   000023                     ___ftdiv@exp:
   828                           	callstack 0
   829   000023                     ___ftmul@exp:
   830                           	callstack 0
   831   000023                     ___fttol@lval:
   832                           	callstack 0
   833                           
   834                           ; 4 bytes @ 0x22
   835   000023                     	ds	1
   836   000024                     ___ftdiv@sign:
   837                           	callstack 0
   838   000024                     ___ftmul@f3_as_product:
   839                           	callstack 0
   840   000024                     EscribeLCD_n16@a:
   841                           	callstack 0
   842                           
   843                           ; 4 bytes @ 0x23
   844   000024                     	ds	3
   845   000027                     ___ftmul@cntr:
   846                           	callstack 0
   847   000027                     ___fttol@exp1:
   848                           	callstack 0
   849                           
   850                           ; 1 bytes @ 0x26
   851   000027                     	ds	1
   852   000028                     ?___altoft:
   853                           	callstack 0
   854   000028                     EscribeLCD_n16@b:
   855                           	callstack 0
   856   000028                     ___ftmul@sign:
   857                           	callstack 0
   858   000028                     ___altoft@c:
   859                           	callstack 0
   860                           
   861                           ; 4 bytes @ 0x27
   862   000028                     	ds	1
   863   000029                     ?___ftadd:
   864                           	callstack 0
   865   000029                     ___ftadd@f1:
   866                           	callstack 0
   867   000029                     EscribeLCD_n16@millar:
   868                           	callstack 0
   869                           
   870                           ; 4 bytes @ 0x28
   871   000029                     	ds	3
   872   00002C                     ??___altoft:
   873   00002C                     ___ftadd@f2:
   874                           	callstack 0
   875                           
   876                           ; 3 bytes @ 0x2B
   877   00002C                     	ds	1
   878   00002D                     EscribeLCD_n16@centena:
   879                           	callstack 0
   880                           
   881                           ; 4 bytes @ 0x2C
   882   00002D                     	ds	2
   883   00002F                     ??___ftadd:
   884                           
   885                           ; 1 bytes @ 0x2E
   886   00002F                     	ds	1
   887   000030                     ___altoft@exp:
   888                           	callstack 0
   889                           
   890                           ; 1 bytes @ 0x2F
   891   000030                     	ds	1
   892   000031                     EscribeLCD_n16@decena:
   893                           	callstack 0
   894   000031                     ___altoft@sign:
   895                           	callstack 0
   896                           
   897                           ; 1 bytes @ 0x30
   898   000031                     	ds	1
   899   000032                     EscribeLCD_n16@unidad:
   900                           	callstack 0
   901   000032                     ___ftadd@sign:
   902                           	callstack 0
   903                           
   904                           ; 1 bytes @ 0x31
   905   000032                     	ds	1
   906   000033                     ___ftadd@exp2:
   907                           	callstack 0
   908   000033                     Imprimir_Resultado@r:
   909                           	callstack 0
   910                           
   911                           ; 4 bytes @ 0x32
   912   000033                     	ds	1
   913   000034                     ___ftadd@exp1:
   914                           	callstack 0
   915                           
   916                           ; 1 bytes @ 0x33
   917   000034                     	ds	1
   918   000035                     ?___ftsub:
   919                           	callstack 0
   920   000035                     ?_floor:
   921                           	callstack 0
   922   000035                     ?_eval_poly:
   923                           	callstack 0
   924   000035                     ___ftsub@f1:
   925                           	callstack 0
   926   000035                     eval_poly@x:
   927                           	callstack 0
   928   000035                     floor@x:
   929                           	callstack 0
   930                           
   931                           ; 3 bytes @ 0x34
   932   000035                     	ds	2
   933   000037                     ??_Imprimir_Resultado:
   934                           
   935                           ; 1 bytes @ 0x36
   936   000037                     	ds	1
   937   000038                     eval_poly@d:
   938                           	callstack 0
   939   000038                     ___ftsub@f2:
   940                           	callstack 0
   941   000038                     floor@i:
   942                           	callstack 0
   943                           
   944                           ; 3 bytes @ 0x37
   945   000038                     	ds	1
   946   000039                     eval_poly@n:
   947                           	callstack 0
   948                           
   949                           ; 2 bytes @ 0x38
   950   000039                     	ds	2
   951   00003B                     ??_eval_poly:
   952   00003B                     Imprimir_Resultado@i:
   953                           	callstack 0
   954   00003B                     floor@expon:
   955                           	callstack 0
   956                           
   957                           ; 2 bytes @ 0x3A
   958   00003B                     	ds	1
   959   00003C                     eval_poly@res:
   960                           	callstack 0
   961                           
   962                           ; 3 bytes @ 0x3B
   963   00003C                     	ds	3
   964   00003F                     ?_log:
   965                           	callstack 0
   966   00003F                     ?_ldexp:
   967                           	callstack 0
   968   00003F                     ldexp@value:
   969                           	callstack 0
   970   00003F                     log@x:
   971                           	callstack 0
   972                           
   973                           ; 3 bytes @ 0x3E
   974   00003F                     	ds	3
   975   000042                     ldexp@newexp:
   976                           	callstack 0
   977   000042                     log@exponent:
   978                           	callstack 0
   979                           
   980                           ; 2 bytes @ 0x41
   981   000042                     	ds	2
   982   000044                     
   983                           ; 1 bytes @ 0x43
   984 ;;
   985 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   986 ;;
   987 ;; *************** function _main *****************
   988 ;; Defined at:
   989 ;;		line 37 in file "Lab4.c"
   990 ;; Parameters:    Size  Location     Type
   991 ;;		None
   992 ;; Auto vars:     Size  Location     Type
   993 ;;		None
   994 ;; Return value:  Size  Location     Type
   995 ;;                  1    wreg      void 
   996 ;; Registers used:
   997 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   998 ;; Tracked objects:
   999 ;;		On entry : 0/0
  1000 ;;		On exit  : 0/0
  1001 ;;		Unchanged: 0/0
  1002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1003 ;;      Params:         0       0       0       0       0       0       0       0       0
  1004 ;;      Locals:         0       5       0       0       0       0       0       0       0
  1005 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1006 ;;      Totals:         0       7       0       0       0       0       0       0       0
  1007 ;;Total ram usage:        7 bytes
  1008 ;; Hardware stack levels required when called: 10
  1009 ;; This function calls:
  1010 ;;		_BorraLCD
  1011 ;;		_ColorRGB
  1012 ;;		_ConfiguraLCD
  1013 ;;		_DireccionaLCD
  1014 ;;		_EscribeLCD_c
  1015 ;;		_Imprimir_Resultado
  1016 ;;		_InicializaLCD
  1017 ;;		_LeerTeclado
  1018 ;;		_MensajeLCD_Var
  1019 ;;		___fttol
  1020 ;;		___lmul
  1021 ;;		___lwdiv
  1022 ;;		___lwtoft
  1023 ;;		___wmul
  1024 ;;		_factorial_function
  1025 ;;		_pow
  1026 ;; This function is called by:
  1027 ;;		Startup code after reset
  1028 ;; This function uses a non-reentrant model
  1029 ;;
  1030                           
  1031                           	psect	text0
  1032   0008B4                     __ptext0:
  1033                           	callstack 0
  1034   0008B4                     _main:
  1035                           	callstack 21
  1036                           
  1037                           ;Lab4.c: 38: ADCON1=15;
  1038                           
  1039                           ;incstack = 0
  1040   0008B4  0E0F               	movlw	15
  1041   0008B6  6EC1               	movwf	193,c	;volatile
  1042                           
  1043                           ;Lab4.c: 39: TRISD=0;
  1044   0008B8  0E00               	movlw	0
  1045   0008BA  6E95               	movwf	149,c	;volatile
  1046                           
  1047                           ;Lab4.c: 40: TRISB=0b11110000;
  1048   0008BC  0EF0               	movlw	240
  1049   0008BE  6E93               	movwf	147,c	;volatile
  1050                           
  1051                           ;Lab4.c: 41: TRISE=0;
  1052   0008C0  0E00               	movlw	0
  1053   0008C2  6E96               	movwf	150,c	;volatile
  1054                           
  1055                           ;Lab4.c: 42: TRISC=0;
  1056   0008C4  0E00               	movlw	0
  1057   0008C6  6E94               	movwf	148,c	;volatile
  1058                           
  1059                           ;Lab4.c: 43: RBPU=0;
  1060   0008C8  9EF1               	bcf	4081,7,c	;volatile
  1061                           
  1062                           ;Lab4.c: 44: ConfiguraLCD(4);
  1063   0008CA  0E04               	movlw	4
  1064   0008CC  EC95  F015         	call	_ConfiguraLCD
  1065                           
  1066                           ;Lab4.c: 45: InicializaLCD();
  1067   0008D0  EC42  F011         	call	_InicializaLCD	;wreg free
  1068                           
  1069                           ;Lab4.c: 47: T0CON=0b10000010;
  1070   0008D4  0E82               	movlw	130
  1071   0008D6  6ED5               	movwf	213,c	;volatile
  1072                           
  1073                           ;Lab4.c: 48: TMR0IF=0;
  1074   0008D8  94F2               	bcf	4082,2,c	;volatile
  1075                           
  1076                           ;Lab4.c: 49: TMR0=49911;
  1077   0008DA  0EC2               	movlw	194
  1078   0008DC  6ED7               	movwf	215,c	;volatile
  1079   0008DE  0EF7               	movlw	247
  1080   0008E0  6ED6               	movwf	214,c	;volatile
  1081                           
  1082                           ;Lab4.c: 50: TMR0IE=1;
  1083   0008E2  8AF2               	bsf	4082,5,c	;volatile
  1084                           
  1085                           ;Lab4.c: 51: GIE=1;
  1086   0008E4  8EF2               	bsf	4082,7,c	;volatile
  1087                           
  1088                           ;Lab4.c: 52: TMR0ON=1;
  1089   0008E6  8ED5               	bsf	4053,7,c	;volatile
  1090                           
  1091                           ;Lab4.c: 55: OSCCON = 0b11000100;
  1092   0008E8  0EC4               	movlw	196
  1093   0008EA  6ED3               	movwf	211,c	;volatile
  1094                           
  1095                           ;Lab4.c: 57: BorraLCD();
  1096   0008EC  ECCD  F015         	call	_BorraLCD	;wreg free
  1097                           
  1098                           ;Lab4.c: 58: if(TO == 1 && PD == 1){
  1099   0008F0  B6D0               	btfsc	4048,3,c	;volatile
  1100   0008F2  A4D0               	btfss	4048,2,c	;volatile
  1101   0008F4  D007               	goto	l178
  1102                           
  1103                           ;Lab4.c: 59: BorraLCD();
  1104   0008F6  ECCD  F015         	call	_BorraLCD	;wreg free
  1105                           
  1106                           ;Lab4.c: 60: MensajeLCD_Var("Energia");
  1107   0008FA  0EA6               	movlw	low STR_1
  1108   0008FC  6E13               	movwf	MensajeLCD_Var@a^0,c
  1109   0008FE  EC6D  F014         	call	_MensajeLCD_Var	;wreg free
  1110                           
  1111                           ;Lab4.c: 61: }else{
  1112   000902  D008               	goto	l4667
  1113   000904                     l178:
  1114                           
  1115                           ;Lab4.c: 62: if(POR==0){
  1116   000904  B2D0               	btfsc	4048,1,c	;volatile
  1117   000906  D006               	goto	l4667
  1118                           
  1119                           ;Lab4.c: 63: BorraLCD();
  1120   000908  ECCD  F015         	call	_BorraLCD	;wreg free
  1121                           
  1122                           ;Lab4.c: 64: MensajeLCD_Var("MCLR");
  1123   00090C  0EAE               	movlw	low STR_2
  1124   00090E  6E13               	movwf	MensajeLCD_Var@a^0,c
  1125   000910  EC6D  F014         	call	_MensajeLCD_Var	;wreg free
  1126   000914                     l4667:
  1127                           
  1128                           ;Lab4.c: 65: };Lab4.c: 66: };Lab4.c: 67: _delay((unsigned long)((2000)*(1000000/4000.0))
      +                          );
  1129   000914  0E03               	movlw	3
  1130   000916  0100               	movlb	0	; () banked
  1131   000918  6F7D               	movwf	(??_main+1)& (0+255),b
  1132   00091A  0E8A               	movlw	138
  1133   00091C  6F7C               	movwf	??_main& (0+255),b
  1134   00091E  0E55               	movlw	85
  1135   000920                     u6547:
  1136   000920  2EE8               	decfsz	wreg,f,c
  1137   000922  D7FE               	bra	u6547
  1138   000924  2F7C               	decfsz	??_main& (0+255),f,b
  1139   000926  D7FC               	bra	u6547
  1140   000928  2F7D               	decfsz	(??_main+1)& (0+255),f,b
  1141   00092A  D7FA               	bra	u6547
  1142   00092C  D000               	nop2	
  1143   00092E                     l4669:
  1144                           
  1145                           ;Lab4.c: 68: BorraLCD();
  1146   00092E  ECCD  F015         	call	_BorraLCD	;wreg free
  1147   000932                     l4671:
  1148                           
  1149                           ;Lab4.c: 70: LATB=0b00000000;
  1150   000932  0E00               	movlw	0
  1151   000934  6E8A               	movwf	138,c	;volatile
  1152                           
  1153                           ;Lab4.c: 71: verificador = 0;
  1154   000936  0E00               	movlw	0
  1155   000938  6E47               	movwf	(_verificador+1)^0,c
  1156   00093A  0E00               	movlw	0
  1157   00093C  6E46               	movwf	_verificador^0,c
  1158                           
  1159                           ;Lab4.c: 72: Tecla = LeerTeclado();
  1160   00093E  ECD0  F00F         	call	_LeerTeclado	;wreg free
  1161   000942  0100               	movlb	0	; () banked
  1162   000944  6F9D               	movwf	_Tecla& (0+255),b
  1163                           
  1164                           ; BSR set to: 0
  1165                           ;Lab4.c: 73: ColorRGB();
  1166   000946  EC58  F012         	call	_ColorRGB	;wreg free
  1167                           
  1168                           ; BSR set to: 0
  1169                           ;Lab4.c: 74: if(Tecla=='C'){
  1170   00094A  0E43               	movlw	67
  1171   00094C  199D               	xorwf	_Tecla& (0+255),w,b
  1172   00094E  A4D8               	btfss	status,2,c
  1173   000950  D01F               	goto	l4699
  1174                           
  1175                           ; BSR set to: 0
  1176                           ;Lab4.c: 75: DireccionaLCD(0xC0);
  1177   000952  0EC0               	movlw	192
  1178   000954  ECAC  F015         	call	_DireccionaLCD
  1179                           
  1180                           ;Lab4.c: 77: op = ' ';
  1181   000958  0E20               	movlw	32
  1182   00095A  0100               	movlb	0	; () banked
  1183   00095C  6FA0               	movwf	_op& (0+255),b
  1184                           
  1185                           ; BSR set to: 0
  1186                           ;Lab4.c: 78: n1c = ' ';
  1187   00095E  0E20               	movlw	32
  1188   000960  6F9F               	movwf	_n1c& (0+255),b
  1189                           
  1190                           ; BSR set to: 0
  1191                           ;Lab4.c: 79: n2c = ' ';
  1192   000962  0E20               	movlw	32
  1193   000964  6F9E               	movwf	_n2c& (0+255),b
  1194                           
  1195                           ; BSR set to: 0
  1196                           ;Lab4.c: 80: n1 = 0;
  1197   000966  0E00               	movlw	0
  1198   000968  6F9A               	movwf	(_n1+1)& (0+255),b
  1199   00096A  0E00               	movlw	0
  1200   00096C  6F99               	movwf	_n1& (0+255),b
  1201                           
  1202                           ; BSR set to: 0
  1203                           ;Lab4.c: 81: n2 = 0;
  1204   00096E  0E00               	movlw	0
  1205   000970  6F98               	movwf	(_n2+1)& (0+255),b
  1206   000972  0E00               	movlw	0
  1207   000974  6F97               	movwf	_n2& (0+255),b
  1208                           
  1209                           ; BSR set to: 0
  1210                           ;Lab4.c: 82: i = 0;
  1211   000976  0E00               	movlw	0
  1212   000978  6F96               	movwf	(_i+1)& (0+255),b
  1213   00097A  0E00               	movlw	0
  1214   00097C  6F95               	movwf	_i& (0+255),b
  1215                           
  1216                           ; BSR set to: 0
  1217                           ;Lab4.c: 83: partdecl = 0;
  1218   00097E  0E00               	movlw	0
  1219   000980  6F8B               	movwf	_partdecl& (0+255),b
  1220   000982  0E00               	movlw	0
  1221   000984  6F8C               	movwf	(_partdecl+1)& (0+255),b
  1222   000986  0E00               	movlw	0
  1223   000988  6F8D               	movwf	(_partdecl+2)& (0+255),b
  1224   00098A  0E00               	movlw	0
  1225   00098C  6F8E               	movwf	(_partdecl+3)& (0+255),b
  1226   00098E  D7CF               	goto	l4669
  1227   000990                     l4699:
  1228                           
  1229                           ; BSR set to: 0
  1230   000990  0E20               	movlw	32
  1231   000992  19A0               	xorwf	_op& (0+255),w,b
  1232   000994  A4D8               	btfss	status,2,c
  1233   000996  D03E               	goto	l4735
  1234                           
  1235                           ; BSR set to: 0
  1236   000998  0E2B               	movlw	43
  1237   00099A  199D               	xorwf	_Tecla& (0+255),w,b
  1238   00099C  B4D8               	btfsc	status,2,c
  1239   00099E  D004               	goto	u5780
  1240                           
  1241                           ; BSR set to: 0
  1242   0009A0  0E5E               	movlw	94
  1243   0009A2  199D               	xorwf	_Tecla& (0+255),w,b
  1244   0009A4  A4D8               	btfss	status,2,c
  1245   0009A6  D036               	goto	l4735
  1246   0009A8                     u5780:
  1247                           
  1248                           ; BSR set to: 0
  1249   0009A8  0E20               	movlw	32
  1250   0009AA  199F               	xorwf	_n1c& (0+255),w,b
  1251   0009AC  A4D8               	btfss	status,2,c
  1252   0009AE  D032               	goto	l4735
  1253                           
  1254                           ; BSR set to: 0
  1255   0009B0  0E20               	movlw	32
  1256   0009B2  199E               	xorwf	_n2c& (0+255),w,b
  1257   0009B4  A4D8               	btfss	status,2,c
  1258   0009B6  D02E               	goto	l4735
  1259                           
  1260                           ; BSR set to: 0
  1261                           ;Lab4.c: 86: potencia=~potencia;
  1262   0009B8  1F9C               	comf	_potencia& (0+255),f,b
  1263                           
  1264                           ; BSR set to: 0
  1265                           ;Lab4.c: 87: if(potencia){
  1266   0009BA  519C               	movf	_potencia& (0+255),w,b
  1267   0009BC  B4D8               	btfsc	status,2,c
  1268   0009BE  D01B               	goto	l4725
  1269                           
  1270                           ; BSR set to: 0
  1271                           ;Lab4.c: 88: DireccionaLCD(0x80);
  1272   0009C0  0E80               	movlw	128
  1273   0009C2  ECAC  F015         	call	_DireccionaLCD
  1274                           
  1275                           ;Lab4.c: 89: MensajeLCD_Var("Modo Potencia");
  1276   0009C6  0E49               	movlw	low STR_3
  1277   0009C8  6E13               	movwf	MensajeLCD_Var@a^0,c
  1278   0009CA  EC6D  F014         	call	_MensajeLCD_Var	;wreg free
  1279                           
  1280                           ;Lab4.c: 90: DireccionaLCD(0xC0);
  1281   0009CE  0EC0               	movlw	192
  1282   0009D0  ECAC  F015         	call	_DireccionaLCD
  1283                           
  1284                           ;Lab4.c: 91: MensajeLCD_Var("Activado");
  1285   0009D4  0E69               	movlw	low (STR_11+4)
  1286   0009D6  6E13               	movwf	MensajeLCD_Var@a^0,c
  1287   0009D8  EC6D  F014         	call	_MensajeLCD_Var	;wreg free
  1288   0009DC                     l4719:
  1289                           
  1290                           ;Lab4.c: 92: _delay((unsigned long)((1000)*(1000000/4000.0)));
  1291   0009DC  0E02               	movlw	2
  1292   0009DE  0100               	movlb	0	; () banked
  1293   0009E0  6F7D               	movwf	(??_main+1)& (0+255),b
  1294   0009E2  0E45               	movlw	69
  1295   0009E4  6F7C               	movwf	??_main& (0+255),b
  1296   0009E6  0EA9               	movlw	169
  1297   0009E8                     u6557:
  1298   0009E8  2EE8               	decfsz	wreg,f,c
  1299   0009EA  D7FE               	bra	u6557
  1300   0009EC  2F7C               	decfsz	??_main& (0+255),f,b
  1301   0009EE  D7FC               	bra	u6557
  1302   0009F0  2F7D               	decfsz	(??_main+1)& (0+255),f,b
  1303   0009F2  D7FA               	bra	u6557
  1304   0009F4  D79B               	goto	L1
  1305   0009F6                     l4725:
  1306                           
  1307                           ; BSR set to: 0
  1308                           ;Lab4.c: 96: DireccionaLCD(0x80);
  1309   0009F6  0E80               	movlw	128
  1310   0009F8  ECAC  F015         	call	_DireccionaLCD
  1311                           
  1312                           ;Lab4.c: 97: MensajeLCD_Var("Modo Suma");
  1313   0009FC  0E89               	movlw	low STR_5
  1314   0009FE  6E13               	movwf	MensajeLCD_Var@a^0,c
  1315   000A00  EC6D  F014         	call	_MensajeLCD_Var	;wreg free
  1316                           
  1317                           ;Lab4.c: 98: DireccionaLCD(0xC0);
  1318   000A04  0EC0               	movlw	192
  1319   000A06  ECAC  F015         	call	_DireccionaLCD
  1320                           
  1321                           ;Lab4.c: 99: MensajeLCD_Var("Activado");
  1322   000A0A  0E69               	movlw	low (STR_11+4)
  1323   000A0C  6E13               	movwf	MensajeLCD_Var@a^0,c
  1324   000A0E  EC6D  F014         	call	_MensajeLCD_Var	;wreg free
  1325   000A12  D7E4               	goto	l4719
  1326   000A14                     l4735:
  1327                           
  1328                           ; BSR set to: 0
  1329   000A14  0E20               	movlw	32
  1330   000A16  19A0               	xorwf	_op& (0+255),w,b
  1331   000A18  A4D8               	btfss	status,2,c
  1332   000A1A  D032               	goto	l4771
  1333                           
  1334                           ; BSR set to: 0
  1335   000A1C  0E2D               	movlw	45
  1336   000A1E  199D               	xorwf	_Tecla& (0+255),w,b
  1337   000A20  B4D8               	btfsc	status,2,c
  1338   000A22  D004               	goto	u5840
  1339                           
  1340                           ; BSR set to: 0
  1341   000A24  0E21               	movlw	33
  1342   000A26  199D               	xorwf	_Tecla& (0+255),w,b
  1343   000A28  A4D8               	btfss	status,2,c
  1344   000A2A  D02A               	goto	l4771
  1345   000A2C                     u5840:
  1346                           
  1347                           ; BSR set to: 0
  1348   000A2C  0E20               	movlw	32
  1349   000A2E  199F               	xorwf	_n1c& (0+255),w,b
  1350   000A30  A4D8               	btfss	status,2,c
  1351   000A32  D026               	goto	l4771
  1352                           
  1353                           ; BSR set to: 0
  1354   000A34  0E20               	movlw	32
  1355   000A36  199E               	xorwf	_n2c& (0+255),w,b
  1356   000A38  A4D8               	btfss	status,2,c
  1357   000A3A  D022               	goto	l4771
  1358                           
  1359                           ; BSR set to: 0
  1360                           ;Lab4.c: 105: factorial=~factorial;
  1361   000A3C  1F9B               	comf	_factorial& (0+255),f,b
  1362                           
  1363                           ; BSR set to: 0
  1364                           ;Lab4.c: 106: if(factorial){
  1365   000A3E  519B               	movf	_factorial& (0+255),w,b
  1366   000A40  B4D8               	btfsc	status,2,c
  1367   000A42  D00F               	goto	l4761
  1368                           
  1369                           ; BSR set to: 0
  1370                           ;Lab4.c: 107: DireccionaLCD(0x80);
  1371   000A44  0E80               	movlw	128
  1372   000A46  ECAC  F015         	call	_DireccionaLCD
  1373                           
  1374                           ;Lab4.c: 108: MensajeLCD_Var("Modo Factorial");
  1375   000A4A  0E3A               	movlw	low STR_7
  1376   000A4C  6E13               	movwf	MensajeLCD_Var@a^0,c
  1377   000A4E  EC6D  F014         	call	_MensajeLCD_Var	;wreg free
  1378                           
  1379                           ;Lab4.c: 109: DireccionaLCD(0xC0);
  1380   000A52  0EC0               	movlw	192
  1381   000A54  ECAC  F015         	call	_DireccionaLCD
  1382                           
  1383                           ;Lab4.c: 110: MensajeLCD_Var("Activado");
  1384   000A58  0E69               	movlw	low (STR_11+4)
  1385   000A5A  6E13               	movwf	MensajeLCD_Var@a^0,c
  1386   000A5C  EC6D  F014         	call	_MensajeLCD_Var	;wreg free
  1387   000A60  D7BD               	goto	l4719
  1388   000A62                     l4761:
  1389                           
  1390                           ; BSR set to: 0
  1391                           ;Lab4.c: 115: DireccionaLCD(0x80);
  1392   000A62  0E80               	movlw	128
  1393   000A64  ECAC  F015         	call	_DireccionaLCD
  1394                           
  1395                           ;Lab4.c: 116: MensajeLCD_Var("Modo Resta");
  1396   000A68  0E7E               	movlw	low STR_9
  1397   000A6A  6E13               	movwf	MensajeLCD_Var@a^0,c
  1398   000A6C  EC6D  F014         	call	_MensajeLCD_Var	;wreg free
  1399                           
  1400                           ;Lab4.c: 117: DireccionaLCD(0xC0);
  1401   000A70  0EC0               	movlw	192
  1402   000A72  ECAC  F015         	call	_DireccionaLCD
  1403                           
  1404                           ;Lab4.c: 118: MensajeLCD_Var("Activado");
  1405   000A76  0E69               	movlw	low (STR_11+4)
  1406   000A78  6E13               	movwf	MensajeLCD_Var@a^0,c
  1407   000A7A  EC6D  F014         	call	_MensajeLCD_Var	;wreg free
  1408   000A7E  D7AE               	goto	l4719
  1409   000A80                     l4771:
  1410                           
  1411                           ; BSR set to: 0
  1412                           ;Lab4.c: 124: if((n1c==' '|n2c==' '|op==' ') & !factorial){
  1413   000A80  0E20               	movlw	32
  1414   000A82  199F               	xorwf	_n1c& (0+255),w,b
  1415   000A84  B4D8               	btfsc	status,2,c
  1416   000A86  D008               	goto	u5900
  1417                           
  1418                           ; BSR set to: 0
  1419   000A88  0E20               	movlw	32
  1420   000A8A  199E               	xorwf	_n2c& (0+255),w,b
  1421   000A8C  B4D8               	btfsc	status,2,c
  1422   000A8E  D004               	goto	u5900
  1423                           
  1424                           ; BSR set to: 0
  1425   000A90  0E20               	movlw	32
  1426   000A92  19A0               	xorwf	_op& (0+255),w,b
  1427   000A94  A4D8               	btfss	status,2,c
  1428   000A96  D097               	goto	l4847
  1429   000A98                     u5900:
  1430                           
  1431                           ; BSR set to: 0
  1432   000A98  519B               	movf	_factorial& (0+255),w,b
  1433   000A9A  A4D8               	btfss	status,2,c
  1434   000A9C  D094               	goto	l4847
  1435                           
  1436                           ; BSR set to: 0
  1437                           ;Lab4.c: 125: if(op==' ' & (Tecla=='+'|Tecla=='-'|Tecla=='/'|Tecla=='x'|Tecla=='^') & n1
      +                          c != ' ' & n2c ==' '){
  1438   000A9E  0E20               	movlw	32
  1439   000AA0  19A0               	xorwf	_op& (0+255),w,b
  1440   000AA2  A4D8               	btfss	status,2,c
  1441   000AA4  D026               	goto	l4799
  1442                           
  1443                           ; BSR set to: 0
  1444   000AA6  0E2B               	movlw	43
  1445   000AA8  199D               	xorwf	_Tecla& (0+255),w,b
  1446   000AAA  B4D8               	btfsc	status,2,c
  1447   000AAC  D010               	goto	u5970
  1448                           
  1449                           ; BSR set to: 0
  1450   000AAE  0E2D               	movlw	45
  1451   000AB0  199D               	xorwf	_Tecla& (0+255),w,b
  1452   000AB2  B4D8               	btfsc	status,2,c
  1453   000AB4  D00C               	goto	u5970
  1454                           
  1455                           ; BSR set to: 0
  1456   000AB6  0E2F               	movlw	47
  1457   000AB8  199D               	xorwf	_Tecla& (0+255),w,b
  1458   000ABA  B4D8               	btfsc	status,2,c
  1459   000ABC  D008               	goto	u5970
  1460                           
  1461                           ; BSR set to: 0
  1462   000ABE  0E78               	movlw	120
  1463   000AC0  199D               	xorwf	_Tecla& (0+255),w,b
  1464   000AC2  B4D8               	btfsc	status,2,c
  1465   000AC4  D004               	goto	u5970
  1466                           
  1467                           ; BSR set to: 0
  1468   000AC6  0E5E               	movlw	94
  1469   000AC8  199D               	xorwf	_Tecla& (0+255),w,b
  1470   000ACA  A4D8               	btfss	status,2,c
  1471   000ACC  D012               	goto	l4799
  1472   000ACE                     u5970:
  1473                           
  1474                           ; BSR set to: 0
  1475   000ACE  0E20               	movlw	32
  1476   000AD0  199F               	xorwf	_n1c& (0+255),w,b
  1477   000AD2  B4D8               	btfsc	status,2,c
  1478   000AD4  D00E               	goto	l4799
  1479                           
  1480                           ; BSR set to: 0
  1481   000AD6  0E20               	movlw	32
  1482   000AD8  199E               	xorwf	_n2c& (0+255),w,b
  1483   000ADA  A4D8               	btfss	status,2,c
  1484   000ADC  D00A               	goto	l4799
  1485                           
  1486                           ; BSR set to: 0
  1487                           ;Lab4.c: 126: DireccionaLCD(0x81);
  1488   000ADE  0E81               	movlw	129
  1489   000AE0  ECAC  F015         	call	_DireccionaLCD
  1490                           
  1491                           ;Lab4.c: 127: EscribeLCD_c(Tecla);
  1492   000AE4  0100               	movlb	0	; () banked
  1493   000AE6  519D               	movf	_Tecla& (0+255),w,b
  1494   000AE8  ECA1  F015         	call	_EscribeLCD_c
  1495   000AEC                     l4797:
  1496                           
  1497                           ;Lab4.c: 128: op = Tecla;
  1498   000AEC  C09D  F0A0         	movff	_Tecla,_op
  1499                           
  1500                           ;Lab4.c: 129: }else if(n1c == ' ' & (Tecla!='+'|Tecla!='-'|Tecla!='/'|Tecla!='x'|Tecla!=
      +                          '='|Tecla!='C'|Tecla!='^')){
  1501   000AF0  D21E               	goto	l4989
  1502   000AF2                     l4799:
  1503                           
  1504                           ; BSR set to: 0
  1505   000AF2  0E20               	movlw	32
  1506   000AF4  199F               	xorwf	_n1c& (0+255),w,b
  1507   000AF6  A4D8               	btfss	status,2,c
  1508   000AF8  D02D               	goto	l4821
  1509                           
  1510                           ; BSR set to: 0
  1511   000AFA  0E2B               	movlw	43
  1512   000AFC  199D               	xorwf	_Tecla& (0+255),w,b
  1513   000AFE  A4D8               	btfss	status,2,c
  1514   000B00  D018               	goto	u6070
  1515                           
  1516                           ; BSR set to: 0
  1517   000B02  0E2D               	movlw	45
  1518   000B04  199D               	xorwf	_Tecla& (0+255),w,b
  1519   000B06  A4D8               	btfss	status,2,c
  1520   000B08  D014               	goto	u6070
  1521                           
  1522                           ; BSR set to: 0
  1523   000B0A  0E2F               	movlw	47
  1524   000B0C  199D               	xorwf	_Tecla& (0+255),w,b
  1525   000B0E  A4D8               	btfss	status,2,c
  1526   000B10  D010               	goto	u6070
  1527                           
  1528                           ; BSR set to: 0
  1529   000B12  0E78               	movlw	120
  1530   000B14  199D               	xorwf	_Tecla& (0+255),w,b
  1531   000B16  A4D8               	btfss	status,2,c
  1532   000B18  D00C               	goto	u6070
  1533                           
  1534                           ; BSR set to: 0
  1535   000B1A  0E3D               	movlw	61
  1536   000B1C  199D               	xorwf	_Tecla& (0+255),w,b
  1537   000B1E  A4D8               	btfss	status,2,c
  1538   000B20  D008               	goto	u6070
  1539                           
  1540                           ; BSR set to: 0
  1541   000B22  0E43               	movlw	67
  1542   000B24  199D               	xorwf	_Tecla& (0+255),w,b
  1543   000B26  A4D8               	btfss	status,2,c
  1544   000B28  D004               	goto	u6070
  1545                           
  1546                           ; BSR set to: 0
  1547   000B2A  0E5E               	movlw	94
  1548   000B2C  199D               	xorwf	_Tecla& (0+255),w,b
  1549   000B2E  B4D8               	btfsc	status,2,c
  1550   000B30  D011               	goto	l4821
  1551   000B32                     u6070:
  1552                           
  1553                           ; BSR set to: 0
  1554                           ;Lab4.c: 130: DireccionaLCD(0x80);
  1555   000B32  0E80               	movlw	128
  1556   000B34  ECAC  F015         	call	_DireccionaLCD
  1557                           
  1558                           ;Lab4.c: 131: EscribeLCD_c(Tecla);
  1559   000B38  0100               	movlb	0	; () banked
  1560   000B3A  519D               	movf	_Tecla& (0+255),w,b
  1561   000B3C  ECA1  F015         	call	_EscribeLCD_c
  1562   000B40                     l4817:
  1563                           
  1564                           ;Lab4.c: 132: n1c=Tecla;
  1565   000B40  C09D  F09F         	movff	_Tecla,_n1c
  1566                           
  1567                           ;Lab4.c: 133: n1 = Tecla-'0';
  1568   000B44  0ED0               	movlw	208
  1569   000B46  0100               	movlb	0	; () banked
  1570   000B48  259D               	addwf	_Tecla& (0+255),w,b
  1571   000B4A  6F99               	movwf	_n1& (0+255),b
  1572   000B4C  6B9A               	clrf	(_n1+1)& (0+255),b
  1573   000B4E  0EFF               	movlw	255
  1574   000B50  239A               	addwfc	(_n1+1)& (0+255),f,b
  1575                           
  1576                           ;Lab4.c: 134: }else if(n2c==' ' & op!=' ' & n1c != ' ' & (Tecla!='+'|Tecla!='-'|Tecla!='
      +                          /'|Tecla!='x'|Tecla!='='|Tecla!='C'|Tecla!='^')){
  1577   000B52  D1ED               	goto	l4989
  1578   000B54                     l4821:
  1579                           
  1580                           ; BSR set to: 0
  1581   000B54  0E20               	movlw	32
  1582   000B56  199E               	xorwf	_n2c& (0+255),w,b
  1583   000B58  A4D8               	btfss	status,2,c
  1584   000B5A  D1E9               	goto	l4989
  1585                           
  1586                           ; BSR set to: 0
  1587   000B5C  0E20               	movlw	32
  1588   000B5E  19A0               	xorwf	_op& (0+255),w,b
  1589   000B60  B4D8               	btfsc	status,2,c
  1590   000B62  D1E5               	goto	l4989
  1591                           
  1592                           ; BSR set to: 0
  1593   000B64  0E20               	movlw	32
  1594   000B66  199F               	xorwf	_n1c& (0+255),w,b
  1595   000B68  B4D8               	btfsc	status,2,c
  1596   000B6A  D1E1               	goto	l4989
  1597                           
  1598                           ; BSR set to: 0
  1599   000B6C  0E2B               	movlw	43
  1600   000B6E  199D               	xorwf	_Tecla& (0+255),w,b
  1601   000B70  A4D8               	btfss	status,2,c
  1602   000B72  D018               	goto	u6170
  1603                           
  1604                           ; BSR set to: 0
  1605   000B74  0E2D               	movlw	45
  1606   000B76  199D               	xorwf	_Tecla& (0+255),w,b
  1607   000B78  A4D8               	btfss	status,2,c
  1608   000B7A  D014               	goto	u6170
  1609                           
  1610                           ; BSR set to: 0
  1611   000B7C  0E2F               	movlw	47
  1612   000B7E  199D               	xorwf	_Tecla& (0+255),w,b
  1613   000B80  A4D8               	btfss	status,2,c
  1614   000B82  D010               	goto	u6170
  1615                           
  1616                           ; BSR set to: 0
  1617   000B84  0E78               	movlw	120
  1618   000B86  199D               	xorwf	_Tecla& (0+255),w,b
  1619   000B88  A4D8               	btfss	status,2,c
  1620   000B8A  D00C               	goto	u6170
  1621                           
  1622                           ; BSR set to: 0
  1623   000B8C  0E3D               	movlw	61
  1624   000B8E  199D               	xorwf	_Tecla& (0+255),w,b
  1625   000B90  A4D8               	btfss	status,2,c
  1626   000B92  D008               	goto	u6170
  1627                           
  1628                           ; BSR set to: 0
  1629   000B94  0E43               	movlw	67
  1630   000B96  199D               	xorwf	_Tecla& (0+255),w,b
  1631   000B98  A4D8               	btfss	status,2,c
  1632   000B9A  D004               	goto	u6170
  1633                           
  1634                           ; BSR set to: 0
  1635   000B9C  0E5E               	movlw	94
  1636   000B9E  199D               	xorwf	_Tecla& (0+255),w,b
  1637   000BA0  B4D8               	btfsc	status,2,c
  1638   000BA2  D1C5               	goto	l4989
  1639   000BA4                     u6170:
  1640                           
  1641                           ; BSR set to: 0
  1642                           ;Lab4.c: 135: DireccionaLCD(0x82);
  1643   000BA4  0E82               	movlw	130
  1644   000BA6  ECAC  F015         	call	_DireccionaLCD
  1645                           
  1646                           ;Lab4.c: 136: EscribeLCD_c(Tecla);
  1647   000BAA  0100               	movlb	0	; () banked
  1648   000BAC  519D               	movf	_Tecla& (0+255),w,b
  1649   000BAE  ECA1  F015         	call	_EscribeLCD_c
  1650                           
  1651                           ;Lab4.c: 137: n2c=Tecla;
  1652   000BB2  C09D  F09E         	movff	_Tecla,_n2c
  1653                           
  1654                           ;Lab4.c: 138: n2 = Tecla-'0';
  1655   000BB6  0ED0               	movlw	208
  1656   000BB8  0100               	movlb	0	; () banked
  1657   000BBA  259D               	addwf	_Tecla& (0+255),w,b
  1658   000BBC  6F97               	movwf	_n2& (0+255),b
  1659   000BBE  6B98               	clrf	(_n2+1)& (0+255),b
  1660   000BC0  0EFF               	movlw	255
  1661   000BC2  2398               	addwfc	(_n2+1)& (0+255),f,b
  1662                           
  1663                           ; BSR set to: 0
  1664                           ;Lab4.c: 139: };Lab4.c: 140: }else if ((n1c==' '|op==' ') & factorial){
  1665   000BC4  D1B4               	goto	l4989
  1666   000BC6                     l4847:
  1667                           
  1668                           ; BSR set to: 0
  1669   000BC6  0E01               	movlw	1
  1670   000BC8  6F81               	movwf	_main$158& (0+255),b
  1671                           
  1672                           ; BSR set to: 0
  1673   000BCA  0E20               	movlw	32
  1674   000BCC  199F               	xorwf	_n1c& (0+255),w,b
  1675   000BCE  B4D8               	btfsc	status,2,c
  1676   000BD0  D006               	goto	l4855
  1677                           
  1678                           ; BSR set to: 0
  1679   000BD2  0E20               	movlw	32
  1680   000BD4  19A0               	xorwf	_op& (0+255),w,b
  1681   000BD6  B4D8               	btfsc	status,2,c
  1682   000BD8  D002               	goto	l4855
  1683                           
  1684                           ; BSR set to: 0
  1685   000BDA  0E00               	movlw	0
  1686   000BDC  6F81               	movwf	_main$158& (0+255),b
  1687   000BDE                     l4855:
  1688                           
  1689                           ; BSR set to: 0
  1690   000BDE  5181               	movf	_main$158& (0+255),w,b
  1691   000BE0  159B               	andwf	_factorial& (0+255),w,b
  1692   000BE2  0900               	iorlw	0
  1693   000BE4  B4D8               	btfsc	status,2,c
  1694   000BE6  D058               	goto	l4903
  1695                           
  1696                           ; BSR set to: 0
  1697                           ;Lab4.c: 141: if(op==' ' & (Tecla=='+'|Tecla=='-'|Tecla=='/'|Tecla=='x'|Tecla=='^'|Tecla
      +                          =='!') & n1c != ' ' & n2c ==' '){
  1698   000BE8  0E20               	movlw	32
  1699   000BEA  19A0               	xorwf	_op& (0+255),w,b
  1700   000BEC  A4D8               	btfss	status,2,c
  1701   000BEE  D028               	goto	l4879
  1702                           
  1703                           ; BSR set to: 0
  1704   000BF0  0E2B               	movlw	43
  1705   000BF2  199D               	xorwf	_Tecla& (0+255),w,b
  1706   000BF4  B4D8               	btfsc	status,2,c
  1707   000BF6  D014               	goto	u6270
  1708                           
  1709                           ; BSR set to: 0
  1710   000BF8  0E2D               	movlw	45
  1711   000BFA  199D               	xorwf	_Tecla& (0+255),w,b
  1712   000BFC  B4D8               	btfsc	status,2,c
  1713   000BFE  D010               	goto	u6270
  1714                           
  1715                           ; BSR set to: 0
  1716   000C00  0E2F               	movlw	47
  1717   000C02  199D               	xorwf	_Tecla& (0+255),w,b
  1718   000C04  B4D8               	btfsc	status,2,c
  1719   000C06  D00C               	goto	u6270
  1720                           
  1721                           ; BSR set to: 0
  1722   000C08  0E78               	movlw	120
  1723   000C0A  199D               	xorwf	_Tecla& (0+255),w,b
  1724   000C0C  B4D8               	btfsc	status,2,c
  1725   000C0E  D008               	goto	u6270
  1726                           
  1727                           ; BSR set to: 0
  1728   000C10  0E5E               	movlw	94
  1729   000C12  199D               	xorwf	_Tecla& (0+255),w,b
  1730   000C14  B4D8               	btfsc	status,2,c
  1731   000C16  D004               	goto	u6270
  1732                           
  1733                           ; BSR set to: 0
  1734   000C18  0E21               	movlw	33
  1735   000C1A  199D               	xorwf	_Tecla& (0+255),w,b
  1736   000C1C  A4D8               	btfss	status,2,c
  1737   000C1E  D010               	goto	l4879
  1738   000C20                     u6270:
  1739                           
  1740                           ; BSR set to: 0
  1741   000C20  0E20               	movlw	32
  1742   000C22  199F               	xorwf	_n1c& (0+255),w,b
  1743   000C24  B4D8               	btfsc	status,2,c
  1744   000C26  D00C               	goto	l4879
  1745                           
  1746                           ; BSR set to: 0
  1747   000C28  0E20               	movlw	32
  1748   000C2A  199E               	xorwf	_n2c& (0+255),w,b
  1749   000C2C  A4D8               	btfss	status,2,c
  1750   000C2E  D008               	goto	l4879
  1751                           
  1752                           ; BSR set to: 0
  1753                           ;Lab4.c: 142: DireccionaLCD(0x81);
  1754   000C30  0E81               	movlw	129
  1755   000C32  ECAC  F015         	call	_DireccionaLCD
  1756                           
  1757                           ;Lab4.c: 143: EscribeLCD_c(Tecla);
  1758   000C36  0100               	movlb	0	; () banked
  1759   000C38  519D               	movf	_Tecla& (0+255),w,b
  1760   000C3A  ECA1  F015         	call	_EscribeLCD_c
  1761   000C3E  D756               	goto	l4797
  1762   000C40                     l4879:
  1763                           
  1764                           ; BSR set to: 0
  1765   000C40  0E20               	movlw	32
  1766   000C42  199F               	xorwf	_n1c& (0+255),w,b
  1767   000C44  A4D8               	btfss	status,2,c
  1768   000C46  D173               	goto	l4989
  1769                           
  1770                           ; BSR set to: 0
  1771   000C48  0E2B               	movlw	43
  1772   000C4A  199D               	xorwf	_Tecla& (0+255),w,b
  1773   000C4C  A4D8               	btfss	status,2,c
  1774   000C4E  D01C               	goto	u6380
  1775                           
  1776                           ; BSR set to: 0
  1777   000C50  0E2D               	movlw	45
  1778   000C52  199D               	xorwf	_Tecla& (0+255),w,b
  1779   000C54  A4D8               	btfss	status,2,c
  1780   000C56  D018               	goto	u6380
  1781                           
  1782                           ; BSR set to: 0
  1783   000C58  0E2F               	movlw	47
  1784   000C5A  199D               	xorwf	_Tecla& (0+255),w,b
  1785   000C5C  A4D8               	btfss	status,2,c
  1786   000C5E  D014               	goto	u6380
  1787                           
  1788                           ; BSR set to: 0
  1789   000C60  0E78               	movlw	120
  1790   000C62  199D               	xorwf	_Tecla& (0+255),w,b
  1791   000C64  A4D8               	btfss	status,2,c
  1792   000C66  D010               	goto	u6380
  1793                           
  1794                           ; BSR set to: 0
  1795   000C68  0E3D               	movlw	61
  1796   000C6A  199D               	xorwf	_Tecla& (0+255),w,b
  1797   000C6C  A4D8               	btfss	status,2,c
  1798   000C6E  D00C               	goto	u6380
  1799                           
  1800                           ; BSR set to: 0
  1801   000C70  0E43               	movlw	67
  1802   000C72  199D               	xorwf	_Tecla& (0+255),w,b
  1803   000C74  A4D8               	btfss	status,2,c
  1804   000C76  D008               	goto	u6380
  1805                           
  1806                           ; BSR set to: 0
  1807   000C78  0E5E               	movlw	94
  1808   000C7A  199D               	xorwf	_Tecla& (0+255),w,b
  1809   000C7C  A4D8               	btfss	status,2,c
  1810   000C7E  D004               	goto	u6380
  1811                           
  1812                           ; BSR set to: 0
  1813   000C80  0E21               	movlw	33
  1814   000C82  199D               	xorwf	_Tecla& (0+255),w,b
  1815   000C84  B4D8               	btfsc	status,2,c
  1816   000C86  D153               	goto	l4989
  1817   000C88                     u6380:
  1818                           
  1819                           ; BSR set to: 0
  1820                           ;Lab4.c: 146: DireccionaLCD(0x80);
  1821   000C88  0E80               	movlw	128
  1822   000C8A  ECAC  F015         	call	_DireccionaLCD
  1823                           
  1824                           ;Lab4.c: 147: EscribeLCD_c(Tecla);
  1825   000C8E  0100               	movlb	0	; () banked
  1826   000C90  519D               	movf	_Tecla& (0+255),w,b
  1827   000C92  ECA1  F015         	call	_EscribeLCD_c
  1828   000C96  D754               	goto	l4817
  1829   000C98                     l4903:
  1830                           
  1831                           ; BSR set to: 0
  1832   000C98  0E3D               	movlw	61
  1833   000C9A  199D               	xorwf	_Tecla& (0+255),w,b
  1834   000C9C  A4D8               	btfss	status,2,c
  1835   000C9E  D0FD               	goto	l4965
  1836                           
  1837                           ; BSR set to: 0
  1838   000CA0  0E20               	movlw	32
  1839   000CA2  199E               	xorwf	_n2c& (0+255),w,b
  1840   000CA4  B4D8               	btfsc	status,2,c
  1841   000CA6  D0F9               	goto	l4965
  1842                           
  1843                           ; BSR set to: 0
  1844   000CA8  0E20               	movlw	32
  1845   000CAA  19A0               	xorwf	_op& (0+255),w,b
  1846   000CAC  B4D8               	btfsc	status,2,c
  1847   000CAE  D0F5               	goto	l4965
  1848                           
  1849                           ; BSR set to: 0
  1850   000CB0  0E20               	movlw	32
  1851   000CB2  199F               	xorwf	_n1c& (0+255),w,b
  1852   000CB4  B4D8               	btfsc	status,2,c
  1853   000CB6  D0F1               	goto	l4965
  1854                           
  1855                           ; BSR set to: 0
  1856   000CB8  519B               	movf	_factorial& (0+255),w,b
  1857   000CBA  A4D8               	btfss	status,2,c
  1858   000CBC  D0EE               	goto	l4965
  1859                           
  1860                           ; BSR set to: 0
  1861                           ;Lab4.c: 152: DireccionaLCD(0x83);
  1862   000CBE  0E83               	movlw	131
  1863   000CC0  ECAC  F015         	call	_DireccionaLCD
  1864                           
  1865                           ;Lab4.c: 153: EscribeLCD_c('=');
  1866   000CC4  0E3D               	movlw	61
  1867   000CC6  ECA1  F015         	call	_EscribeLCD_c
  1868                           
  1869                           ;Lab4.c: 154: switch(op){
  1870   000CCA  D0C7               	goto	l4959
  1871   000CCC                     l4915:
  1872                           
  1873                           ; BSR set to: 0
  1874                           ;Lab4.c: 156: r = n1 + n2;
  1875   000CCC  5197               	movf	_n2& (0+255),w,b
  1876   000CCE  2599               	addwf	_n1& (0+255),w,b
  1877   000CD0  6F7C               	movwf	??_main& (0+255),b
  1878   000CD2  5198               	movf	(_n2+1)& (0+255),w,b
  1879   000CD4  219A               	addwfc	(_n1+1)& (0+255),w,b
  1880   000CD6  6F7D               	movwf	(??_main+1)& (0+255),b
  1881   000CD8  C07C  F087         	movff	??_main,_r
  1882   000CDC  C07D  F088         	movff	??_main+1,_r+1
  1883   000CE0  6B89               	clrf	(_r+2)& (0+255),b
  1884   000CE2  6B8A               	clrf	(_r+3)& (0+255),b
  1885   000CE4                     l4917:
  1886                           
  1887                           ;Lab4.c: 157: partdecl = r*100;
  1888   000CE4  C087  F00E         	movff	_r,___lmul@multiplier
  1889   000CE8  C088  F00F         	movff	_r+1,___lmul@multiplier+1
  1890   000CEC  C089  F010         	movff	_r+2,___lmul@multiplier+2
  1891   000CF0  C08A  F011         	movff	_r+3,___lmul@multiplier+3
  1892   000CF4  0E64               	movlw	100
  1893   000CF6  6E12               	movwf	___lmul@multiplicand^0,c
  1894   000CF8  0E00               	movlw	0
  1895   000CFA  6E13               	movwf	(___lmul@multiplicand+1)^0,c
  1896   000CFC  0E00               	movlw	0
  1897   000CFE  6E14               	movwf	(___lmul@multiplicand+2)^0,c
  1898   000D00  0E00               	movlw	0
  1899   000D02  6E15               	movwf	(___lmul@multiplicand+3)^0,c
  1900   000D04  ECC3  F013         	call	___lmul	;wreg free
  1901   000D08  C00E  F08B         	movff	?___lmul,_partdecl
  1902   000D0C  C00F  F08C         	movff	?___lmul+1,_partdecl+1
  1903   000D10  C010  F08D         	movff	?___lmul+2,_partdecl+2
  1904   000D14  C011  F08E         	movff	?___lmul+3,_partdecl+3
  1905                           
  1906                           ;Lab4.c: 158: break;
  1907   000D18  D0B2               	goto	l4961
  1908   000D1A                     l4919:
  1909                           
  1910                           ; BSR set to: 0
  1911                           ;Lab4.c: 160: r = n1 - n2;
  1912   000D1A  5197               	movf	_n2& (0+255),w,b
  1913   000D1C  5D99               	subwf	_n1& (0+255),w,b
  1914   000D1E  6F7C               	movwf	??_main& (0+255),b
  1915   000D20  5198               	movf	(_n2+1)& (0+255),w,b
  1916   000D22  599A               	subwfb	(_n1+1)& (0+255),w,b
  1917   000D24  D7D8               	goto	L2
  1918   000D26                     l4923:
  1919                           
  1920                           ; BSR set to: 0
  1921                           ;Lab4.c: 164: r = n1*n2;
  1922   000D26  C099  F00E         	movff	_n1,___wmul@multiplier
  1923   000D2A  C09A  F00F         	movff	_n1+1,___wmul@multiplier+1
  1924   000D2E  C097  F010         	movff	_n2,___wmul@multiplicand
  1925   000D32  C098  F011         	movff	_n2+1,___wmul@multiplicand+1
  1926   000D36  EC5E  F015         	call	___wmul	;wreg free
  1927   000D3A  C00E  F087         	movff	?___wmul,_r
  1928   000D3E  C00F  F088         	movff	?___wmul+1,_r+1
  1929   000D42  0100               	movlb	0	; () banked
  1930   000D44  D7CD               	goto	L3
  1931   000D46                     l4927:
  1932                           
  1933                           ; BSR set to: 0
  1934                           ;Lab4.c: 168: if(n2!=0){
  1935   000D46  5197               	movf	_n2& (0+255),w,b
  1936   000D48  1198               	iorwf	(_n2+1)& (0+255),w,b
  1937   000D4A  B4D8               	btfsc	status,2,c
  1938   000D4C  D031               	goto	l4935
  1939                           
  1940                           ; BSR set to: 0
  1941                           ;Lab4.c: 169: if(n1!=0){
  1942   000D4E  5199               	movf	_n1& (0+255),w,b
  1943   000D50  119A               	iorwf	(_n1+1)& (0+255),w,b
  1944   000D52  B4D8               	btfsc	status,2,c
  1945   000D54  D094               	goto	l4961
  1946                           
  1947                           ; BSR set to: 0
  1948                           ;Lab4.c: 170: r = n1/n2;
  1949   000D56  C099  F014         	movff	_n1,___lwdiv@dividend
  1950   000D5A  C09A  F015         	movff	_n1+1,___lwdiv@dividend+1
  1951   000D5E  C097  F016         	movff	_n2,___lwdiv@divisor
  1952   000D62  C098  F017         	movff	_n2+1,___lwdiv@divisor+1
  1953   000D66  EC44  F014         	call	___lwdiv	;wreg free
  1954   000D6A  C014  F087         	movff	?___lwdiv,_r
  1955   000D6E  C015  F088         	movff	?___lwdiv+1,_r+1
  1956   000D72  0100               	movlb	0	; () banked
  1957   000D74  6B89               	clrf	(_r+2)& (0+255),b
  1958   000D76  6B8A               	clrf	(_r+3)& (0+255),b
  1959                           
  1960                           ; BSR set to: 0
  1961                           ;Lab4.c: 171: partdecl = (n1*100)/n2;
  1962   000D78  C099  F00E         	movff	_n1,___wmul@multiplier
  1963   000D7C  C09A  F00F         	movff	_n1+1,___wmul@multiplier+1
  1964   000D80  0E00               	movlw	0
  1965   000D82  6E11               	movwf	(___wmul@multiplicand+1)^0,c
  1966   000D84  0E64               	movlw	100
  1967   000D86  6E10               	movwf	___wmul@multiplicand^0,c
  1968   000D88  EC5E  F015         	call	___wmul	;wreg free
  1969   000D8C  C00E  F014         	movff	?___wmul,___lwdiv@dividend
  1970   000D90  C00F  F015         	movff	?___wmul+1,___lwdiv@dividend+1
  1971   000D94  C097  F016         	movff	_n2,___lwdiv@divisor
  1972   000D98  C098  F017         	movff	_n2+1,___lwdiv@divisor+1
  1973   000D9C  EC44  F014         	call	___lwdiv	;wreg free
  1974   000DA0  C014  F08B         	movff	?___lwdiv,_partdecl
  1975   000DA4  C015  F08C         	movff	?___lwdiv+1,_partdecl+1
  1976   000DA8  0100               	movlb	0	; () banked
  1977   000DAA  6B8D               	clrf	(_partdecl+2)& (0+255),b
  1978   000DAC  6B8E               	clrf	(_partdecl+3)& (0+255),b
  1979   000DAE  D067               	goto	l4961
  1980   000DB0                     l4935:
  1981                           
  1982                           ; BSR set to: 0
  1983                           ;Lab4.c: 174: if(n1 != 0 & n2 == 0) r = 1000;
  1984   000DB0  5199               	movf	_n1& (0+255),w,b
  1985   000DB2  119A               	iorwf	(_n1+1)& (0+255),w,b
  1986   000DB4  B4D8               	btfsc	status,2,c
  1987   000DB6  D006               	goto	l4941
  1988                           
  1989                           ; BSR set to: 0
  1990   000DB8  5197               	movf	_n2& (0+255),w,b
  1991   000DBA  1198               	iorwf	(_n2+1)& (0+255),w,b
  1992   000DBC  A4D8               	btfss	status,2,c
  1993   000DBE  D002               	goto	l4941
  1994                           
  1995                           ; BSR set to: 0
  1996   000DC0  0EE8               	movlw	232
  1997   000DC2  D009               	goto	L4
  1998   000DC4                     l4941:
  1999                           
  2000                           ; BSR set to: 0
  2001                           ;Lab4.c: 175: else if(n1 == 0 & n2 == 0) r = 1001;
  2002   000DC4  5199               	movf	_n1& (0+255),w,b
  2003   000DC6  119A               	iorwf	(_n1+1)& (0+255),w,b
  2004   000DC8  A4D8               	btfss	status,2,c
  2005   000DCA  D78C               	goto	l4917
  2006                           
  2007                           ; BSR set to: 0
  2008   000DCC  5197               	movf	_n2& (0+255),w,b
  2009   000DCE  1198               	iorwf	(_n2+1)& (0+255),w,b
  2010   000DD0  A4D8               	btfss	status,2,c
  2011   000DD2  D788               	goto	l4917
  2012                           
  2013                           ; BSR set to: 0
  2014   000DD4  0EE9               	movlw	233
  2015   000DD6                     L4:
  2016   000DD6  6F87               	movwf	_r& (0+255),b
  2017   000DD8  0E03               	movlw	3
  2018   000DDA  6F88               	movwf	(_r+1)& (0+255),b
  2019   000DDC  0E00               	movlw	0
  2020   000DDE  6F89               	movwf	(_r+2)& (0+255),b
  2021   000DE0  0E00               	movlw	0
  2022   000DE2  6F8A               	movwf	(_r+3)& (0+255),b
  2023   000DE4  D77F               	goto	l4917
  2024   000DE6                     l4949:
  2025                           
  2026                           ; BSR set to: 0
  2027                           ;Lab4.c: 180: r=pow(n1,n2);
  2028   000DE6  C097  F016         	movff	_n2,___lwtoft@c
  2029   000DEA  C098  F017         	movff	_n2+1,___lwtoft@c+1
  2030   000DEE  EC83  F015         	call	___lwtoft	;wreg free
  2031   000DF2  C016  F06E         	movff	?___lwtoft,pow@y
  2032   000DF6  C017  F06F         	movff	?___lwtoft+1,pow@y+1
  2033   000DFA  C018  F070         	movff	?___lwtoft+2,pow@y+2
  2034   000DFE  C099  F016         	movff	_n1,___lwtoft@c
  2035   000E02  C09A  F017         	movff	_n1+1,___lwtoft@c+1
  2036   000E06  EC83  F015         	call	___lwtoft	;wreg free
  2037   000E0A  C016  F06B         	movff	?___lwtoft,pow@x
  2038   000E0E  C017  F06C         	movff	?___lwtoft+1,pow@x+1
  2039   000E12  C018  F06D         	movff	?___lwtoft+2,pow@x+2
  2040   000E16  ECC6  F00C         	call	_pow	;wreg free
  2041   000E1A  C06B  F07E         	movff	?_pow,_main$896
  2042   000E1E  C06C  F07F         	movff	?_pow+1,_main$896+1
  2043   000E22  C06D  F080         	movff	?_pow+2,_main$896+2
  2044                           
  2045                           ; BSR set to: 0
  2046                           ;Lab4.c: 180: r=pow(n1,n2);
  2047   000E26  C07E  F019         	movff	_main$896,___fttol@f1
  2048   000E2A  C07F  F01A         	movff	_main$896+1,___fttol@f1+1
  2049   000E2E  C080  F01B         	movff	_main$896+2,___fttol@f1+2
  2050   000E32  EC67  F00F         	call	___fttol	;wreg free
  2051   000E36  C019  F087         	movff	?___fttol,_r
  2052   000E3A  C01A  F088         	movff	?___fttol+1,_r+1
  2053   000E3E  C01B  F089         	movff	?___fttol+2,_r+2
  2054   000E42  C01C  F08A         	movff	?___fttol+3,_r+3
  2055   000E46  D74E               	goto	l4917
  2056   000E48                     l4955:
  2057                           
  2058                           ; BSR set to: 0
  2059                           ;Lab4.c: 184: r = 0;
  2060   000E48  0E00               	movlw	0
  2061   000E4A  6F87               	movwf	_r& (0+255),b
  2062   000E4C  0E00               	movlw	0
  2063   000E4E  6F88               	movwf	(_r+1)& (0+255),b
  2064   000E50  0E00               	movlw	0
  2065   000E52  6F89               	movwf	(_r+2)& (0+255),b
  2066   000E54  0E00               	movlw	0
  2067   000E56  6F8A               	movwf	(_r+3)& (0+255),b
  2068                           
  2069                           ;Lab4.c: 185: break;
  2070   000E58  D012               	goto	l4961
  2071   000E5A                     l4959:
  2072   000E5A  0100               	movlb	0	; () banked
  2073   000E5C  51A0               	movf	_op& (0+255),w,b
  2074                           
  2075                           ; Switch size 1, requested type "simple"
  2076                           ; Number of cases is 5, Range of values is 43 to 120
  2077                           ; switch strategies available:
  2078                           ; Name         Instructions Cycles
  2079                           ; simple_byte           16     9 (average)
  2080                           ;	Chosen strategy is simple_byte
  2081   000E5E  0A2B               	xorlw	43	; case 43
  2082   000E60  B4D8               	btfsc	status,2,c
  2083   000E62  D734               	goto	l4915
  2084   000E64  0A06               	xorlw	6	; case 45
  2085   000E66  B4D8               	btfsc	status,2,c
  2086   000E68  D758               	goto	l4919
  2087   000E6A  0A02               	xorlw	2	; case 47
  2088   000E6C  B4D8               	btfsc	status,2,c
  2089   000E6E  D76B               	goto	l4927
  2090   000E70  0A71               	xorlw	113	; case 94
  2091   000E72  B4D8               	btfsc	status,2,c
  2092   000E74  D7B8               	goto	l4949
  2093   000E76  0A26               	xorlw	38	; case 120
  2094   000E78  B4D8               	btfsc	status,2,c
  2095   000E7A  D755               	goto	l4923
  2096   000E7C  D7E5               	goto	l4955
  2097   000E7E                     l4961:
  2098                           
  2099                           ;Lab4.c: 187: DireccionaLCD(0x84);
  2100   000E7E  0E84               	movlw	132
  2101   000E80  ECAC  F015         	call	_DireccionaLCD
  2102   000E84                     l4963:
  2103                           
  2104                           ;Lab4.c: 188: Imprimir_Resultado(r);
  2105   000E84  C087  F033         	movff	_r,Imprimir_Resultado@r
  2106   000E88  C088  F034         	movff	_r+1,Imprimir_Resultado@r+1
  2107   000E8C  C089  F035         	movff	_r+2,Imprimir_Resultado@r+2
  2108   000E90  C08A  F036         	movff	_r+3,Imprimir_Resultado@r+3
  2109   000E94  ECDF  F009         	call	_Imprimir_Resultado	;wreg free
  2110                           
  2111                           ;Lab4.c: 189: }else if((Tecla=='=' & op=='!' & n1c != ' ') & factorial) {
  2112   000E98  D04A               	goto	l4989
  2113   000E9A                     l4965:
  2114                           
  2115                           ; BSR set to: 0
  2116   000E9A  0E00               	movlw	0
  2117   000E9C  6F82               	movwf	_main$159& (0+255),b
  2118                           
  2119                           ; BSR set to: 0
  2120   000E9E  0E3D               	movlw	61
  2121   000EA0  199D               	xorwf	_Tecla& (0+255),w,b
  2122   000EA2  A4D8               	btfss	status,2,c
  2123   000EA4  D00A               	goto	l4975
  2124                           
  2125                           ; BSR set to: 0
  2126   000EA6  0E21               	movlw	33
  2127   000EA8  19A0               	xorwf	_op& (0+255),w,b
  2128   000EAA  A4D8               	btfss	status,2,c
  2129   000EAC  D006               	goto	l4975
  2130                           
  2131                           ; BSR set to: 0
  2132   000EAE  0E20               	movlw	32
  2133   000EB0  199F               	xorwf	_n1c& (0+255),w,b
  2134   000EB2  B4D8               	btfsc	status,2,c
  2135   000EB4  D002               	goto	l4975
  2136                           
  2137                           ; BSR set to: 0
  2138   000EB6  0E01               	movlw	1
  2139   000EB8  6F82               	movwf	_main$159& (0+255),b
  2140   000EBA                     l4975:
  2141                           
  2142                           ; BSR set to: 0
  2143   000EBA  5182               	movf	_main$159& (0+255),w,b
  2144   000EBC  159B               	andwf	_factorial& (0+255),w,b
  2145   000EBE  0900               	iorlw	0
  2146   000EC0  B4D8               	btfsc	status,2,c
  2147   000EC2  D032               	goto	l4987
  2148                           
  2149                           ; BSR set to: 0
  2150                           ;Lab4.c: 190: DireccionaLCD(0x82);
  2151   000EC4  0E82               	movlw	130
  2152   000EC6  ECAC  F015         	call	_DireccionaLCD
  2153                           
  2154                           ;Lab4.c: 191: EscribeLCD_c('=');
  2155   000ECA  0E3D               	movlw	61
  2156   000ECC  ECA1  F015         	call	_EscribeLCD_c
  2157                           
  2158                           ;Lab4.c: 192: r=factorial_function(n1);
  2159   000ED0  C099  F014         	movff	_n1,factorial_function@a
  2160   000ED4  C09A  F015         	movff	_n1+1,factorial_function@a+1
  2161   000ED8  EC6C  F013         	call	_factorial_function	;wreg free
  2162   000EDC  C014  F087         	movff	?_factorial_function,_r
  2163   000EE0  C015  F088         	movff	?_factorial_function+1,_r+1
  2164   000EE4  C016  F089         	movff	?_factorial_function+2,_r+2
  2165   000EE8  C017  F08A         	movff	?_factorial_function+3,_r+3
  2166                           
  2167                           ;Lab4.c: 193: partdecl = r*100;
  2168   000EEC  C087  F00E         	movff	_r,___lmul@multiplier
  2169   000EF0  C088  F00F         	movff	_r+1,___lmul@multiplier+1
  2170   000EF4  C089  F010         	movff	_r+2,___lmul@multiplier+2
  2171   000EF8  C08A  F011         	movff	_r+3,___lmul@multiplier+3
  2172   000EFC  0E64               	movlw	100
  2173   000EFE  6E12               	movwf	___lmul@multiplicand^0,c
  2174   000F00  0E00               	movlw	0
  2175   000F02  6E13               	movwf	(___lmul@multiplicand+1)^0,c
  2176   000F04  0E00               	movlw	0
  2177   000F06  6E14               	movwf	(___lmul@multiplicand+2)^0,c
  2178   000F08  0E00               	movlw	0
  2179   000F0A  6E15               	movwf	(___lmul@multiplicand+3)^0,c
  2180   000F0C  ECC3  F013         	call	___lmul	;wreg free
  2181   000F10  C00E  F08B         	movff	?___lmul,_partdecl
  2182   000F14  C00F  F08C         	movff	?___lmul+1,_partdecl+1
  2183   000F18  C010  F08D         	movff	?___lmul+2,_partdecl+2
  2184   000F1C  C011  F08E         	movff	?___lmul+3,_partdecl+3
  2185                           
  2186                           ;Lab4.c: 194: DireccionaLCD(0x83);
  2187   000F20  0E83               	movlw	131
  2188   000F22  ECAC  F015         	call	_DireccionaLCD
  2189   000F26  D7AE               	goto	l4963
  2190   000F28                     l4987:
  2191                           
  2192                           ; BSR set to: 0
  2193                           ;Lab4.c: 197: EscribeLCD_c('W');
  2194   000F28  0E57               	movlw	87
  2195   000F2A  ECA1  F015         	call	_EscribeLCD_c
  2196   000F2E                     l4989:
  2197                           
  2198                           ;Lab4.c: 198: };Lab4.c: 199: _delay((unsigned long)((700)*(1000000/4000.0)));
  2199   000F2E  0EE4               	movlw	228
  2200   000F30  0100               	movlb	0	; () banked
  2201   000F32  6F7C               	movwf	??_main& (0+255),b
  2202   000F34  0E44               	movlw	68
  2203   000F36                     u6567:
  2204   000F36  2EE8               	decfsz	wreg,f,c
  2205   000F38  D7FE               	bra	u6567
  2206   000F3A  2F7C               	decfsz	??_main& (0+255),f,b
  2207   000F3C  D7FC               	bra	u6567
  2208   000F3E  F000               	nop	
  2209   000F40  D4F8               	goto	l4671
  2210   000F42                     __end_of_main:
  2211                           	callstack 0
  2212                           
  2213 ;; *************** function _pow *****************
  2214 ;; Defined at:
  2215 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\pow.c"
  2216 ;; Parameters:    Size  Location     Type
  2217 ;;  x               3   11[BANK0 ] void 
  2218 ;;  y               3   14[BANK0 ] void 
  2219 ;; Auto vars:     Size  Location     Type
  2220 ;;  yi              4   24[BANK0 ] unsigned long 
  2221 ;;  sign            1   23[BANK0 ] unsigned char 
  2222 ;; Return value:  Size  Location     Type
  2223 ;;                  3   11[BANK0 ] unsigned char 
  2224 ;; Registers used:
  2225 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2226 ;; Tracked objects:
  2227 ;;		On entry : 0/0
  2228 ;;		On exit  : 3F/0
  2229 ;;		Unchanged: 0/0
  2230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2231 ;;      Params:         0       6       0       0       0       0       0       0       0
  2232 ;;      Locals:         0      11       0       0       0       0       0       0       0
  2233 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2234 ;;      Totals:         0      17       0       0       0       0       0       0       0
  2235 ;;Total ram usage:       17 bytes
  2236 ;; Hardware stack levels used: 1
  2237 ;; Hardware stack levels required when called: 9
  2238 ;; This function calls:
  2239 ;;		___ftge
  2240 ;;		___ftmul
  2241 ;;		___ftneg
  2242 ;;		___fttol
  2243 ;;		___lltoft
  2244 ;;		_exp
  2245 ;;		_log
  2246 ;; This function is called by:
  2247 ;;		_main
  2248 ;; This function uses a non-reentrant model
  2249 ;;
  2250                           
  2251                           	psect	text1
  2252   00198C                     __ptext1:
  2253                           	callstack 0
  2254   00198C                     _pow:
  2255                           	callstack 21
  2256                           
  2257                           ;incstack = 0
  2258   00198C  0E00               	movlw	0
  2259   00198E  0100               	movlb	0	; () banked
  2260   001990  6F77               	movwf	pow@sign& (0+255),b
  2261                           
  2262                           ; BSR set to: 0
  2263   001992  516B               	movf	pow@x& (0+255),w,b
  2264   001994  116C               	iorwf	(pow@x+1)& (0+255),w,b
  2265   001996  116D               	iorwf	(pow@x+2)& (0+255),w,b
  2266   001998  A4D8               	btfss	status,2,c
  2267   00199A  D01D               	goto	l4603
  2268                           
  2269                           ; BSR set to: 0
  2270   00199C  0E00               	movlw	0
  2271   00199E  6E0E               	movwf	___ftge@ff1^0,c
  2272   0019A0  0E00               	movlw	0
  2273   0019A2  6E0F               	movwf	(___ftge@ff1+1)^0,c
  2274   0019A4  0E00               	movlw	0
  2275   0019A6  6E10               	movwf	(___ftge@ff1+2)^0,c
  2276   0019A8  C06E  F011         	movff	pow@y,___ftge@ff2
  2277   0019AC  C06F  F012         	movff	pow@y+1,___ftge@ff2+1
  2278   0019B0  C070  F013         	movff	pow@y+2,___ftge@ff2+2
  2279   0019B4  ECD1  F012         	call	___ftge	;wreg free
  2280   0019B8  A0D8               	btfss	status,0,c
  2281   0019BA  D005               	goto	l1014
  2282   0019BC  0E00               	movlw	0
  2283   0019BE  0100               	movlb	0	; () banked
  2284   0019C0  6F90               	movwf	(_errno+1)& (0+255),b
  2285   0019C2  0E21               	movlw	33
  2286   0019C4  6F8F               	movwf	_errno& (0+255),b
  2287   0019C6                     l1014:
  2288   0019C6  0E00               	movlw	0
  2289   0019C8  0100               	movlb	0	; () banked
  2290   0019CA  6F6B               	movwf	?_pow& (0+255),b
  2291   0019CC  0E00               	movlw	0
  2292   0019CE  6F6C               	movwf	(?_pow+1)& (0+255),b
  2293   0019D0  0E00               	movlw	0
  2294   0019D2  6F6D               	movwf	(?_pow+2)& (0+255),b
  2295   0019D4  0012               	return	
  2296   0019D6                     l4603:
  2297                           
  2298                           ; BSR set to: 0
  2299   0019D6  516E               	movf	pow@y& (0+255),w,b
  2300   0019D8  116F               	iorwf	(pow@y+1)& (0+255),w,b
  2301   0019DA  1170               	iorwf	(pow@y+2)& (0+255),w,b
  2302   0019DC  A4D8               	btfss	status,2,c
  2303   0019DE  D007               	goto	l4609
  2304                           
  2305                           ; BSR set to: 0
  2306   0019E0  0E00               	movlw	0
  2307   0019E2  6F6B               	movwf	?_pow& (0+255),b
  2308   0019E4  0E80               	movlw	128
  2309   0019E6  6F6C               	movwf	(?_pow+1)& (0+255),b
  2310   0019E8  0E3F               	movlw	63
  2311   0019EA  6F6D               	movwf	(?_pow+2)& (0+255),b
  2312   0019EC  0012               	return	
  2313   0019EE                     l4609:
  2314                           
  2315                           ; BSR set to: 0
  2316   0019EE  AF6D               	btfss	(pow@x+2)& (0+255),7,b
  2317   0019F0  D041               	goto	l4621
  2318                           
  2319                           ; BSR set to: 0
  2320   0019F2  C06E  F019         	movff	pow@y,___fttol@f1
  2321   0019F6  C06F  F01A         	movff	pow@y+1,___fttol@f1+1
  2322   0019FA  C070  F01B         	movff	pow@y+2,___fttol@f1+2
  2323   0019FE  EC67  F00F         	call	___fttol	;wreg free
  2324   001A02  C019  F078         	movff	?___fttol,pow@yi
  2325   001A06  C01A  F079         	movff	?___fttol+1,pow@yi+1
  2326   001A0A  C01B  F07A         	movff	?___fttol+2,pow@yi+2
  2327   001A0E  C01C  F07B         	movff	?___fttol+3,pow@yi+3
  2328   001A12  C078  F016         	movff	pow@yi,___lltoft@c
  2329   001A16  C079  F017         	movff	pow@yi+1,___lltoft@c+1
  2330   001A1A  C07A  F018         	movff	pow@yi+2,___lltoft@c+2
  2331   001A1E  C07B  F019         	movff	pow@yi+3,___lltoft@c+3
  2332   001A22  EC3E  F013         	call	___lltoft	;wreg free
  2333   001A26  0100               	movlb	0	; () banked
  2334   001A28  516E               	movf	pow@y& (0+255),w,b
  2335   001A2A  1816               	xorwf	?___lltoft^0,w,c
  2336   001A2C  E107               	bnz	u5700
  2337   001A2E  516F               	movf	(pow@y+1)& (0+255),w,b
  2338   001A30  1817               	xorwf	(?___lltoft+1)^0,w,c
  2339   001A32  E104               	bnz	u5700
  2340   001A34  5170               	movf	(pow@y+2)& (0+255),w,b
  2341   001A36  1818               	xorwf	(?___lltoft+2)^0,w,c
  2342   001A38  B4D8               	btfsc	status,2,c
  2343   001A3A  D00B               	goto	l4617
  2344   001A3C                     u5700:
  2345                           
  2346                           ; BSR set to: 0
  2347   001A3C  0E00               	movlw	0
  2348   001A3E  6F90               	movwf	(_errno+1)& (0+255),b
  2349   001A40  0E21               	movlw	33
  2350   001A42  6F8F               	movwf	_errno& (0+255),b
  2351   001A44  0E00               	movlw	0
  2352   001A46  6F6B               	movwf	?_pow& (0+255),b
  2353   001A48  0E00               	movlw	0
  2354   001A4A  6F6C               	movwf	(?_pow+1)& (0+255),b
  2355   001A4C  0E00               	movlw	0
  2356   001A4E  6F6D               	movwf	(?_pow+2)& (0+255),b
  2357   001A50  0012               	return	
  2358   001A52                     l4617:
  2359                           
  2360                           ; BSR set to: 0
  2361   001A52  5178               	movf	pow@yi& (0+255),w,b
  2362   001A54  0B01               	andlw	1
  2363   001A56  6F77               	movwf	pow@sign& (0+255),b
  2364                           
  2365                           ; BSR set to: 0
  2366   001A58  C06B  F00E         	movff	pow@x,___ftneg@f1
  2367   001A5C  C06C  F00F         	movff	pow@x+1,___ftneg@f1+1
  2368   001A60  C06D  F010         	movff	pow@x+2,___ftneg@f1+2
  2369   001A64  EC71  F015         	call	___ftneg	;wreg free
  2370   001A68  C00E  F06B         	movff	?___ftneg,pow@x
  2371   001A6C  C00F  F06C         	movff	?___ftneg+1,pow@x+1
  2372   001A70  C010  F06D         	movff	?___ftneg+2,pow@x+2
  2373   001A74                     l4621:
  2374                           
  2375                           ; BSR set to: 0
  2376   001A74  C06B  F03F         	movff	pow@x,log@x
  2377   001A78  C06C  F040         	movff	pow@x+1,log@x+1
  2378   001A7C  C06D  F041         	movff	pow@x+2,log@x+2
  2379   001A80  EC84  F00D         	call	_log	;wreg free
  2380   001A84  C03F  F071         	movff	?_log,_pow$897
  2381   001A88  C040  F072         	movff	?_log+1,_pow$897+1
  2382   001A8C  C041  F073         	movff	?_log+2,_pow$897+2
  2383   001A90  C071  F01A         	movff	_pow$897,___ftmul@f1
  2384   001A94  C072  F01B         	movff	_pow$897+1,___ftmul@f1+1
  2385   001A98  C073  F01C         	movff	_pow$897+2,___ftmul@f1+2
  2386   001A9C  C06E  F01D         	movff	pow@y,___ftmul@f2
  2387   001AA0  C06F  F01E         	movff	pow@y+1,___ftmul@f2+1
  2388   001AA4  C070  F01F         	movff	pow@y+2,___ftmul@f2+2
  2389   001AA8  EC0D  F00E         	call	___ftmul	;wreg free
  2390   001AAC  C01A  F074         	movff	?___ftmul,_pow$898
  2391   001AB0  C01B  F075         	movff	?___ftmul+1,_pow$898+1
  2392   001AB4  C01C  F076         	movff	?___ftmul+2,_pow$898+2
  2393   001AB8  C074  F062         	movff	_pow$898,exp@x
  2394   001ABC  C075  F063         	movff	_pow$898+1,exp@x+1
  2395   001AC0  C076  F064         	movff	_pow$898+2,exp@x+2
  2396   001AC4  ECFD  F00A         	call	_exp	;wreg free
  2397   001AC8  C062  F06B         	movff	?_exp,pow@x
  2398   001ACC  C063  F06C         	movff	?_exp+1,pow@x+1
  2399   001AD0  C064  F06D         	movff	?_exp+2,pow@x+2
  2400   001AD4  0100               	movlb	0	; () banked
  2401   001AD6  5177               	movf	pow@sign& (0+255),w,b
  2402   001AD8  B4D8               	btfsc	status,2,c
  2403   001ADA  D00F               	goto	l1019
  2404                           
  2405                           ; BSR set to: 0
  2406   001ADC  C06B  F00E         	movff	pow@x,___ftneg@f1
  2407   001AE0  C06C  F00F         	movff	pow@x+1,___ftneg@f1+1
  2408   001AE4  C06D  F010         	movff	pow@x+2,___ftneg@f1+2
  2409   001AE8  EC71  F015         	call	___ftneg	;wreg free
  2410   001AEC  C00E  F06B         	movff	?___ftneg,?_pow
  2411   001AF0  C00F  F06C         	movff	?___ftneg+1,?_pow+1
  2412   001AF4  C010  F06D         	movff	?___ftneg+2,?_pow+2
  2413   001AF8  0012               	return	
  2414   001AFA                     l1019:
  2415                           
  2416                           ; BSR set to: 0
  2417   001AFA  C06B  F06B         	movff	pow@x,?_pow
  2418   001AFE  C06C  F06C         	movff	pow@x+1,?_pow+1
  2419   001B02  C06D  F06D         	movff	pow@x+2,?_pow+2
  2420                           
  2421                           ; BSR set to: 0
  2422   001B06  0012               	return		;funcret
  2423   001B08                     __end_of_pow:
  2424                           	callstack 0
  2425                           
  2426 ;; *************** function _log *****************
  2427 ;; Defined at:
  2428 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\log.c"
  2429 ;; Parameters:    Size  Location     Type
  2430 ;;  x               3   62[COMRAM] unsigned char 
  2431 ;; Auto vars:     Size  Location     Type
  2432 ;;  exponent        2   65[COMRAM] int 
  2433 ;; Return value:  Size  Location     Type
  2434 ;;                  3   62[COMRAM] int 
  2435 ;; Registers used:
  2436 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2437 ;; Tracked objects:
  2438 ;;		On entry : 3F/0
  2439 ;;		On exit  : 0/0
  2440 ;;		Unchanged: 0/0
  2441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2442 ;;      Params:         3       0       0       0       0       0       0       0       0
  2443 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2444 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2445 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2446 ;;Total ram usage:        5 bytes
  2447 ;; Hardware stack levels used: 1
  2448 ;; Hardware stack levels required when called: 8
  2449 ;; This function calls:
  2450 ;;		___awtoft
  2451 ;;		___ftadd
  2452 ;;		___ftmul
  2453 ;;		_eval_poly
  2454 ;;		_frexp
  2455 ;; This function is called by:
  2456 ;;		_pow
  2457 ;; This function uses a non-reentrant model
  2458 ;;
  2459                           
  2460                           	psect	text2
  2461   001B08                     __ptext2:
  2462                           	callstack 0
  2463   001B08                     _log:
  2464                           	callstack 21
  2465                           
  2466                           ; BSR set to: 0
  2467                           
  2468                           ; BSR set to: 0
  2469                           ;incstack = 0
  2470   001B08  AE41               	btfss	(log@x+2)^0,7,c
  2471   001B0A  D00B               	goto	l4533
  2472                           
  2473                           ; BSR set to: 0
  2474   001B0C  0E00               	movlw	0
  2475   001B0E  6F90               	movwf	(_errno+1)& (0+255),b
  2476   001B10  0E21               	movlw	33
  2477   001B12  6F8F               	movwf	_errno& (0+255),b
  2478   001B14  0E00               	movlw	0
  2479   001B16  6E3F               	movwf	?_log^0,c
  2480   001B18  0E00               	movlw	0
  2481   001B1A  6E40               	movwf	(?_log+1)^0,c
  2482   001B1C  0E00               	movlw	0
  2483   001B1E  6E41               	movwf	(?_log+2)^0,c
  2484   001B20  0012               	return	
  2485   001B22                     l4533:
  2486                           
  2487                           ; BSR set to: 0
  2488   001B22  503F               	movf	log@x^0,w,c
  2489   001B24  1040               	iorwf	(log@x+1)^0,w,c
  2490   001B26  1041               	iorwf	(log@x+2)^0,w,c
  2491   001B28  A4D8               	btfss	status,2,c
  2492   001B2A  D00B               	goto	l4539
  2493                           
  2494                           ; BSR set to: 0
  2495   001B2C  0E00               	movlw	0
  2496   001B2E  6F90               	movwf	(_errno+1)& (0+255),b
  2497   001B30  0E22               	movlw	34
  2498   001B32  6F8F               	movwf	_errno& (0+255),b
  2499   001B34  0E00               	movlw	0
  2500   001B36  6E3F               	movwf	?_log^0,c
  2501   001B38  0E00               	movlw	0
  2502   001B3A  6E40               	movwf	(?_log+1)^0,c
  2503   001B3C  0E00               	movlw	0
  2504   001B3E  6E41               	movwf	(?_log+2)^0,c
  2505   001B40  0012               	return	
  2506   001B42                     l4539:
  2507                           
  2508                           ; BSR set to: 0
  2509   001B42  0E00               	movlw	0
  2510   001B44  6E1D               	movwf	___ftmul@f2^0,c
  2511   001B46  0E00               	movlw	0
  2512   001B48  6E1E               	movwf	(___ftmul@f2+1)^0,c
  2513   001B4A  0E40               	movlw	64
  2514   001B4C  6E1F               	movwf	(___ftmul@f2+2)^0,c
  2515   001B4E  0E42               	movlw	low log@exponent
  2516   001B50  6E11               	movwf	frexp@eptr^0,c
  2517   001B52  C03F  F00E         	movff	log@x,frexp@value
  2518   001B56  C040  F00F         	movff	log@x+1,frexp@value+1
  2519   001B5A  C041  F010         	movff	log@x+2,frexp@value+2
  2520   001B5E  ECD6  F011         	call	_frexp	;wreg free
  2521   001B62  C00E  F01A         	movff	?_frexp,___ftmul@f1
  2522   001B66  C00F  F01B         	movff	?_frexp+1,___ftmul@f1+1
  2523   001B6A  C010  F01C         	movff	?_frexp+2,___ftmul@f1+2
  2524   001B6E  EC0D  F00E         	call	___ftmul	;wreg free
  2525   001B72  C01A  F029         	movff	?___ftmul,___ftadd@f1
  2526   001B76  C01B  F02A         	movff	?___ftmul+1,___ftadd@f1+1
  2527   001B7A  C01C  F02B         	movff	?___ftmul+2,___ftadd@f1+2
  2528   001B7E  0E00               	movlw	0
  2529   001B80  6E2C               	movwf	___ftadd@f2^0,c
  2530   001B82  0E80               	movlw	128
  2531   001B84  6E2D               	movwf	(___ftadd@f2+1)^0,c
  2532   001B86  0EBF               	movlw	191
  2533   001B88  6E2E               	movwf	(___ftadd@f2+2)^0,c
  2534   001B8A  ECF2  F00B         	call	___ftadd	;wreg free
  2535   001B8E  C029  F03F         	movff	?___ftadd,log@x
  2536   001B92  C02A  F040         	movff	?___ftadd+1,log@x+1
  2537   001B96  C02B  F041         	movff	?___ftadd+2,log@x+2
  2538   001B9A  0642               	decf	log@exponent^0,f,c
  2539   001B9C  A0D8               	btfss	status,0,c
  2540   001B9E  0643               	decf	(log@exponent+1)^0,f,c
  2541   001BA0  C03F  F035         	movff	log@x,eval_poly@x
  2542   001BA4  C040  F036         	movff	log@x+1,eval_poly@x+1
  2543   001BA8  C041  F037         	movff	log@x+2,eval_poly@x+2
  2544   001BAC  0E1F               	movlw	low log@coeff
  2545   001BAE  6E38               	movwf	eval_poly@d^0,c
  2546   001BB0  0E00               	movlw	0
  2547   001BB2  6E3A               	movwf	(eval_poly@n+1)^0,c
  2548   001BB4  0E08               	movlw	8
  2549   001BB6  6E39               	movwf	eval_poly@n^0,c
  2550   001BB8  ECF3  F010         	call	_eval_poly	;wreg free
  2551   001BBC  C035  F03F         	movff	?_eval_poly,log@x
  2552   001BC0  C036  F040         	movff	?_eval_poly+1,log@x+1
  2553   001BC4  C037  F041         	movff	?_eval_poly+2,log@x+2
  2554   001BC8  0E72               	movlw	114
  2555   001BCA  6E1D               	movwf	___ftmul@f2^0,c
  2556   001BCC  0E31               	movlw	49
  2557   001BCE  6E1E               	movwf	(___ftmul@f2+1)^0,c
  2558   001BD0  0E3F               	movlw	63
  2559   001BD2  6E1F               	movwf	(___ftmul@f2+2)^0,c
  2560   001BD4  C042  F016         	movff	log@exponent,___awtoft@c
  2561   001BD8  C043  F017         	movff	log@exponent+1,___awtoft@c+1
  2562   001BDC  EC42  F015         	call	___awtoft	;wreg free
  2563   001BE0  C016  F01A         	movff	?___awtoft,___ftmul@f1
  2564   001BE4  C017  F01B         	movff	?___awtoft+1,___ftmul@f1+1
  2565   001BE8  C018  F01C         	movff	?___awtoft+2,___ftmul@f1+2
  2566   001BEC  EC0D  F00E         	call	___ftmul	;wreg free
  2567   001BF0  C01A  F029         	movff	?___ftmul,___ftadd@f1
  2568   001BF4  C01B  F02A         	movff	?___ftmul+1,___ftadd@f1+1
  2569   001BF8  C01C  F02B         	movff	?___ftmul+2,___ftadd@f1+2
  2570   001BFC  C03F  F02C         	movff	log@x,___ftadd@f2
  2571   001C00  C040  F02D         	movff	log@x+1,___ftadd@f2+1
  2572   001C04  C041  F02E         	movff	log@x+2,___ftadd@f2+2
  2573   001C08  ECF2  F00B         	call	___ftadd	;wreg free
  2574   001C0C  C029  F03F         	movff	?___ftadd,?_log
  2575   001C10  C02A  F040         	movff	?___ftadd+1,?_log+1
  2576   001C14  C02B  F041         	movff	?___ftadd+2,?_log+2
  2577   001C18  0012               	return		;funcret
  2578   001C1A                     __end_of_log:
  2579                           	callstack 0
  2580                           
  2581 ;; *************** function _exp *****************
  2582 ;; Defined at:
  2583 ;;		line 12 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\exp.c"
  2584 ;; Parameters:    Size  Location     Type
  2585 ;;  x               3    2[BANK0 ] int 
  2586 ;; Auto vars:     Size  Location     Type
  2587 ;;  exponent        2    8[BANK0 ] int 
  2588 ;;  sign            1   10[BANK0 ] unsigned char 
  2589 ;; Return value:  Size  Location     Type
  2590 ;;                  3    2[BANK0 ] unsigned char 
  2591 ;; Registers used:
  2592 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2593 ;; Tracked objects:
  2594 ;;		On entry : 0/0
  2595 ;;		On exit  : 0/0
  2596 ;;		Unchanged: 0/0
  2597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2598 ;;      Params:         0       3       0       0       0       0       0       0       0
  2599 ;;      Locals:         0       6       0       0       0       0       0       0       0
  2600 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2601 ;;      Totals:         0       9       0       0       0       0       0       0       0
  2602 ;;Total ram usage:        9 bytes
  2603 ;; Hardware stack levels used: 1
  2604 ;; Hardware stack levels required when called: 8
  2605 ;; This function calls:
  2606 ;;		___awtoft
  2607 ;;		___ftdiv
  2608 ;;		___ftge
  2609 ;;		___ftmul
  2610 ;;		___ftneg
  2611 ;;		___ftsub
  2612 ;;		___fttol
  2613 ;;		_eval_poly
  2614 ;;		_floor
  2615 ;;		_ldexp
  2616 ;; This function is called by:
  2617 ;;		_pow
  2618 ;; This function uses a non-reentrant model
  2619 ;;
  2620                           
  2621                           	psect	text3
  2622   0015FA                     __ptext3:
  2623                           	callstack 0
  2624   0015FA                     _exp:
  2625                           	callstack 21
  2626                           
  2627                           ;incstack = 0
  2628   0015FA  0100               	movlb	0	; () banked
  2629   0015FC  5162               	movf	exp@x& (0+255),w,b
  2630   0015FE  1163               	iorwf	(exp@x+1)& (0+255),w,b
  2631   001600  1164               	iorwf	(exp@x+2)& (0+255),w,b
  2632   001602  A4D8               	btfss	status,2,c
  2633   001604  D007               	goto	l4555
  2634                           
  2635                           ; BSR set to: 0
  2636   001606  0E00               	movlw	0
  2637   001608  6F62               	movwf	?_exp& (0+255),b
  2638   00160A  0E80               	movlw	128
  2639   00160C  6F63               	movwf	(?_exp+1)& (0+255),b
  2640   00160E  0E3F               	movlw	63
  2641   001610  6F64               	movwf	(?_exp+2)& (0+255),b
  2642   001612  0012               	return	
  2643   001614                     l4555:
  2644                           
  2645                           ; BSR set to: 0
  2646   001614  0E72               	movlw	114
  2647   001616  6E0E               	movwf	___ftge@ff1^0,c
  2648   001618  0E31               	movlw	49
  2649   00161A  6E0F               	movwf	(___ftge@ff1+1)^0,c
  2650   00161C  0E44               	movlw	68
  2651   00161E  6E10               	movwf	(___ftge@ff1+2)^0,c
  2652   001620  C062  F011         	movff	exp@x,___ftge@ff2
  2653   001624  C063  F012         	movff	exp@x+1,___ftge@ff2+1
  2654   001628  C064  F013         	movff	exp@x+2,___ftge@ff2+2
  2655   00162C  ECD1  F012         	call	___ftge	;wreg free
  2656   001630  B0D8               	btfsc	status,0,c
  2657   001632  D00C               	goto	l4561
  2658   001634  0E00               	movlw	0
  2659   001636  0100               	movlb	0	; () banked
  2660   001638  6F90               	movwf	(_errno+1)& (0+255),b
  2661   00163A  0E22               	movlw	34
  2662   00163C  6F8F               	movwf	_errno& (0+255),b
  2663   00163E  0EFF               	movlw	255
  2664   001640  6F62               	movwf	?_exp& (0+255),b
  2665   001642  0E7F               	movlw	127
  2666   001644  6F63               	movwf	(?_exp+1)& (0+255),b
  2667   001646  0E7F               	movlw	127
  2668   001648  6F64               	movwf	(?_exp+2)& (0+255),b
  2669   00164A  0012               	return	
  2670   00164C                     l4561:
  2671   00164C  C062  F00E         	movff	exp@x,___ftge@ff1
  2672   001650  C063  F00F         	movff	exp@x+1,___ftge@ff1+1
  2673   001654  C064  F010         	movff	exp@x+2,___ftge@ff1+2
  2674   001658  0E49               	movlw	73
  2675   00165A  6E11               	movwf	___ftge@ff2^0,c
  2676   00165C  0E3A               	movlw	58
  2677   00165E  6E12               	movwf	(___ftge@ff2+1)^0,c
  2678   001660  0EC4               	movlw	196
  2679   001662  6E13               	movwf	(___ftge@ff2+2)^0,c
  2680   001664  ECD1  F012         	call	___ftge	;wreg free
  2681   001668  B0D8               	btfsc	status,0,c
  2682   00166A  D00C               	goto	l4567
  2683   00166C  0E00               	movlw	0
  2684   00166E  0100               	movlb	0	; () banked
  2685   001670  6F90               	movwf	(_errno+1)& (0+255),b
  2686   001672  0E22               	movlw	34
  2687   001674  6F8F               	movwf	_errno& (0+255),b
  2688   001676  0E00               	movlw	0
  2689   001678  6F62               	movwf	?_exp& (0+255),b
  2690   00167A  0E00               	movlw	0
  2691   00167C  6F63               	movwf	(?_exp+1)& (0+255),b
  2692   00167E  0E00               	movlw	0
  2693   001680  6F64               	movwf	(?_exp+2)& (0+255),b
  2694   001682  0012               	return	
  2695   001684                     l4567:
  2696   001684  0100               	movlb	0	; () banked
  2697   001686  AF64               	btfss	(exp@x+2)& (0+255),7,b
  2698   001688  D002               	goto	u5610
  2699   00168A  0E01               	movlw	1
  2700   00168C  D001               	goto	u5620
  2701   00168E                     u5610:
  2702   00168E  0E00               	movlw	0
  2703   001690                     u5620:
  2704   001690  6F6A               	movwf	exp@sign& (0+255),b
  2705                           
  2706                           ; BSR set to: 0
  2707   001692  516A               	movf	exp@sign& (0+255),w,b
  2708   001694  B4D8               	btfsc	status,2,c
  2709   001696  D00E               	goto	l1038
  2710                           
  2711                           ; BSR set to: 0
  2712   001698  C062  F00E         	movff	exp@x,___ftneg@f1
  2713   00169C  C063  F00F         	movff	exp@x+1,___ftneg@f1+1
  2714   0016A0  C064  F010         	movff	exp@x+2,___ftneg@f1+2
  2715   0016A4  EC71  F015         	call	___ftneg	;wreg free
  2716   0016A8  C00E  F062         	movff	?___ftneg,exp@x
  2717   0016AC  C00F  F063         	movff	?___ftneg+1,exp@x+1
  2718   0016B0  C010  F064         	movff	?___ftneg+2,exp@x+2
  2719   0016B4                     l1038:
  2720                           
  2721                           ; BSR set to: 0
  2722   0016B4  C062  F01A         	movff	exp@x,___ftmul@f1
  2723   0016B8  C063  F01B         	movff	exp@x+1,___ftmul@f1+1
  2724   0016BC  C064  F01C         	movff	exp@x+2,___ftmul@f1+2
  2725   0016C0  0EAA               	movlw	170
  2726   0016C2  6E1D               	movwf	___ftmul@f2^0,c
  2727   0016C4  0EB8               	movlw	184
  2728   0016C6  6E1E               	movwf	(___ftmul@f2+1)^0,c
  2729   0016C8  0E3F               	movlw	63
  2730   0016CA  6E1F               	movwf	(___ftmul@f2+2)^0,c
  2731   0016CC  EC0D  F00E         	call	___ftmul	;wreg free
  2732   0016D0  C01A  F062         	movff	?___ftmul,exp@x
  2733   0016D4  C01B  F063         	movff	?___ftmul+1,exp@x+1
  2734   0016D8  C01C  F064         	movff	?___ftmul+2,exp@x+2
  2735   0016DC  C062  F035         	movff	exp@x,floor@x
  2736   0016E0  C063  F036         	movff	exp@x+1,floor@x+1
  2737   0016E4  C064  F037         	movff	exp@x+2,floor@x+2
  2738   0016E8  ECFA  F00E         	call	_floor	;wreg free
  2739   0016EC  C035  F065         	movff	?_floor,_exp$899
  2740   0016F0  C036  F066         	movff	?_floor+1,_exp$899+1
  2741   0016F4  C037  F067         	movff	?_floor+2,_exp$899+2
  2742   0016F8  C065  F019         	movff	_exp$899,___fttol@f1
  2743   0016FC  C066  F01A         	movff	_exp$899+1,___fttol@f1+1
  2744   001700  C067  F01B         	movff	_exp$899+2,___fttol@f1+2
  2745   001704  EC67  F00F         	call	___fttol	;wreg free
  2746   001708  C019  F068         	movff	?___fttol,exp@exponent
  2747   00170C  C01A  F069         	movff	?___fttol+1,exp@exponent+1
  2748   001710  C062  F035         	movff	exp@x,___ftsub@f1
  2749   001714  C063  F036         	movff	exp@x+1,___ftsub@f1+1
  2750   001718  C064  F037         	movff	exp@x+2,___ftsub@f1+2
  2751   00171C  C068  F016         	movff	exp@exponent,___awtoft@c
  2752   001720  C069  F017         	movff	exp@exponent+1,___awtoft@c+1
  2753   001724  EC42  F015         	call	___awtoft	;wreg free
  2754   001728  C016  F038         	movff	?___awtoft,___ftsub@f2
  2755   00172C  C017  F039         	movff	?___awtoft+1,___ftsub@f2+1
  2756   001730  C018  F03A         	movff	?___awtoft+2,___ftsub@f2+2
  2757   001734  EC22  F015         	call	___ftsub	;wreg free
  2758   001738  C035  F062         	movff	?___ftsub,exp@x
  2759   00173C  C036  F063         	movff	?___ftsub+1,exp@x+1
  2760   001740  C037  F064         	movff	?___ftsub+2,exp@x+2
  2761   001744  C062  F035         	movff	exp@x,eval_poly@x
  2762   001748  C063  F036         	movff	exp@x+1,eval_poly@x+1
  2763   00174C  C064  F037         	movff	exp@x+2,eval_poly@x+2
  2764   001750  0E01               	movlw	low exp@coeff
  2765   001752  6E38               	movwf	eval_poly@d^0,c
  2766   001754  0E00               	movlw	0
  2767   001756  6E3A               	movwf	(eval_poly@n+1)^0,c
  2768   001758  0E09               	movlw	9
  2769   00175A  6E39               	movwf	eval_poly@n^0,c
  2770   00175C  ECF3  F010         	call	_eval_poly	;wreg free
  2771   001760  C035  F03F         	movff	?_eval_poly,ldexp@value
  2772   001764  C036  F040         	movff	?_eval_poly+1,ldexp@value+1
  2773   001768  C037  F041         	movff	?_eval_poly+2,ldexp@value+2
  2774   00176C  C068  F042         	movff	exp@exponent,ldexp@newexp
  2775   001770  C069  F043         	movff	exp@exponent+1,ldexp@newexp+1
  2776   001774  EC37  F010         	call	_ldexp	;wreg free
  2777   001778  C03F  F062         	movff	?_ldexp,exp@x
  2778   00177C  C040  F063         	movff	?_ldexp+1,exp@x+1
  2779   001780  C041  F064         	movff	?_ldexp+2,exp@x+2
  2780   001784  0100               	movlb	0	; () banked
  2781   001786  516A               	movf	exp@sign& (0+255),w,b
  2782   001788  B4D8               	btfsc	status,2,c
  2783   00178A  D025               	goto	l1039
  2784                           
  2785                           ; BSR set to: 0
  2786   00178C  2962               	incf	exp@x& (0+255),w,b
  2787   00178E  E10E               	bnz	l4589
  2788   001790  0E7F               	movlw	127
  2789   001792  1963               	xorwf	(exp@x+1)& (0+255),w,b
  2790   001794  E10B               	bnz	l4589
  2791   001796  0E7F               	movlw	127
  2792   001798  1964               	xorwf	(exp@x+2)& (0+255),w,b
  2793   00179A  A4D8               	btfss	status,2,c
  2794   00179C  D007               	goto	l4589
  2795                           
  2796                           ; BSR set to: 0
  2797   00179E  0E00               	movlw	0
  2798   0017A0  6F62               	movwf	?_exp& (0+255),b
  2799   0017A2  0E00               	movlw	0
  2800   0017A4  6F63               	movwf	(?_exp+1)& (0+255),b
  2801   0017A6  0E00               	movlw	0
  2802   0017A8  6F64               	movwf	(?_exp+2)& (0+255),b
  2803   0017AA  0012               	return	
  2804   0017AC                     l4589:
  2805                           
  2806                           ; BSR set to: 0
  2807   0017AC  0E00               	movlw	0
  2808   0017AE  6E16               	movwf	___ftdiv@f1^0,c
  2809   0017B0  0E80               	movlw	128
  2810   0017B2  6E17               	movwf	(___ftdiv@f1+1)^0,c
  2811   0017B4  0E3F               	movlw	63
  2812   0017B6  6E18               	movwf	(___ftdiv@f1+2)^0,c
  2813   0017B8  C062  F019         	movff	exp@x,___ftdiv@f2
  2814   0017BC  C063  F01A         	movff	exp@x+1,___ftdiv@f2+1
  2815   0017C0  C064  F01B         	movff	exp@x+2,___ftdiv@f2+2
  2816   0017C4  EC87  F00E         	call	___ftdiv	;wreg free
  2817   0017C8  C016  F062         	movff	?___ftdiv,?_exp
  2818   0017CC  C017  F063         	movff	?___ftdiv+1,?_exp+1
  2819   0017D0  C018  F064         	movff	?___ftdiv+2,?_exp+2
  2820   0017D4  0012               	return	
  2821   0017D6                     l1039:
  2822                           
  2823                           ; BSR set to: 0
  2824   0017D6  C062  F062         	movff	exp@x,?_exp
  2825   0017DA  C063  F063         	movff	exp@x+1,?_exp+1
  2826   0017DE  C064  F064         	movff	exp@x+2,?_exp+2
  2827   0017E2  0012               	return		;funcret
  2828   0017E4                     __end_of_exp:
  2829                           	callstack 0
  2830                           
  2831 ;; *************** function _ldexp *****************
  2832 ;; Defined at:
  2833 ;;		line 277 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\frexp.c"
  2834 ;; Parameters:    Size  Location     Type
  2835 ;;  value           3   62[COMRAM] unsigned char 
  2836 ;;  newexp          2   65[COMRAM] int 
  2837 ;; Auto vars:     Size  Location     Type
  2838 ;;		None
  2839 ;; Return value:  Size  Location     Type
  2840 ;;                  3   62[COMRAM] int 
  2841 ;; Registers used:
  2842 ;;		wreg, status,2, status,0
  2843 ;; Tracked objects:
  2844 ;;		On entry : 0/0
  2845 ;;		On exit  : 0/0
  2846 ;;		Unchanged: 0/0
  2847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2848 ;;      Params:         5       0       0       0       0       0       0       0       0
  2849 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2850 ;;      Temps:          0       2       0       0       0       0       0       0       0
  2851 ;;      Totals:         5       2       0       0       0       0       0       0       0
  2852 ;;Total ram usage:        7 bytes
  2853 ;; Hardware stack levels used: 1
  2854 ;; Hardware stack levels required when called: 5
  2855 ;; This function calls:
  2856 ;;		Nothing
  2857 ;; This function is called by:
  2858 ;;		_exp
  2859 ;; This function uses a non-reentrant model
  2860 ;;
  2861                           
  2862                           	psect	text4
  2863   00206E                     __ptext4:
  2864                           	callstack 0
  2865   00206E                     _ldexp:
  2866                           	callstack 23
  2867                           
  2868                           ;incstack = 0
  2869   00206E  503F               	movf	ldexp@value^0,w,c
  2870   002070  1040               	iorwf	(ldexp@value+1)^0,w,c
  2871   002072  1041               	iorwf	(ldexp@value+2)^0,w,c
  2872   002074  A4D8               	btfss	status,2,c
  2873   002076  D007               	goto	l4487
  2874   002078  0E00               	movlw	0
  2875   00207A  6E3F               	movwf	?_ldexp^0,c
  2876   00207C  0E00               	movlw	0
  2877   00207E  6E40               	movwf	(?_ldexp+1)^0,c
  2878   002080  0E00               	movlw	0
  2879   002082  6E41               	movwf	(?_ldexp+2)^0,c
  2880   002084  0012               	return	
  2881   002086                     l4487:
  2882   002086  5041               	movf	(ldexp@value+2)^0,w,c
  2883   002088  0B7F               	andlw	127
  2884   00208A  0100               	movlb	0	; () banked
  2885   00208C  6F60               	movwf	??_ldexp& (0+255),b
  2886   00208E  6B61               	clrf	(??_ldexp+1)& (0+255),b
  2887   002090  90D8               	bcf	status,0,c
  2888   002092  3760               	rlcf	??_ldexp& (0+255),f,b
  2889   002094  3761               	rlcf	(??_ldexp+1)& (0+255),f,b
  2890   002096  5160               	movf	??_ldexp& (0+255),w,b
  2891   002098  2642               	addwf	ldexp@newexp^0,f,c
  2892   00209A  5161               	movf	(??_ldexp+1)& (0+255),w,b
  2893   00209C  2243               	addwfc	(ldexp@newexp+1)^0,f,c
  2894   00209E  AE40               	btfss	(ldexp@value+1)^0,7,c
  2895   0020A0  D003               	goto	u5510
  2896   0020A2  6B60               	clrf	??_ldexp& (0+255),b
  2897   0020A4  2B60               	incf	??_ldexp& (0+255),f,b
  2898   0020A6  D002               	goto	u5518
  2899   0020A8                     u5510:
  2900   0020A8  0100               	movlb	0	; () banked
  2901   0020AA  6B60               	clrf	??_ldexp& (0+255),b
  2902   0020AC                     u5518:
  2903   0020AC  5160               	movf	??_ldexp& (0+255),w,b
  2904   0020AE  2642               	addwf	ldexp@newexp^0,f,c
  2905   0020B0  0E00               	movlw	0
  2906   0020B2  2243               	addwfc	(ldexp@newexp+1)^0,f,c
  2907   0020B4  AE43               	btfss	(ldexp@newexp+1)^0,7,c
  2908   0020B6  D00B               	goto	l4495
  2909                           
  2910                           ; BSR set to: 0
  2911   0020B8  0E00               	movlw	0
  2912   0020BA  6F90               	movwf	(_errno+1)& (0+255),b
  2913   0020BC  0E22               	movlw	34
  2914   0020BE  6F8F               	movwf	_errno& (0+255),b
  2915   0020C0  0E00               	movlw	0
  2916   0020C2  6E3F               	movwf	?_ldexp^0,c
  2917   0020C4  0E00               	movlw	0
  2918   0020C6  6E40               	movwf	(?_ldexp+1)^0,c
  2919   0020C8  0E00               	movlw	0
  2920   0020CA  6E41               	movwf	(?_ldexp+2)^0,c
  2921   0020CC  0012               	return	
  2922   0020CE                     l4495:
  2923                           
  2924                           ; BSR set to: 0
  2925   0020CE  BE43               	btfsc	(ldexp@newexp+1)^0,7,c
  2926   0020D0  D017               	goto	l4511
  2927   0020D2  0443               	decf	(ldexp@newexp+1)^0,w,c
  2928   0020D4  A0D8               	btfss	status,0,c
  2929   0020D6  D014               	goto	l4511
  2930                           
  2931                           ; BSR set to: 0
  2932   0020D8  0E00               	movlw	0
  2933   0020DA  6F90               	movwf	(_errno+1)& (0+255),b
  2934   0020DC  0E22               	movlw	34
  2935   0020DE  6F8F               	movwf	_errno& (0+255),b
  2936                           
  2937                           ; BSR set to: 0
  2938   0020E0  AE41               	btfss	(ldexp@value+2)^0,7,c
  2939   0020E2  D007               	goto	l4507
  2940                           
  2941                           ; BSR set to: 0
  2942   0020E4  0EFF               	movlw	255
  2943   0020E6  6E3F               	movwf	?_ldexp^0,c
  2944   0020E8  0E7F               	movlw	127
  2945   0020EA  6E40               	movwf	(?_ldexp+1)^0,c
  2946   0020EC  0EFF               	movlw	255
  2947   0020EE  6E41               	movwf	(?_ldexp+2)^0,c
  2948   0020F0  0012               	return	
  2949   0020F2                     l4507:
  2950                           
  2951                           ; BSR set to: 0
  2952   0020F2  0EFF               	movlw	255
  2953   0020F4  6E3F               	movwf	?_ldexp^0,c
  2954   0020F6  0E7F               	movlw	127
  2955   0020F8  6E40               	movwf	(?_ldexp+1)^0,c
  2956   0020FA  0E7F               	movlw	127
  2957   0020FC  6E41               	movwf	(?_ldexp+2)^0,c
  2958   0020FE  0012               	return	
  2959   002100                     l4511:
  2960                           
  2961                           ; BSR set to: 0
  2962   002100  3443               	rlcf	(ldexp@newexp+1)^0,w,c
  2963   002102  3043               	rrcf	(ldexp@newexp+1)^0,w,c
  2964   002104  6F61               	movwf	(??_ldexp+1)& (0+255),b
  2965   002106  3042               	rrcf	ldexp@newexp^0,w,c
  2966   002108  6F60               	movwf	??_ldexp& (0+255),b
  2967   00210A  5041               	movf	(ldexp@value+2)^0,w,c
  2968   00210C  1960               	xorwf	??_ldexp& (0+255),w,b
  2969   00210E  0B80               	andlw	-128
  2970   002110  1960               	xorwf	??_ldexp& (0+255),w,b
  2971   002112  6E41               	movwf	(ldexp@value+2)^0,c
  2972   002114  C042  F060         	movff	ldexp@newexp,??_ldexp
  2973   002118  0E01               	movlw	1
  2974   00211A  1760               	andwf	??_ldexp& (0+255),f,b
  2975   00211C  3360               	rrcf	??_ldexp& (0+255),f,b
  2976   00211E  3360               	rrcf	??_ldexp& (0+255),f,b
  2977   002120  5040               	movf	(ldexp@value+1)^0,w,c
  2978   002122  1960               	xorwf	??_ldexp& (0+255),w,b
  2979   002124  0B7F               	andlw	-129
  2980   002126  1960               	xorwf	??_ldexp& (0+255),w,b
  2981   002128  6E40               	movwf	(ldexp@value+1)^0,c
  2982                           
  2983                           ; BSR set to: 0
  2984   00212A  C03F  F03F         	movff	ldexp@value,?_ldexp
  2985   00212E  C040  F040         	movff	ldexp@value+1,?_ldexp+1
  2986   002132  C041  F041         	movff	ldexp@value+2,?_ldexp+2
  2987   002136  0012               	return		;funcret
  2988   002138                     __end_of_ldexp:
  2989                           	callstack 0
  2990                           
  2991 ;; *************** function _floor *****************
  2992 ;; Defined at:
  2993 ;;		line 13 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\floor.c"
  2994 ;; Parameters:    Size  Location     Type
  2995 ;;  x               3   52[COMRAM] int 
  2996 ;; Auto vars:     Size  Location     Type
  2997 ;;  i               3   55[COMRAM] int 
  2998 ;;  expon           2   58[COMRAM] int 
  2999 ;; Return value:  Size  Location     Type
  3000 ;;                  3   52[COMRAM] int 
  3001 ;; Registers used:
  3002 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3003 ;; Tracked objects:
  3004 ;;		On entry : 0/0
  3005 ;;		On exit  : 0/0
  3006 ;;		Unchanged: 0/0
  3007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3008 ;;      Params:         3       0       0       0       0       0       0       0       0
  3009 ;;      Locals:         5       0       0       0       0       0       0       0       0
  3010 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3011 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3012 ;;Total ram usage:        8 bytes
  3013 ;; Hardware stack levels used: 1
  3014 ;; Hardware stack levels required when called: 7
  3015 ;; This function calls:
  3016 ;;		___altoft
  3017 ;;		___ftadd
  3018 ;;		___ftge
  3019 ;;		___fttol
  3020 ;;		_frexp
  3021 ;; This function is called by:
  3022 ;;		_exp
  3023 ;; This function uses a non-reentrant model
  3024 ;;
  3025                           
  3026                           	psect	text5
  3027   001DF4                     __ptext5:
  3028                           	callstack 0
  3029   001DF4                     _floor:
  3030                           	callstack 21
  3031                           
  3032                           ;incstack = 0
  3033   001DF4  C035  F00E         	movff	floor@x,frexp@value
  3034   001DF8  C036  F00F         	movff	floor@x+1,frexp@value+1
  3035   001DFC  C037  F010         	movff	floor@x+2,frexp@value+2
  3036   001E00  0E3B               	movlw	low floor@expon
  3037   001E02  6E11               	movwf	frexp@eptr^0,c
  3038   001E04  ECD6  F011         	call	_frexp	;wreg free
  3039   001E08  AE3C               	btfss	(floor@expon+1)^0,7,c
  3040   001E0A  D010               	goto	l4465
  3041   001E0C  AE37               	btfss	(floor@x+2)^0,7,c
  3042   001E0E  D007               	goto	l4461
  3043   001E10  0E00               	movlw	0
  3044   001E12  6E35               	movwf	?_floor^0,c
  3045   001E14  0E80               	movlw	128
  3046   001E16  6E36               	movwf	(?_floor+1)^0,c
  3047   001E18  0EBF               	movlw	191
  3048   001E1A  6E37               	movwf	(?_floor+2)^0,c
  3049   001E1C  0012               	return	
  3050   001E1E                     l4461:
  3051   001E1E  0E00               	movlw	0
  3052   001E20  6E35               	movwf	?_floor^0,c
  3053   001E22  0E00               	movlw	0
  3054   001E24  6E36               	movwf	(?_floor+1)^0,c
  3055   001E26  0E00               	movlw	0
  3056   001E28  6E37               	movwf	(?_floor+2)^0,c
  3057   001E2A  0012               	return	
  3058   001E2C                     l4465:
  3059   001E2C  503C               	movf	(floor@expon+1)^0,w,c
  3060   001E2E  E104               	bnz	u5470
  3061   001E30  0E15               	movlw	21
  3062   001E32  5C3B               	subwf	floor@expon^0,w,c
  3063   001E34  A0D8               	btfss	status,0,c
  3064   001E36  D007               	goto	l4469
  3065   001E38                     u5470:
  3066   001E38  C035  F035         	movff	floor@x,?_floor
  3067   001E3C  C036  F036         	movff	floor@x+1,?_floor+1
  3068   001E40  C037  F037         	movff	floor@x+2,?_floor+2
  3069   001E44  0012               	return	
  3070   001E46                     l4469:
  3071   001E46  C035  F019         	movff	floor@x,___fttol@f1
  3072   001E4A  C036  F01A         	movff	floor@x+1,___fttol@f1+1
  3073   001E4E  C037  F01B         	movff	floor@x+2,___fttol@f1+2
  3074   001E52  EC67  F00F         	call	___fttol	;wreg free
  3075   001E56  C019  F028         	movff	?___fttol,___altoft@c
  3076   001E5A  C01A  F029         	movff	?___fttol+1,___altoft@c+1
  3077   001E5E  C01B  F02A         	movff	?___fttol+2,___altoft@c+2
  3078   001E62  C01C  F02B         	movff	?___fttol+3,___altoft@c+3
  3079   001E66  EC95  F012         	call	___altoft	;wreg free
  3080   001E6A  C028  F038         	movff	?___altoft,floor@i
  3081   001E6E  C029  F039         	movff	?___altoft+1,floor@i+1
  3082   001E72  C02A  F03A         	movff	?___altoft+2,floor@i+2
  3083   001E76  C035  F00E         	movff	floor@x,___ftge@ff1
  3084   001E7A  C036  F00F         	movff	floor@x+1,___ftge@ff1+1
  3085   001E7E  C037  F010         	movff	floor@x+2,___ftge@ff1+2
  3086   001E82  C038  F011         	movff	floor@i,___ftge@ff2
  3087   001E86  C039  F012         	movff	floor@i+1,___ftge@ff2+1
  3088   001E8A  C03A  F013         	movff	floor@i+2,___ftge@ff2+2
  3089   001E8E  ECD1  F012         	call	___ftge	;wreg free
  3090   001E92  B0D8               	btfsc	status,0,c
  3091   001E94  D015               	goto	l1055
  3092   001E96  C038  F029         	movff	floor@i,___ftadd@f1
  3093   001E9A  C039  F02A         	movff	floor@i+1,___ftadd@f1+1
  3094   001E9E  C03A  F02B         	movff	floor@i+2,___ftadd@f1+2
  3095   001EA2  0E00               	movlw	0
  3096   001EA4  6E2C               	movwf	___ftadd@f2^0,c
  3097   001EA6  0E80               	movlw	128
  3098   001EA8  6E2D               	movwf	(___ftadd@f2+1)^0,c
  3099   001EAA  0EBF               	movlw	191
  3100   001EAC  6E2E               	movwf	(___ftadd@f2+2)^0,c
  3101   001EAE  ECF2  F00B         	call	___ftadd	;wreg free
  3102   001EB2  C029  F035         	movff	?___ftadd,?_floor
  3103   001EB6  C02A  F036         	movff	?___ftadd+1,?_floor+1
  3104   001EBA  C02B  F037         	movff	?___ftadd+2,?_floor+2
  3105   001EBE  0012               	return	
  3106   001EC0                     l1055:
  3107   001EC0  C038  F035         	movff	floor@i,?_floor
  3108   001EC4  C039  F036         	movff	floor@i+1,?_floor+1
  3109   001EC8  C03A  F037         	movff	floor@i+2,?_floor+2
  3110   001ECC  0012               	return		;funcret
  3111   001ECE                     __end_of_floor:
  3112                           	callstack 0
  3113                           
  3114 ;; *************** function _frexp *****************
  3115 ;; Defined at:
  3116 ;;		line 254 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\frexp.c"
  3117 ;; Parameters:    Size  Location     Type
  3118 ;;  value           3   13[COMRAM] int 
  3119 ;;  eptr            1   16[COMRAM] PTR int 
  3120 ;;		 -> log@exponent(2), floor@expon(2), 
  3121 ;; Auto vars:     Size  Location     Type
  3122 ;;		None
  3123 ;; Return value:  Size  Location     Type
  3124 ;;                  3   13[COMRAM] PTR int 
  3125 ;; Registers used:
  3126 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3127 ;; Tracked objects:
  3128 ;;		On entry : 0/0
  3129 ;;		On exit  : 0/0
  3130 ;;		Unchanged: 0/0
  3131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3132 ;;      Params:         4       0       0       0       0       0       0       0       0
  3133 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3134 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3135 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3136 ;;Total ram usage:        6 bytes
  3137 ;; Hardware stack levels used: 1
  3138 ;; Hardware stack levels required when called: 5
  3139 ;; This function calls:
  3140 ;;		Nothing
  3141 ;; This function is called by:
  3142 ;;		_floor
  3143 ;;		_log
  3144 ;; This function uses a non-reentrant model
  3145 ;;
  3146                           
  3147                           	psect	text6
  3148   0023AC                     __ptext6:
  3149                           	callstack 0
  3150   0023AC                     _frexp:
  3151                           	callstack 23
  3152                           
  3153                           ;incstack = 0
  3154   0023AC  500E               	movf	frexp@value^0,w,c
  3155   0023AE  100F               	iorwf	(frexp@value+1)^0,w,c
  3156   0023B0  1010               	iorwf	(frexp@value+2)^0,w,c
  3157   0023B2  A4D8               	btfss	status,2,c
  3158   0023B4  D00E               	goto	l4369
  3159   0023B6  5011               	movf	frexp@eptr^0,w,c
  3160   0023B8  6ED9               	movwf	fsr2l,c
  3161   0023BA  6ADA               	clrf	fsr2h,c
  3162   0023BC  0E00               	movlw	0
  3163   0023BE  6EDE               	movwf	postinc2,c
  3164   0023C0  0E00               	movlw	0
  3165   0023C2  6EDD               	movwf	postdec2,c
  3166   0023C4  0E00               	movlw	0
  3167   0023C6  6E0E               	movwf	?_frexp^0,c
  3168   0023C8  0E00               	movlw	0
  3169   0023CA  6E0F               	movwf	(?_frexp+1)^0,c
  3170   0023CC  0E00               	movlw	0
  3171   0023CE  6E10               	movwf	(?_frexp+2)^0,c
  3172   0023D0  0012               	return	
  3173   0023D2                     l4369:
  3174   0023D2  5010               	movf	(frexp@value+2)^0,w,c
  3175   0023D4  0B7F               	andlw	127
  3176   0023D6  6E12               	movwf	??_frexp^0,c
  3177   0023D8  6A13               	clrf	(??_frexp+1)^0,c
  3178   0023DA  90D8               	bcf	status,0,c
  3179   0023DC  3612               	rlcf	??_frexp^0,f,c
  3180   0023DE  3613               	rlcf	(??_frexp+1)^0,f,c
  3181   0023E0  5011               	movf	frexp@eptr^0,w,c
  3182   0023E2  6ED9               	movwf	fsr2l,c
  3183   0023E4  6ADA               	clrf	fsr2h,c
  3184   0023E6  C012  FFDE         	movff	??_frexp,postinc2
  3185   0023EA  C013  FFDD         	movff	??_frexp+1,postdec2
  3186   0023EE  5011               	movf	frexp@eptr^0,w,c
  3187   0023F0  6ED9               	movwf	fsr2l,c
  3188   0023F2  6ADA               	clrf	fsr2h,c
  3189   0023F4  AE0F               	btfss	(frexp@value+1)^0,7,c
  3190   0023F6  D003               	goto	u5360
  3191   0023F8  6A12               	clrf	??_frexp^0,c
  3192   0023FA  2A12               	incf	??_frexp^0,f,c
  3193   0023FC  D001               	goto	u5368
  3194   0023FE                     u5360:
  3195   0023FE  6A12               	clrf	??_frexp^0,c
  3196   002400                     u5368:
  3197   002400  5012               	movf	??_frexp^0,w,c
  3198   002402  12DE               	iorwf	postinc2,f,c
  3199   002404  0E00               	movlw	0
  3200   002406  12DD               	iorwf	postdec2,f,c
  3201   002408  5011               	movf	frexp@eptr^0,w,c
  3202   00240A  6ED9               	movwf	fsr2l,c
  3203   00240C  6ADA               	clrf	fsr2h,c
  3204   00240E  0E82               	movlw	130
  3205   002410  26DE               	addwf	postinc2,f,c
  3206   002412  0EFF               	movlw	255
  3207   002414  22DD               	addwfc	postdec2,f,c
  3208   002416  5010               	movf	(frexp@value+2)^0,w,c
  3209   002418  0B80               	andlw	-128
  3210   00241A  093F               	iorlw	63
  3211   00241C  6E10               	movwf	(frexp@value+2)^0,c
  3212   00241E  9E0F               	bcf	(frexp@value+1)^0,7,c
  3213   002420  C00E  F00E         	movff	frexp@value,?_frexp
  3214   002424  C00F  F00F         	movff	frexp@value+1,?_frexp+1
  3215   002428  C010  F010         	movff	frexp@value+2,?_frexp+2
  3216   00242C  0012               	return		;funcret
  3217   00242E                     __end_of_frexp:
  3218                           	callstack 0
  3219                           
  3220 ;; *************** function ___fttol *****************
  3221 ;; Defined at:
  3222 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\fttol.c"
  3223 ;; Parameters:    Size  Location     Type
  3224 ;;  f1              3   24[COMRAM] float 
  3225 ;; Auto vars:     Size  Location     Type
  3226 ;;  lval            4   34[COMRAM] unsigned long 
  3227 ;;  exp1            1   38[COMRAM] unsigned char 
  3228 ;;  sign1           1   33[COMRAM] unsigned char 
  3229 ;; Return value:  Size  Location     Type
  3230 ;;                  4   24[COMRAM] long 
  3231 ;; Registers used:
  3232 ;;		wreg, status,2, status,0
  3233 ;; Tracked objects:
  3234 ;;		On entry : 0/0
  3235 ;;		On exit  : 0/0
  3236 ;;		Unchanged: 0/0
  3237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3238 ;;      Params:         4       0       0       0       0       0       0       0       0
  3239 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3240 ;;      Temps:          5       0       0       0       0       0       0       0       0
  3241 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3242 ;;Total ram usage:       15 bytes
  3243 ;; Hardware stack levels used: 1
  3244 ;; Hardware stack levels required when called: 5
  3245 ;; This function calls:
  3246 ;;		Nothing
  3247 ;; This function is called by:
  3248 ;;		_main
  3249 ;;		_pow
  3250 ;;		_exp
  3251 ;;		_floor
  3252 ;; This function uses a non-reentrant model
  3253 ;;
  3254                           
  3255                           	psect	text7
  3256   001ECE                     __ptext7:
  3257                           	callstack 0
  3258   001ECE                     ___fttol:
  3259                           	callstack 22
  3260                           
  3261                           ;incstack = 0
  3262   001ECE  C01B  F01D         	movff	___fttol@f1+2,??___fttol
  3263   001ED2  6A1E               	clrf	(??___fttol+1)^0,c
  3264   001ED4  6A1F               	clrf	(??___fttol+2)^0,c
  3265   001ED6  341A               	rlcf	(___fttol@f1+1)^0,w,c
  3266   001ED8  361D               	rlcf	??___fttol^0,f,c
  3267   001EDA  E301               	bnc	u5271
  3268   001EDC  801E               	bsf	(??___fttol+1)^0,0,c
  3269   001EDE                     u5271:
  3270   001EDE  501D               	movf	??___fttol^0,w,c
  3271   001EE0  6E27               	movwf	___fttol@exp1^0,c
  3272   001EE2  5027               	movf	___fttol@exp1^0,w,c
  3273   001EE4  A4D8               	btfss	status,2,c
  3274   001EE6  D009               	goto	l4321
  3275   001EE8                     u5280:
  3276   001EE8  0E00               	movlw	0
  3277   001EEA  6E19               	movwf	?___fttol^0,c
  3278   001EEC  0E00               	movlw	0
  3279   001EEE  6E1A               	movwf	(?___fttol+1)^0,c
  3280   001EF0  0E00               	movlw	0
  3281   001EF2  6E1B               	movwf	(?___fttol+2)^0,c
  3282   001EF4  0E00               	movlw	0
  3283   001EF6  6E1C               	movwf	(?___fttol+3)^0,c
  3284   001EF8  0012               	return	
  3285   001EFA                     l4321:
  3286   001EFA  0E17               	movlw	23
  3287   001EFC  6E1D               	movwf	??___fttol^0,c
  3288   001EFE  C019  F01E         	movff	___fttol@f1,??___fttol+1
  3289   001F02  C01A  F01F         	movff	___fttol@f1+1,??___fttol+2
  3290   001F06  C01B  F020         	movff	___fttol@f1+2,??___fttol+3
  3291   001F0A  281D               	incf	??___fttol^0,w,c
  3292   001F0C  6E21               	movwf	(??___fttol+4)^0,c
  3293   001F0E  D004               	goto	u5290
  3294   001F10                     u5295:
  3295   001F10  90D8               	bcf	status,0,c
  3296   001F12  3220               	rrcf	(??___fttol+3)^0,f,c
  3297   001F14  321F               	rrcf	(??___fttol+2)^0,f,c
  3298   001F16  321E               	rrcf	(??___fttol+1)^0,f,c
  3299   001F18                     u5290:
  3300   001F18  2E21               	decfsz	(??___fttol+4)^0,f,c
  3301   001F1A  D7FA               	goto	u5295
  3302   001F1C  501E               	movf	(??___fttol+1)^0,w,c
  3303   001F1E  6E22               	movwf	___fttol@sign1^0,c
  3304   001F20  8E1A               	bsf	(___fttol@f1+1)^0,7,c
  3305   001F22  0EFF               	movlw	255
  3306   001F24  1619               	andwf	___fttol@f1^0,f,c
  3307   001F26  0EFF               	movlw	255
  3308   001F28  161A               	andwf	(___fttol@f1+1)^0,f,c
  3309   001F2A  0E00               	movlw	0
  3310   001F2C  161B               	andwf	(___fttol@f1+2)^0,f,c
  3311   001F2E  5019               	movf	___fttol@f1^0,w,c
  3312   001F30  6E23               	movwf	___fttol@lval^0,c
  3313   001F32  501A               	movf	(___fttol@f1+1)^0,w,c
  3314   001F34  6E24               	movwf	(___fttol@lval+1)^0,c
  3315   001F36  501B               	movf	(___fttol@f1+2)^0,w,c
  3316   001F38  6E25               	movwf	(___fttol@lval+2)^0,c
  3317   001F3A  6A26               	clrf	(___fttol@lval+3)^0,c
  3318   001F3C  0E8E               	movlw	142
  3319   001F3E  5E27               	subwf	___fttol@exp1^0,f,c
  3320   001F40  AE27               	btfss	___fttol@exp1^0,7,c
  3321   001F42  D00D               	goto	l4343
  3322   001F44  5027               	movf	___fttol@exp1^0,w,c
  3323   001F46  0A80               	xorlw	128
  3324   001F48  0F8F               	addlw	143
  3325   001F4A  A0D8               	btfss	status,0,c
  3326   001F4C  D7CD               	goto	u5280
  3327   001F4E                     l4339:
  3328   001F4E  90D8               	bcf	status,0,c
  3329   001F50  3226               	rrcf	(___fttol@lval+3)^0,f,c
  3330   001F52  3225               	rrcf	(___fttol@lval+2)^0,f,c
  3331   001F54  3224               	rrcf	(___fttol@lval+1)^0,f,c
  3332   001F56  3223               	rrcf	___fttol@lval^0,f,c
  3333   001F58  3E27               	incfsz	___fttol@exp1^0,f,c
  3334   001F5A  D7F9               	goto	l4339
  3335   001F5C  D00D               	goto	u5330
  3336   001F5E                     l4343:
  3337   001F5E  0E17               	movlw	23
  3338   001F60  6427               	cpfsgt	___fttol@exp1^0,c
  3339   001F62  D007               	goto	l4351
  3340   001F64  D7C1               	goto	u5280
  3341   001F66                     l4349:
  3342   001F66  90D8               	bcf	status,0,c
  3343   001F68  3623               	rlcf	___fttol@lval^0,f,c
  3344   001F6A  3624               	rlcf	(___fttol@lval+1)^0,f,c
  3345   001F6C  3625               	rlcf	(___fttol@lval+2)^0,f,c
  3346   001F6E  3626               	rlcf	(___fttol@lval+3)^0,f,c
  3347   001F70  0627               	decf	___fttol@exp1^0,f,c
  3348   001F72                     l4351:
  3349   001F72  5027               	movf	___fttol@exp1^0,w,c
  3350   001F74  A4D8               	btfss	status,2,c
  3351   001F76  D7F7               	goto	l4349
  3352   001F78                     u5330:
  3353   001F78  5022               	movf	___fttol@sign1^0,w,c
  3354   001F7A  B4D8               	btfsc	status,2,c
  3355   001F7C  D008               	goto	l4357
  3356   001F7E  1E26               	comf	(___fttol@lval+3)^0,f,c
  3357   001F80  1E25               	comf	(___fttol@lval+2)^0,f,c
  3358   001F82  1E24               	comf	(___fttol@lval+1)^0,f,c
  3359   001F84  6C23               	negf	___fttol@lval^0,c
  3360   001F86  0E00               	movlw	0
  3361   001F88  2224               	addwfc	(___fttol@lval+1)^0,f,c
  3362   001F8A  2225               	addwfc	(___fttol@lval+2)^0,f,c
  3363   001F8C  2226               	addwfc	(___fttol@lval+3)^0,f,c
  3364   001F8E                     l4357:
  3365   001F8E  C023  F019         	movff	___fttol@lval,?___fttol
  3366   001F92  C024  F01A         	movff	___fttol@lval+1,?___fttol+1
  3367   001F96  C025  F01B         	movff	___fttol@lval+2,?___fttol+2
  3368   001F9A  C026  F01C         	movff	___fttol@lval+3,?___fttol+3
  3369   001F9E  0012               	return		;funcret
  3370   001FA0                     __end_of___fttol:
  3371                           	callstack 0
  3372                           
  3373 ;; *************** function ___ftge *****************
  3374 ;; Defined at:
  3375 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\ftge.c"
  3376 ;; Parameters:    Size  Location     Type
  3377 ;;  ff1             3   13[COMRAM] float 
  3378 ;;  ff2             3   16[COMRAM] float 
  3379 ;; Auto vars:     Size  Location     Type
  3380 ;;		None
  3381 ;; Return value:  Size  Location     Type
  3382 ;;		None               void
  3383 ;; Registers used:
  3384 ;;		wreg, status,2, status,0
  3385 ;; Tracked objects:
  3386 ;;		On entry : 0/0
  3387 ;;		On exit  : 0/0
  3388 ;;		Unchanged: 0/0
  3389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3390 ;;      Params:         6       0       0       0       0       0       0       0       0
  3391 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3392 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3393 ;;      Totals:         9       0       0       0       0       0       0       0       0
  3394 ;;Total ram usage:        9 bytes
  3395 ;; Hardware stack levels used: 1
  3396 ;; Hardware stack levels required when called: 5
  3397 ;; This function calls:
  3398 ;;		Nothing
  3399 ;; This function is called by:
  3400 ;;		_pow
  3401 ;;		_exp
  3402 ;;		_floor
  3403 ;; This function uses a non-reentrant model
  3404 ;;
  3405                           
  3406                           	psect	text8
  3407   0025A2                     __ptext8:
  3408                           	callstack 0
  3409   0025A2                     ___ftge:
  3410                           	callstack 22
  3411                           
  3412                           ;incstack = 0
  3413   0025A2  AE10               	btfss	(___ftge@ff1+2)^0,7,c
  3414   0025A4  D00F               	goto	l4301
  3415   0025A6  0E00               	movlw	0
  3416   0025A8  6E14               	movwf	??___ftge^0,c
  3417   0025AA  0E00               	movlw	0
  3418   0025AC  6E15               	movwf	(??___ftge+1)^0,c
  3419   0025AE  0E80               	movlw	128
  3420   0025B0  6E16               	movwf	(??___ftge+2)^0,c
  3421   0025B2  500E               	movf	___ftge@ff1^0,w,c
  3422   0025B4  5C14               	subwf	??___ftge^0,w,c
  3423   0025B6  6E0E               	movwf	___ftge@ff1^0,c
  3424   0025B8  500F               	movf	(___ftge@ff1+1)^0,w,c
  3425   0025BA  5815               	subwfb	(??___ftge+1)^0,w,c
  3426   0025BC  6E0F               	movwf	(___ftge@ff1+1)^0,c
  3427   0025BE  5010               	movf	(___ftge@ff1+2)^0,w,c
  3428   0025C0  5816               	subwfb	(??___ftge+2)^0,w,c
  3429   0025C2  6E10               	movwf	(___ftge@ff1+2)^0,c
  3430   0025C4                     l4301:
  3431   0025C4  AE13               	btfss	(___ftge@ff2+2)^0,7,c
  3432   0025C6  D00F               	goto	l4305
  3433   0025C8  0E00               	movlw	0
  3434   0025CA  6E14               	movwf	??___ftge^0,c
  3435   0025CC  0E00               	movlw	0
  3436   0025CE  6E15               	movwf	(??___ftge+1)^0,c
  3437   0025D0  0E80               	movlw	128
  3438   0025D2  6E16               	movwf	(??___ftge+2)^0,c
  3439   0025D4  5011               	movf	___ftge@ff2^0,w,c
  3440   0025D6  5C14               	subwf	??___ftge^0,w,c
  3441   0025D8  6E11               	movwf	___ftge@ff2^0,c
  3442   0025DA  5012               	movf	(___ftge@ff2+1)^0,w,c
  3443   0025DC  5815               	subwfb	(??___ftge+1)^0,w,c
  3444   0025DE  6E12               	movwf	(___ftge@ff2+1)^0,c
  3445   0025E0  5013               	movf	(___ftge@ff2+2)^0,w,c
  3446   0025E2  5816               	subwfb	(??___ftge+2)^0,w,c
  3447   0025E4  6E13               	movwf	(___ftge@ff2+2)^0,c
  3448   0025E6                     l4305:
  3449   0025E6  0E00               	movlw	0
  3450   0025E8  1A0E               	xorwf	___ftge@ff1^0,f,c
  3451   0025EA  0E00               	movlw	0
  3452   0025EC  1A0F               	xorwf	(___ftge@ff1+1)^0,f,c
  3453   0025EE  0E80               	movlw	128
  3454   0025F0  1A10               	xorwf	(___ftge@ff1+2)^0,f,c
  3455   0025F2  0E00               	movlw	0
  3456   0025F4  1A11               	xorwf	___ftge@ff2^0,f,c
  3457   0025F6  0E00               	movlw	0
  3458   0025F8  1A12               	xorwf	(___ftge@ff2+1)^0,f,c
  3459   0025FA  0E80               	movlw	128
  3460   0025FC  1A13               	xorwf	(___ftge@ff2+2)^0,f,c
  3461   0025FE  5011               	movf	___ftge@ff2^0,w,c
  3462   002600  5C0E               	subwf	___ftge@ff1^0,w,c
  3463   002602  5012               	movf	(___ftge@ff2+1)^0,w,c
  3464   002604  580F               	subwfb	(___ftge@ff1+1)^0,w,c
  3465   002606  5013               	movf	(___ftge@ff2+2)^0,w,c
  3466   002608  5810               	subwfb	(___ftge@ff1+2)^0,w,c
  3467   00260A  B0D8               	btfsc	status,0,c
  3468   00260C  D002               	goto	l4311
  3469   00260E  90D8               	bcf	status,0,c
  3470   002610  0012               	return	
  3471   002612                     l4311:
  3472   002612  80D8               	bsf	status,0,c
  3473   002614  0012               	return		;funcret
  3474   002616                     __end_of___ftge:
  3475                           	callstack 0
  3476                           
  3477 ;; *************** function ___altoft *****************
  3478 ;; Defined at:
  3479 ;;		line 42 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\altoft.c"
  3480 ;; Parameters:    Size  Location     Type
  3481 ;;  c               4   39[COMRAM] long 
  3482 ;; Auto vars:     Size  Location     Type
  3483 ;;  sign            1   48[COMRAM] unsigned char 
  3484 ;;  exp             1   47[COMRAM] unsigned char 
  3485 ;; Return value:  Size  Location     Type
  3486 ;;                  3   39[COMRAM] float 
  3487 ;; Registers used:
  3488 ;;		wreg, status,2, status,0, cstack
  3489 ;; Tracked objects:
  3490 ;;		On entry : 0/0
  3491 ;;		On exit  : 0/0
  3492 ;;		Unchanged: 0/0
  3493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3494 ;;      Params:         4       0       0       0       0       0       0       0       0
  3495 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3496 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3497 ;;      Totals:        10       0       0       0       0       0       0       0       0
  3498 ;;Total ram usage:       10 bytes
  3499 ;; Hardware stack levels used: 1
  3500 ;; Hardware stack levels required when called: 6
  3501 ;; This function calls:
  3502 ;;		___ftpack
  3503 ;; This function is called by:
  3504 ;;		_floor
  3505 ;; This function uses a non-reentrant model
  3506 ;;
  3507                           
  3508                           	psect	text9
  3509   00252A                     __ptext9:
  3510                           	callstack 0
  3511   00252A                     ___altoft:
  3512                           	callstack 21
  3513                           
  3514                           ;incstack = 0
  3515   00252A  0E00               	movlw	0
  3516   00252C  6E31               	movwf	___altoft@sign^0,c
  3517   00252E  0E8E               	movlw	142
  3518   002530  6E30               	movwf	___altoft@exp^0,c
  3519   002532  AE2B               	btfss	(___altoft@c+3)^0,7,c
  3520   002534  D011               	goto	l4173
  3521   002536  1E2B               	comf	(___altoft@c+3)^0,f,c
  3522   002538  1E2A               	comf	(___altoft@c+2)^0,f,c
  3523   00253A  1E29               	comf	(___altoft@c+1)^0,f,c
  3524   00253C  6C28               	negf	___altoft@c^0,c
  3525   00253E  0E00               	movlw	0
  3526   002540  2229               	addwfc	(___altoft@c+1)^0,f,c
  3527   002542  222A               	addwfc	(___altoft@c+2)^0,f,c
  3528   002544  222B               	addwfc	(___altoft@c+3)^0,f,c
  3529   002546  0E01               	movlw	1
  3530   002548  6E31               	movwf	___altoft@sign^0,c
  3531   00254A  D006               	goto	l4173
  3532   00254C                     l4171:
  3533   00254C  90D8               	bcf	status,0,c
  3534   00254E  322B               	rrcf	(___altoft@c+3)^0,f,c
  3535   002550  322A               	rrcf	(___altoft@c+2)^0,f,c
  3536   002552  3229               	rrcf	(___altoft@c+1)^0,f,c
  3537   002554  3228               	rrcf	___altoft@c^0,f,c
  3538   002556  2A30               	incf	___altoft@exp^0,f,c
  3539   002558                     l4173:
  3540   002558  0E00               	movlw	0
  3541   00255A  1428               	andwf	___altoft@c^0,w,c
  3542   00255C  6E2C               	movwf	??___altoft^0,c
  3543   00255E  0E00               	movlw	0
  3544   002560  1429               	andwf	(___altoft@c+1)^0,w,c
  3545   002562  6E2D               	movwf	(??___altoft+1)^0,c
  3546   002564  0E00               	movlw	0
  3547   002566  142A               	andwf	(___altoft@c+2)^0,w,c
  3548   002568  6E2E               	movwf	(??___altoft+2)^0,c
  3549   00256A  0EFF               	movlw	255
  3550   00256C  142B               	andwf	(___altoft@c+3)^0,w,c
  3551   00256E  6E2F               	movwf	(??___altoft+3)^0,c
  3552   002570  502C               	movf	??___altoft^0,w,c
  3553   002572  102D               	iorwf	(??___altoft+1)^0,w,c
  3554   002574  102E               	iorwf	(??___altoft+2)^0,w,c
  3555   002576  102F               	iorwf	(??___altoft+3)^0,w,c
  3556   002578  A4D8               	btfss	status,2,c
  3557   00257A  D7E8               	goto	l4171
  3558   00257C  C028  F00E         	movff	___altoft@c,___ftpack@arg
  3559   002580  C029  F00F         	movff	___altoft@c+1,___ftpack@arg+1
  3560   002584  C02A  F010         	movff	___altoft@c+2,___ftpack@arg+2
  3561   002588  C030  F011         	movff	___altoft@exp,___ftpack@exp
  3562   00258C  C031  F012         	movff	___altoft@sign,___ftpack@sign
  3563   002590  EC9C  F010         	call	___ftpack	;wreg free
  3564   002594  C00E  F028         	movff	?___ftpack,?___altoft
  3565   002598  C00F  F029         	movff	?___ftpack+1,?___altoft+1
  3566   00259C  C010  F02A         	movff	?___ftpack+2,?___altoft+2
  3567   0025A0  0012               	return		;funcret
  3568   0025A2                     __end_of___altoft:
  3569                           	callstack 0
  3570                           
  3571 ;; *************** function _eval_poly *****************
  3572 ;; Defined at:
  3573 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\evalpoly.c"
  3574 ;; Parameters:    Size  Location     Type
  3575 ;;  x               3   52[COMRAM] float 
  3576 ;;  d               1   55[COMRAM] PTR const 
  3577 ;;		 -> log@coeff(27), exp@coeff(30), 
  3578 ;;  n               2   56[COMRAM] int 
  3579 ;; Auto vars:     Size  Location     Type
  3580 ;;  res             3   59[COMRAM] int 
  3581 ;; Return value:  Size  Location     Type
  3582 ;;                  3   52[COMRAM] int 
  3583 ;; Registers used:
  3584 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3585 ;; Tracked objects:
  3586 ;;		On entry : 0/0
  3587 ;;		On exit  : 0/0
  3588 ;;		Unchanged: 0/0
  3589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3590 ;;      Params:         6       0       0       0       0       0       0       0       0
  3591 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3592 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3593 ;;      Totals:        10       0       0       0       0       0       0       0       0
  3594 ;;Total ram usage:       10 bytes
  3595 ;; Hardware stack levels used: 1
  3596 ;; Hardware stack levels required when called: 7
  3597 ;; This function calls:
  3598 ;;		___ftadd
  3599 ;;		___ftmul
  3600 ;; This function is called by:
  3601 ;;		_exp
  3602 ;;		_log
  3603 ;; This function uses a non-reentrant model
  3604 ;;
  3605                           
  3606                           	psect	text10
  3607   0021E6                     __ptext10:
  3608                           	callstack 0
  3609   0021E6                     _eval_poly:
  3610                           	callstack 21
  3611                           
  3612                           ;incstack = 0
  3613   0021E6  5039               	movf	eval_poly@n^0,w,c
  3614   0021E8  0D03               	mullw	3
  3615   0021EA  5038               	movf	eval_poly@d^0,w,c
  3616   0021EC  24F3               	addwf	243,w,c
  3617   0021EE  6E3B               	movwf	??_eval_poly^0,c
  3618   0021F0  C03B  FFF6         	movff	??_eval_poly,tblptrl
  3619   0021F4                     	if	1	;There is more than 1 active tblptr byte
  3620   0021F4  0E08               	movlw	high __smallconst
  3621   0021F6  6EF7               	movwf	tblptrh,c
  3622   0021F8                     	endif
  3623   0021F8                     	if	0	;tblptru may be non-zero
  3624   0021F8                     	endif
  3625   0021F8                     	if	0	;tblptru may be non-zero
  3626   0021F8                     	endif
  3627   0021F8  0009               	tblrd		*+
  3628   0021FA  CFF5 F03C          	movff	tablat,eval_poly@res
  3629   0021FE  0009               	tblrd		*+
  3630   002200  CFF5 F03D          	movff	tablat,eval_poly@res+1
  3631   002204  000A               	tblrd		*-
  3632   002206  CFF5 F03E          	movff	tablat,eval_poly@res+2
  3633   00220A  D031               	goto	l4479
  3634   00220C                     l4477:
  3635   00220C  C03C  F01D         	movff	eval_poly@res,___ftmul@f2
  3636   002210  C03D  F01E         	movff	eval_poly@res+1,___ftmul@f2+1
  3637   002214  C03E  F01F         	movff	eval_poly@res+2,___ftmul@f2+2
  3638   002218  C035  F01A         	movff	eval_poly@x,___ftmul@f1
  3639   00221C  C036  F01B         	movff	eval_poly@x+1,___ftmul@f1+1
  3640   002220  C037  F01C         	movff	eval_poly@x+2,___ftmul@f1+2
  3641   002224  EC0D  F00E         	call	___ftmul	;wreg free
  3642   002228  C01A  F029         	movff	?___ftmul,___ftadd@f1
  3643   00222C  C01B  F02A         	movff	?___ftmul+1,___ftadd@f1+1
  3644   002230  C01C  F02B         	movff	?___ftmul+2,___ftadd@f1+2
  3645   002234  0639               	decf	eval_poly@n^0,f,c
  3646   002236  A0D8               	btfss	status,0,c
  3647   002238  063A               	decf	(eval_poly@n+1)^0,f,c
  3648   00223A  5039               	movf	eval_poly@n^0,w,c
  3649   00223C  0D03               	mullw	3
  3650   00223E  5038               	movf	eval_poly@d^0,w,c
  3651   002240  24F3               	addwf	243,w,c
  3652   002242  6E3B               	movwf	??_eval_poly^0,c
  3653   002244  C03B  FFF6         	movff	??_eval_poly,tblptrl
  3654   002248                     	if	1	;There is more than 1 active tblptr byte
  3655   002248  0E08               	movlw	high __smallconst
  3656   00224A  6EF7               	movwf	tblptrh,c
  3657   00224C                     	endif
  3658   00224C                     	if	0	;tblptru may be non-zero
  3659   00224C                     	endif
  3660   00224C                     	if	0	;tblptru may be non-zero
  3661   00224C                     	endif
  3662   00224C  0009               	tblrd		*+
  3663   00224E  CFF5 F02C          	movff	tablat,___ftadd@f2
  3664   002252  0009               	tblrd		*+
  3665   002254  CFF5 F02D          	movff	tablat,___ftadd@f2+1
  3666   002258  000A               	tblrd		*-
  3667   00225A  CFF5 F02E          	movff	tablat,___ftadd@f2+2
  3668   00225E  ECF2  F00B         	call	___ftadd	;wreg free
  3669   002262  C029  F03C         	movff	?___ftadd,eval_poly@res
  3670   002266  C02A  F03D         	movff	?___ftadd+1,eval_poly@res+1
  3671   00226A  C02B  F03E         	movff	?___ftadd+2,eval_poly@res+2
  3672   00226E                     l4479:
  3673   00226E  5039               	movf	eval_poly@n^0,w,c
  3674   002270  103A               	iorwf	(eval_poly@n+1)^0,w,c
  3675   002272  A4D8               	btfss	status,2,c
  3676   002274  D7CB               	goto	l4477
  3677   002276  C03C  F035         	movff	eval_poly@res,?_eval_poly
  3678   00227A  C03D  F036         	movff	eval_poly@res+1,?_eval_poly+1
  3679   00227E  C03E  F037         	movff	eval_poly@res+2,?_eval_poly+2
  3680   002282  0012               	return		;funcret
  3681   002284                     __end_of_eval_poly:
  3682                           	callstack 0
  3683                           
  3684 ;; *************** function ___ftmul *****************
  3685 ;; Defined at:
  3686 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\ftmul.c"
  3687 ;; Parameters:    Size  Location     Type
  3688 ;;  f1              3   25[COMRAM] float 
  3689 ;;  f2              3   28[COMRAM] float 
  3690 ;; Auto vars:     Size  Location     Type
  3691 ;;  f3_as_produc    3   35[COMRAM] unsigned um
  3692 ;;  sign            1   39[COMRAM] unsigned char 
  3693 ;;  cntr            1   38[COMRAM] unsigned char 
  3694 ;;  exp             1   34[COMRAM] unsigned char 
  3695 ;; Return value:  Size  Location     Type
  3696 ;;                  3   25[COMRAM] float 
  3697 ;; Registers used:
  3698 ;;		wreg, status,2, status,0, cstack
  3699 ;; Tracked objects:
  3700 ;;		On entry : 0/0
  3701 ;;		On exit  : 0/0
  3702 ;;		Unchanged: 0/0
  3703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3704 ;;      Params:         6       0       0       0       0       0       0       0       0
  3705 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3706 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3707 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3708 ;;Total ram usage:       15 bytes
  3709 ;; Hardware stack levels used: 1
  3710 ;; Hardware stack levels required when called: 6
  3711 ;; This function calls:
  3712 ;;		___ftpack
  3713 ;; This function is called by:
  3714 ;;		_pow
  3715 ;;		_exp
  3716 ;;		_eval_poly
  3717 ;;		_log
  3718 ;; This function uses a non-reentrant model
  3719 ;;
  3720                           
  3721                           	psect	text11
  3722   001C1A                     __ptext11:
  3723                           	callstack 0
  3724   001C1A                     ___ftmul:
  3725                           	callstack 21
  3726                           
  3727                           ;incstack = 0
  3728   001C1A  C01C  F020         	movff	___ftmul@f1+2,??___ftmul
  3729   001C1E  6A21               	clrf	(??___ftmul+1)^0,c
  3730   001C20  6A22               	clrf	(??___ftmul+2)^0,c
  3731   001C22  341B               	rlcf	(___ftmul@f1+1)^0,w,c
  3732   001C24  3620               	rlcf	??___ftmul^0,f,c
  3733   001C26  E301               	bnc	u5181
  3734   001C28  8021               	bsf	(??___ftmul+1)^0,0,c
  3735   001C2A                     u5181:
  3736   001C2A  5020               	movf	??___ftmul^0,w,c
  3737   001C2C  6E23               	movwf	___ftmul@exp^0,c
  3738   001C2E  5023               	movf	___ftmul@exp^0,w,c
  3739   001C30  A4D8               	btfss	status,2,c
  3740   001C32  D007               	goto	l4255
  3741   001C34  0E00               	movlw	0
  3742   001C36  6E1A               	movwf	?___ftmul^0,c
  3743   001C38  0E00               	movlw	0
  3744   001C3A  6E1B               	movwf	(?___ftmul+1)^0,c
  3745   001C3C  0E00               	movlw	0
  3746   001C3E  6E1C               	movwf	(?___ftmul+2)^0,c
  3747   001C40  0012               	return	
  3748   001C42                     l4255:
  3749   001C42  C01F  F020         	movff	___ftmul@f2+2,??___ftmul
  3750   001C46  6A21               	clrf	(??___ftmul+1)^0,c
  3751   001C48  6A22               	clrf	(??___ftmul+2)^0,c
  3752   001C4A  341E               	rlcf	(___ftmul@f2+1)^0,w,c
  3753   001C4C  3620               	rlcf	??___ftmul^0,f,c
  3754   001C4E  E301               	bnc	u5201
  3755   001C50  8021               	bsf	(??___ftmul+1)^0,0,c
  3756   001C52                     u5201:
  3757   001C52  5020               	movf	??___ftmul^0,w,c
  3758   001C54  6E28               	movwf	___ftmul@sign^0,c
  3759   001C56  5028               	movf	___ftmul@sign^0,w,c
  3760   001C58  A4D8               	btfss	status,2,c
  3761   001C5A  D007               	goto	l4261
  3762   001C5C  0E00               	movlw	0
  3763   001C5E  6E1A               	movwf	?___ftmul^0,c
  3764   001C60  0E00               	movlw	0
  3765   001C62  6E1B               	movwf	(?___ftmul+1)^0,c
  3766   001C64  0E00               	movlw	0
  3767   001C66  6E1C               	movwf	(?___ftmul+2)^0,c
  3768   001C68  0012               	return	
  3769   001C6A                     l4261:
  3770   001C6A  5028               	movf	___ftmul@sign^0,w,c
  3771   001C6C  0F7B               	addlw	123
  3772   001C6E  2623               	addwf	___ftmul@exp^0,f,c
  3773   001C70  C01C  F028         	movff	___ftmul@f1+2,___ftmul@sign
  3774   001C74  501F               	movf	(___ftmul@f2+2)^0,w,c
  3775   001C76  1A28               	xorwf	___ftmul@sign^0,f,c
  3776   001C78  0E80               	movlw	128
  3777   001C7A  1628               	andwf	___ftmul@sign^0,f,c
  3778   001C7C  8E1B               	bsf	(___ftmul@f1+1)^0,7,c
  3779   001C7E  8E1E               	bsf	(___ftmul@f2+1)^0,7,c
  3780   001C80  0EFF               	movlw	255
  3781   001C82  161D               	andwf	___ftmul@f2^0,f,c
  3782   001C84  0EFF               	movlw	255
  3783   001C86  161E               	andwf	(___ftmul@f2+1)^0,f,c
  3784   001C88  0E00               	movlw	0
  3785   001C8A  161F               	andwf	(___ftmul@f2+2)^0,f,c
  3786   001C8C  0E00               	movlw	0
  3787   001C8E  6E24               	movwf	___ftmul@f3_as_product^0,c
  3788   001C90  0E00               	movlw	0
  3789   001C92  6E25               	movwf	(___ftmul@f3_as_product+1)^0,c
  3790   001C94  0E00               	movlw	0
  3791   001C96  6E26               	movwf	(___ftmul@f3_as_product+2)^0,c
  3792   001C98  0E07               	movlw	7
  3793   001C9A  6E27               	movwf	___ftmul@cntr^0,c
  3794   001C9C                     l4275:
  3795   001C9C  A01A               	btfss	___ftmul@f1^0,0,c
  3796   001C9E  D006               	goto	l4279
  3797   001CA0  501D               	movf	___ftmul@f2^0,w,c
  3798   001CA2  2624               	addwf	___ftmul@f3_as_product^0,f,c
  3799   001CA4  501E               	movf	(___ftmul@f2+1)^0,w,c
  3800   001CA6  2225               	addwfc	(___ftmul@f3_as_product+1)^0,f,c
  3801   001CA8  501F               	movf	(___ftmul@f2+2)^0,w,c
  3802   001CAA  2226               	addwfc	(___ftmul@f3_as_product+2)^0,f,c
  3803   001CAC                     l4279:
  3804   001CAC  90D8               	bcf	status,0,c
  3805   001CAE  321C               	rrcf	(___ftmul@f1+2)^0,f,c
  3806   001CB0  321B               	rrcf	(___ftmul@f1+1)^0,f,c
  3807   001CB2  321A               	rrcf	___ftmul@f1^0,f,c
  3808   001CB4  90D8               	bcf	status,0,c
  3809   001CB6  361D               	rlcf	___ftmul@f2^0,f,c
  3810   001CB8  361E               	rlcf	(___ftmul@f2+1)^0,f,c
  3811   001CBA  361F               	rlcf	(___ftmul@f2+2)^0,f,c
  3812   001CBC  2E27               	decfsz	___ftmul@cntr^0,f,c
  3813   001CBE  D7EE               	goto	l4275
  3814   001CC0  0E09               	movlw	9
  3815   001CC2  6E27               	movwf	___ftmul@cntr^0,c
  3816   001CC4                     l4285:
  3817   001CC4  A01A               	btfss	___ftmul@f1^0,0,c
  3818   001CC6  D006               	goto	l4289
  3819   001CC8  501D               	movf	___ftmul@f2^0,w,c
  3820   001CCA  2624               	addwf	___ftmul@f3_as_product^0,f,c
  3821   001CCC  501E               	movf	(___ftmul@f2+1)^0,w,c
  3822   001CCE  2225               	addwfc	(___ftmul@f3_as_product+1)^0,f,c
  3823   001CD0  501F               	movf	(___ftmul@f2+2)^0,w,c
  3824   001CD2  2226               	addwfc	(___ftmul@f3_as_product+2)^0,f,c
  3825   001CD4                     l4289:
  3826   001CD4  90D8               	bcf	status,0,c
  3827   001CD6  321C               	rrcf	(___ftmul@f1+2)^0,f,c
  3828   001CD8  321B               	rrcf	(___ftmul@f1+1)^0,f,c
  3829   001CDA  321A               	rrcf	___ftmul@f1^0,f,c
  3830   001CDC  90D8               	bcf	status,0,c
  3831   001CDE  3226               	rrcf	(___ftmul@f3_as_product+2)^0,f,c
  3832   001CE0  3225               	rrcf	(___ftmul@f3_as_product+1)^0,f,c
  3833   001CE2  3224               	rrcf	___ftmul@f3_as_product^0,f,c
  3834   001CE4  2E27               	decfsz	___ftmul@cntr^0,f,c
  3835   001CE6  D7EE               	goto	l4285
  3836   001CE8  C024  F00E         	movff	___ftmul@f3_as_product,___ftpack@arg
  3837   001CEC  C025  F00F         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3838   001CF0  C026  F010         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3839   001CF4  C023  F011         	movff	___ftmul@exp,___ftpack@exp
  3840   001CF8  C028  F012         	movff	___ftmul@sign,___ftpack@sign
  3841   001CFC  EC9C  F010         	call	___ftpack	;wreg free
  3842   001D00  C00E  F01A         	movff	?___ftpack,?___ftmul
  3843   001D04  C00F  F01B         	movff	?___ftpack+1,?___ftmul+1
  3844   001D08  C010  F01C         	movff	?___ftpack+2,?___ftmul+2
  3845   001D0C  0012               	return		;funcret
  3846   001D0E                     __end_of___ftmul:
  3847                           	callstack 0
  3848                           
  3849 ;; *************** function ___ftsub *****************
  3850 ;; Defined at:
  3851 ;;		line 19 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\ftsub.c"
  3852 ;; Parameters:    Size  Location     Type
  3853 ;;  f1              3   52[COMRAM] float 
  3854 ;;  f2              3   55[COMRAM] float 
  3855 ;; Auto vars:     Size  Location     Type
  3856 ;;		None
  3857 ;; Return value:  Size  Location     Type
  3858 ;;                  3   52[COMRAM] float 
  3859 ;; Registers used:
  3860 ;;		wreg, status,2, status,0, cstack
  3861 ;; Tracked objects:
  3862 ;;		On entry : 0/0
  3863 ;;		On exit  : 0/0
  3864 ;;		Unchanged: 0/0
  3865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3866 ;;      Params:         6       0       0       0       0       0       0       0       0
  3867 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3868 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3869 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3870 ;;Total ram usage:        6 bytes
  3871 ;; Hardware stack levels used: 1
  3872 ;; Hardware stack levels required when called: 7
  3873 ;; This function calls:
  3874 ;;		___ftadd
  3875 ;; This function is called by:
  3876 ;;		_exp
  3877 ;; This function uses a non-reentrant model
  3878 ;;
  3879                           
  3880                           	psect	text12
  3881   002A44                     __ptext12:
  3882                           	callstack 0
  3883   002A44                     ___ftsub:
  3884                           	callstack 21
  3885                           
  3886                           ;incstack = 0
  3887   002A44  5038               	movf	___ftsub@f2^0,w,c
  3888   002A46  1039               	iorwf	(___ftsub@f2+1)^0,w,c
  3889   002A48  103A               	iorwf	(___ftsub@f2+2)^0,w,c
  3890   002A4A  B4D8               	btfsc	status,2,c
  3891   002A4C  D006               	goto	l4431
  3892   002A4E  0E00               	movlw	0
  3893   002A50  1A38               	xorwf	___ftsub@f2^0,f,c
  3894   002A52  0E00               	movlw	0
  3895   002A54  1A39               	xorwf	(___ftsub@f2+1)^0,f,c
  3896   002A56  0E80               	movlw	128
  3897   002A58  1A3A               	xorwf	(___ftsub@f2+2)^0,f,c
  3898   002A5A                     l4431:
  3899   002A5A  C035  F029         	movff	___ftsub@f1,___ftadd@f1
  3900   002A5E  C036  F02A         	movff	___ftsub@f1+1,___ftadd@f1+1
  3901   002A62  C037  F02B         	movff	___ftsub@f1+2,___ftadd@f1+2
  3902   002A66  C038  F02C         	movff	___ftsub@f2,___ftadd@f2
  3903   002A6A  C039  F02D         	movff	___ftsub@f2+1,___ftadd@f2+1
  3904   002A6E  C03A  F02E         	movff	___ftsub@f2+2,___ftadd@f2+2
  3905   002A72  ECF2  F00B         	call	___ftadd	;wreg free
  3906   002A76  C029  F035         	movff	?___ftadd,?___ftsub
  3907   002A7A  C02A  F036         	movff	?___ftadd+1,?___ftsub+1
  3908   002A7E  C02B  F037         	movff	?___ftadd+2,?___ftsub+2
  3909   002A82  0012               	return		;funcret
  3910   002A84                     __end_of___ftsub:
  3911                           	callstack 0
  3912                           
  3913 ;; *************** function ___ftadd *****************
  3914 ;; Defined at:
  3915 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\ftadd.c"
  3916 ;; Parameters:    Size  Location     Type
  3917 ;;  f1              3   40[COMRAM] float 
  3918 ;;  f2              3   43[COMRAM] float 
  3919 ;; Auto vars:     Size  Location     Type
  3920 ;;  exp1            1   51[COMRAM] unsigned char 
  3921 ;;  exp2            1   50[COMRAM] unsigned char 
  3922 ;;  sign            1   49[COMRAM] unsigned char 
  3923 ;; Return value:  Size  Location     Type
  3924 ;;                  3   40[COMRAM] float 
  3925 ;; Registers used:
  3926 ;;		wreg, status,2, status,0, cstack
  3927 ;; Tracked objects:
  3928 ;;		On entry : 0/0
  3929 ;;		On exit  : 0/0
  3930 ;;		Unchanged: 0/0
  3931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3932 ;;      Params:         6       0       0       0       0       0       0       0       0
  3933 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3934 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3935 ;;      Totals:        12       0       0       0       0       0       0       0       0
  3936 ;;Total ram usage:       12 bytes
  3937 ;; Hardware stack levels used: 1
  3938 ;; Hardware stack levels required when called: 6
  3939 ;; This function calls:
  3940 ;;		___ftpack
  3941 ;; This function is called by:
  3942 ;;		___ftsub
  3943 ;;		_eval_poly
  3944 ;;		_floor
  3945 ;;		_log
  3946 ;; This function uses a non-reentrant model
  3947 ;;
  3948                           
  3949                           	psect	text13
  3950   0017E4                     __ptext13:
  3951                           	callstack 0
  3952   0017E4                     ___ftadd:
  3953                           	callstack 21
  3954                           
  3955                           ;incstack = 0
  3956   0017E4  C02B  F02F         	movff	___ftadd@f1+2,??___ftadd
  3957   0017E8  6A30               	clrf	(??___ftadd+1)^0,c
  3958   0017EA  6A31               	clrf	(??___ftadd+2)^0,c
  3959   0017EC  342A               	rlcf	(___ftadd@f1+1)^0,w,c
  3960   0017EE  362F               	rlcf	??___ftadd^0,f,c
  3961   0017F0  E301               	bnc	u4971
  3962   0017F2  8030               	bsf	(??___ftadd+1)^0,0,c
  3963   0017F4                     u4971:
  3964   0017F4  502F               	movf	??___ftadd^0,w,c
  3965   0017F6  6E34               	movwf	___ftadd@exp1^0,c
  3966   0017F8  C02E  F02F         	movff	___ftadd@f2+2,??___ftadd
  3967   0017FC  6A30               	clrf	(??___ftadd+1)^0,c
  3968   0017FE  6A31               	clrf	(??___ftadd+2)^0,c
  3969   001800  342D               	rlcf	(___ftadd@f2+1)^0,w,c
  3970   001802  362F               	rlcf	??___ftadd^0,f,c
  3971   001804  E301               	bnc	u4981
  3972   001806  8030               	bsf	(??___ftadd+1)^0,0,c
  3973   001808                     u4981:
  3974   001808  502F               	movf	??___ftadd^0,w,c
  3975   00180A  6E33               	movwf	___ftadd@exp2^0,c
  3976   00180C  5034               	movf	___ftadd@exp1^0,w,c
  3977   00180E  B4D8               	btfsc	status,2,c
  3978   001810  D00A               	goto	u5010
  3979   001812  5033               	movf	___ftadd@exp2^0,w,c
  3980   001814  5C34               	subwf	___ftadd@exp1^0,w,c
  3981   001816  B0D8               	btfsc	status,0,c
  3982   001818  D00D               	goto	l4187
  3983   00181A  5034               	movf	___ftadd@exp1^0,w,c
  3984   00181C  5C33               	subwf	___ftadd@exp2^0,w,c
  3985   00181E  6E2F               	movwf	??___ftadd^0,c
  3986   001820  0E18               	movlw	24
  3987   001822  642F               	cpfsgt	??___ftadd^0,c
  3988   001824  D007               	goto	l4187
  3989   001826                     u5010:
  3990   001826  C02C  F029         	movff	___ftadd@f2,?___ftadd
  3991   00182A  C02D  F02A         	movff	___ftadd@f2+1,?___ftadd+1
  3992   00182E  C02E  F02B         	movff	___ftadd@f2+2,?___ftadd+2
  3993   001832  0012               	return	
  3994   001834                     l4187:
  3995   001834  5033               	movf	___ftadd@exp2^0,w,c
  3996   001836  B4D8               	btfsc	status,2,c
  3997   001838  D00A               	goto	u5040
  3998   00183A  5034               	movf	___ftadd@exp1^0,w,c
  3999   00183C  5C33               	subwf	___ftadd@exp2^0,w,c
  4000   00183E  B0D8               	btfsc	status,0,c
  4001   001840  D00D               	goto	l4193
  4002   001842  5033               	movf	___ftadd@exp2^0,w,c
  4003   001844  5C34               	subwf	___ftadd@exp1^0,w,c
  4004   001846  6E2F               	movwf	??___ftadd^0,c
  4005   001848  0E18               	movlw	24
  4006   00184A  642F               	cpfsgt	??___ftadd^0,c
  4007   00184C  D007               	goto	l4193
  4008   00184E                     u5040:
  4009   00184E  C029  F029         	movff	___ftadd@f1,?___ftadd
  4010   001852  C02A  F02A         	movff	___ftadd@f1+1,?___ftadd+1
  4011   001856  C02B  F02B         	movff	___ftadd@f1+2,?___ftadd+2
  4012   00185A  0012               	return	
  4013   00185C                     l4193:
  4014   00185C  0E06               	movlw	6
  4015   00185E  6E32               	movwf	___ftadd@sign^0,c
  4016   001860  BE2B               	btfsc	(___ftadd@f1+2)^0,7,c
  4017   001862  8E32               	bsf	___ftadd@sign^0,7,c
  4018   001864  BE2E               	btfsc	(___ftadd@f2+2)^0,7,c
  4019   001866  8C32               	bsf	___ftadd@sign^0,6,c
  4020   001868  8E2A               	bsf	(___ftadd@f1+1)^0,7,c
  4021   00186A  0EFF               	movlw	255
  4022   00186C  1629               	andwf	___ftadd@f1^0,f,c
  4023   00186E  0EFF               	movlw	255
  4024   001870  162A               	andwf	(___ftadd@f1+1)^0,f,c
  4025   001872  0E00               	movlw	0
  4026   001874  162B               	andwf	(___ftadd@f1+2)^0,f,c
  4027   001876  8E2D               	bsf	(___ftadd@f2+1)^0,7,c
  4028   001878  0EFF               	movlw	255
  4029   00187A  162C               	andwf	___ftadd@f2^0,f,c
  4030   00187C  0EFF               	movlw	255
  4031   00187E  162D               	andwf	(___ftadd@f2+1)^0,f,c
  4032   001880  0E00               	movlw	0
  4033   001882  162E               	andwf	(___ftadd@f2+2)^0,f,c
  4034   001884  5033               	movf	___ftadd@exp2^0,w,c
  4035   001886  5C34               	subwf	___ftadd@exp1^0,w,c
  4036   001888  B0D8               	btfsc	status,0,c
  4037   00188A  D01B               	goto	l4219
  4038   00188C                     u5070:
  4039   00188C  90D8               	bcf	status,0,c
  4040   00188E  362C               	rlcf	___ftadd@f2^0,f,c
  4041   001890  362D               	rlcf	(___ftadd@f2+1)^0,f,c
  4042   001892  362E               	rlcf	(___ftadd@f2+2)^0,f,c
  4043   001894  0633               	decf	___ftadd@exp2^0,f,c
  4044   001896  5034               	movf	___ftadd@exp1^0,w,c
  4045   001898  1833               	xorwf	___ftadd@exp2^0,w,c
  4046   00189A  B4D8               	btfsc	status,2,c
  4047   00189C  D00D               	goto	l4217
  4048   00189E  0632               	decf	___ftadd@sign^0,f,c
  4049   0018A0  C032  F02F         	movff	___ftadd@sign,??___ftadd
  4050   0018A4  0E07               	movlw	7
  4051   0018A6  162F               	andwf	??___ftadd^0,f,c
  4052   0018A8  B4D8               	btfsc	status,2,c
  4053   0018AA  D006               	goto	l4217
  4054   0018AC  D7EF               	goto	u5070
  4055   0018AE                     l4215:
  4056   0018AE  90D8               	bcf	status,0,c
  4057   0018B0  322B               	rrcf	(___ftadd@f1+2)^0,f,c
  4058   0018B2  322A               	rrcf	(___ftadd@f1+1)^0,f,c
  4059   0018B4  3229               	rrcf	___ftadd@f1^0,f,c
  4060   0018B6  2A34               	incf	___ftadd@exp1^0,f,c
  4061   0018B8                     l4217:
  4062   0018B8  5033               	movf	___ftadd@exp2^0,w,c
  4063   0018BA  1834               	xorwf	___ftadd@exp1^0,w,c
  4064   0018BC  B4D8               	btfsc	status,2,c
  4065   0018BE  D01F               	goto	u5140
  4066   0018C0  D7F6               	goto	l4215
  4067   0018C2                     l4219:
  4068   0018C2  5034               	movf	___ftadd@exp1^0,w,c
  4069   0018C4  5C33               	subwf	___ftadd@exp2^0,w,c
  4070   0018C6  B0D8               	btfsc	status,0,c
  4071   0018C8  D01A               	goto	u5140
  4072   0018CA                     u5110:
  4073   0018CA  90D8               	bcf	status,0,c
  4074   0018CC  3629               	rlcf	___ftadd@f1^0,f,c
  4075   0018CE  362A               	rlcf	(___ftadd@f1+1)^0,f,c
  4076   0018D0  362B               	rlcf	(___ftadd@f1+2)^0,f,c
  4077   0018D2  0634               	decf	___ftadd@exp1^0,f,c
  4078   0018D4  5034               	movf	___ftadd@exp1^0,w,c
  4079   0018D6  1833               	xorwf	___ftadd@exp2^0,w,c
  4080   0018D8  B4D8               	btfsc	status,2,c
  4081   0018DA  D00D               	goto	l4229
  4082   0018DC  0632               	decf	___ftadd@sign^0,f,c
  4083   0018DE  C032  F02F         	movff	___ftadd@sign,??___ftadd
  4084   0018E2  0E07               	movlw	7
  4085   0018E4  162F               	andwf	??___ftadd^0,f,c
  4086   0018E6  B4D8               	btfsc	status,2,c
  4087   0018E8  D006               	goto	l4229
  4088   0018EA  D7EF               	goto	u5110
  4089   0018EC                     l4227:
  4090   0018EC  90D8               	bcf	status,0,c
  4091   0018EE  322E               	rrcf	(___ftadd@f2+2)^0,f,c
  4092   0018F0  322D               	rrcf	(___ftadd@f2+1)^0,f,c
  4093   0018F2  322C               	rrcf	___ftadd@f2^0,f,c
  4094   0018F4  2A33               	incf	___ftadd@exp2^0,f,c
  4095   0018F6                     l4229:
  4096   0018F6  5033               	movf	___ftadd@exp2^0,w,c
  4097   0018F8  1834               	xorwf	___ftadd@exp1^0,w,c
  4098   0018FA  A4D8               	btfss	status,2,c
  4099   0018FC  D7F7               	goto	l4227
  4100   0018FE                     u5140:
  4101   0018FE  AE32               	btfss	___ftadd@sign^0,7,c
  4102   001900  D00C               	goto	l675
  4103   001902  0EFF               	movlw	255
  4104   001904  1A29               	xorwf	___ftadd@f1^0,f,c
  4105   001906  0EFF               	movlw	255
  4106   001908  1A2A               	xorwf	(___ftadd@f1+1)^0,f,c
  4107   00190A  0EFF               	movlw	255
  4108   00190C  1A2B               	xorwf	(___ftadd@f1+2)^0,f,c
  4109   00190E  0E01               	movlw	1
  4110   001910  2629               	addwf	___ftadd@f1^0,f,c
  4111   001912  0E00               	movlw	0
  4112   001914  222A               	addwfc	(___ftadd@f1+1)^0,f,c
  4113   001916  0E00               	movlw	0
  4114   001918  222B               	addwfc	(___ftadd@f1+2)^0,f,c
  4115   00191A                     l675:
  4116   00191A  AC32               	btfss	___ftadd@sign^0,6,c
  4117   00191C  D00C               	goto	l4235
  4118   00191E  0EFF               	movlw	255
  4119   001920  1A2C               	xorwf	___ftadd@f2^0,f,c
  4120   001922  0EFF               	movlw	255
  4121   001924  1A2D               	xorwf	(___ftadd@f2+1)^0,f,c
  4122   001926  0EFF               	movlw	255
  4123   001928  1A2E               	xorwf	(___ftadd@f2+2)^0,f,c
  4124   00192A  0E01               	movlw	1
  4125   00192C  262C               	addwf	___ftadd@f2^0,f,c
  4126   00192E  0E00               	movlw	0
  4127   001930  222D               	addwfc	(___ftadd@f2+1)^0,f,c
  4128   001932  0E00               	movlw	0
  4129   001934  222E               	addwfc	(___ftadd@f2+2)^0,f,c
  4130   001936                     l4235:
  4131   001936  0E00               	movlw	0
  4132   001938  6E32               	movwf	___ftadd@sign^0,c
  4133   00193A  5029               	movf	___ftadd@f1^0,w,c
  4134   00193C  262C               	addwf	___ftadd@f2^0,f,c
  4135   00193E  502A               	movf	(___ftadd@f1+1)^0,w,c
  4136   001940  222D               	addwfc	(___ftadd@f2+1)^0,f,c
  4137   001942  502B               	movf	(___ftadd@f1+2)^0,w,c
  4138   001944  222E               	addwfc	(___ftadd@f2+2)^0,f,c
  4139   001946  AE2E               	btfss	(___ftadd@f2+2)^0,7,c
  4140   001948  D00E               	goto	l4245
  4141   00194A  0EFF               	movlw	255
  4142   00194C  1A2C               	xorwf	___ftadd@f2^0,f,c
  4143   00194E  0EFF               	movlw	255
  4144   001950  1A2D               	xorwf	(___ftadd@f2+1)^0,f,c
  4145   001952  0EFF               	movlw	255
  4146   001954  1A2E               	xorwf	(___ftadd@f2+2)^0,f,c
  4147   001956  0E01               	movlw	1
  4148   001958  262C               	addwf	___ftadd@f2^0,f,c
  4149   00195A  0E00               	movlw	0
  4150   00195C  222D               	addwfc	(___ftadd@f2+1)^0,f,c
  4151   00195E  0E00               	movlw	0
  4152   001960  222E               	addwfc	(___ftadd@f2+2)^0,f,c
  4153   001962  0E01               	movlw	1
  4154   001964  6E32               	movwf	___ftadd@sign^0,c
  4155   001966                     l4245:
  4156   001966  C02C  F00E         	movff	___ftadd@f2,___ftpack@arg
  4157   00196A  C02D  F00F         	movff	___ftadd@f2+1,___ftpack@arg+1
  4158   00196E  C02E  F010         	movff	___ftadd@f2+2,___ftpack@arg+2
  4159   001972  C034  F011         	movff	___ftadd@exp1,___ftpack@exp
  4160   001976  C032  F012         	movff	___ftadd@sign,___ftpack@sign
  4161   00197A  EC9C  F010         	call	___ftpack	;wreg free
  4162   00197E  C00E  F029         	movff	?___ftpack,?___ftadd
  4163   001982  C00F  F02A         	movff	?___ftpack+1,?___ftadd+1
  4164   001986  C010  F02B         	movff	?___ftpack+2,?___ftadd+2
  4165   00198A  0012               	return		;funcret
  4166   00198C                     __end_of___ftadd:
  4167                           	callstack 0
  4168                           
  4169 ;; *************** function ___ftneg *****************
  4170 ;; Defined at:
  4171 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\ftneg.c"
  4172 ;; Parameters:    Size  Location     Type
  4173 ;;  f1              3   13[COMRAM] float 
  4174 ;; Auto vars:     Size  Location     Type
  4175 ;;		None
  4176 ;; Return value:  Size  Location     Type
  4177 ;;                  3   13[COMRAM] float 
  4178 ;; Registers used:
  4179 ;;		wreg, status,2, status,0
  4180 ;; Tracked objects:
  4181 ;;		On entry : 3F/0
  4182 ;;		On exit  : 3F/0
  4183 ;;		Unchanged: 3F/0
  4184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4185 ;;      Params:         3       0       0       0       0       0       0       0       0
  4186 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4187 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4188 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4189 ;;Total ram usage:        3 bytes
  4190 ;; Hardware stack levels used: 1
  4191 ;; Hardware stack levels required when called: 5
  4192 ;; This function calls:
  4193 ;;		Nothing
  4194 ;; This function is called by:
  4195 ;;		_pow
  4196 ;;		_exp
  4197 ;; This function uses a non-reentrant model
  4198 ;;
  4199                           
  4200                           	psect	text14
  4201   002AE2                     __ptext14:
  4202                           	callstack 0
  4203   002AE2                     ___ftneg:
  4204                           	callstack 23
  4205                           
  4206                           ; BSR set to: 0
  4207                           
  4208                           ;incstack = 0
  4209   002AE2  500E               	movf	___ftneg@f1^0,w,c
  4210   002AE4  100F               	iorwf	(___ftneg@f1+1)^0,w,c
  4211   002AE6  1010               	iorwf	(___ftneg@f1+2)^0,w,c
  4212   002AE8  B4D8               	btfsc	status,2,c
  4213   002AEA  D006               	goto	l708
  4214                           
  4215                           ; BSR set to: 0
  4216   002AEC  0E00               	movlw	0
  4217   002AEE  1A0E               	xorwf	___ftneg@f1^0,f,c
  4218   002AF0  0E00               	movlw	0
  4219   002AF2  1A0F               	xorwf	(___ftneg@f1+1)^0,f,c
  4220   002AF4  0E80               	movlw	128
  4221   002AF6  1A10               	xorwf	(___ftneg@f1+2)^0,f,c
  4222   002AF8                     l708:
  4223                           
  4224                           ; BSR set to: 0
  4225   002AF8  C00E  F00E         	movff	___ftneg@f1,?___ftneg
  4226   002AFC  C00F  F00F         	movff	___ftneg@f1+1,?___ftneg+1
  4227   002B00  C010  F010         	movff	___ftneg@f1+2,?___ftneg+2
  4228                           
  4229                           ; BSR set to: 0
  4230   002B04  0012               	return		;funcret
  4231   002B06                     __end_of___ftneg:
  4232                           	callstack 0
  4233                           
  4234 ;; *************** function ___ftdiv *****************
  4235 ;; Defined at:
  4236 ;;		line 54 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\ftdiv.c"
  4237 ;; Parameters:    Size  Location     Type
  4238 ;;  f1              3   21[COMRAM] float 
  4239 ;;  f2              3   24[COMRAM] float 
  4240 ;; Auto vars:     Size  Location     Type
  4241 ;;  f3              3   31[COMRAM] float 
  4242 ;;  sign            1   35[COMRAM] unsigned char 
  4243 ;;  exp             1   34[COMRAM] unsigned char 
  4244 ;;  cntr            1   30[COMRAM] unsigned char 
  4245 ;; Return value:  Size  Location     Type
  4246 ;;                  3   21[COMRAM] float 
  4247 ;; Registers used:
  4248 ;;		wreg, status,2, status,0, cstack
  4249 ;; Tracked objects:
  4250 ;;		On entry : 3F/0
  4251 ;;		On exit  : 0/0
  4252 ;;		Unchanged: 0/0
  4253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4254 ;;      Params:         6       0       0       0       0       0       0       0       0
  4255 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4256 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4257 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4258 ;;Total ram usage:       15 bytes
  4259 ;; Hardware stack levels used: 1
  4260 ;; Hardware stack levels required when called: 6
  4261 ;; This function calls:
  4262 ;;		___ftpack
  4263 ;; This function is called by:
  4264 ;;		_exp
  4265 ;; This function uses a non-reentrant model
  4266 ;;
  4267                           
  4268                           	psect	text15
  4269   001D0E                     __ptext15:
  4270                           	callstack 0
  4271   001D0E                     ___ftdiv:
  4272                           	callstack 22
  4273                           
  4274                           ; BSR set to: 0
  4275                           
  4276                           ; BSR set to: 0
  4277                           ;incstack = 0
  4278   001D0E  C018  F01C         	movff	___ftdiv@f1+2,??___ftdiv
  4279   001D12  6A1D               	clrf	(??___ftdiv+1)^0,c
  4280   001D14  6A1E               	clrf	(??___ftdiv+2)^0,c
  4281   001D16  3417               	rlcf	(___ftdiv@f1+1)^0,w,c
  4282   001D18  361C               	rlcf	??___ftdiv^0,f,c
  4283   001D1A  E301               	bnc	u5371
  4284   001D1C  801D               	bsf	(??___ftdiv+1)^0,0,c
  4285   001D1E                     u5371:
  4286   001D1E  501C               	movf	??___ftdiv^0,w,c
  4287   001D20  6E23               	movwf	___ftdiv@exp^0,c
  4288   001D22  5023               	movf	___ftdiv@exp^0,w,c
  4289   001D24  A4D8               	btfss	status,2,c
  4290   001D26  D007               	goto	l4387
  4291                           
  4292                           ; BSR set to: 0
  4293   001D28  0E00               	movlw	0
  4294   001D2A  6E16               	movwf	?___ftdiv^0,c
  4295   001D2C  0E00               	movlw	0
  4296   001D2E  6E17               	movwf	(?___ftdiv+1)^0,c
  4297   001D30  0E00               	movlw	0
  4298   001D32  6E18               	movwf	(?___ftdiv+2)^0,c
  4299   001D34  0012               	return	
  4300   001D36                     l4387:
  4301                           
  4302                           ; BSR set to: 0
  4303   001D36  C01B  F01C         	movff	___ftdiv@f2+2,??___ftdiv
  4304   001D3A  6A1D               	clrf	(??___ftdiv+1)^0,c
  4305   001D3C  6A1E               	clrf	(??___ftdiv+2)^0,c
  4306   001D3E  341A               	rlcf	(___ftdiv@f2+1)^0,w,c
  4307   001D40  361C               	rlcf	??___ftdiv^0,f,c
  4308   001D42  E301               	bnc	u5391
  4309   001D44  801D               	bsf	(??___ftdiv+1)^0,0,c
  4310   001D46                     u5391:
  4311   001D46  501C               	movf	??___ftdiv^0,w,c
  4312   001D48  6E24               	movwf	___ftdiv@sign^0,c
  4313   001D4A  5024               	movf	___ftdiv@sign^0,w,c
  4314   001D4C  A4D8               	btfss	status,2,c
  4315   001D4E  D007               	goto	l4393
  4316                           
  4317                           ; BSR set to: 0
  4318   001D50  0E00               	movlw	0
  4319   001D52  6E16               	movwf	?___ftdiv^0,c
  4320   001D54  0E00               	movlw	0
  4321   001D56  6E17               	movwf	(?___ftdiv+1)^0,c
  4322   001D58  0E00               	movlw	0
  4323   001D5A  6E18               	movwf	(?___ftdiv+2)^0,c
  4324   001D5C  0012               	return	
  4325   001D5E                     l4393:
  4326                           
  4327                           ; BSR set to: 0
  4328   001D5E  0E00               	movlw	0
  4329   001D60  6E20               	movwf	___ftdiv@f3^0,c
  4330   001D62  0E00               	movlw	0
  4331   001D64  6E21               	movwf	(___ftdiv@f3+1)^0,c
  4332   001D66  0E00               	movlw	0
  4333   001D68  6E22               	movwf	(___ftdiv@f3+2)^0,c
  4334                           
  4335                           ; BSR set to: 0
  4336   001D6A  5024               	movf	___ftdiv@sign^0,w,c
  4337   001D6C  0F89               	addlw	137
  4338   001D6E  5E23               	subwf	___ftdiv@exp^0,f,c
  4339                           
  4340                           ; BSR set to: 0
  4341   001D70  C018  F024         	movff	___ftdiv@f1+2,___ftdiv@sign
  4342                           
  4343                           ; BSR set to: 0
  4344   001D74  501B               	movf	(___ftdiv@f2+2)^0,w,c
  4345   001D76  1A24               	xorwf	___ftdiv@sign^0,f,c
  4346                           
  4347                           ; BSR set to: 0
  4348   001D78  0E80               	movlw	128
  4349   001D7A  1624               	andwf	___ftdiv@sign^0,f,c
  4350                           
  4351                           ; BSR set to: 0
  4352   001D7C  8E17               	bsf	(___ftdiv@f1+1)^0,7,c
  4353                           
  4354                           ; BSR set to: 0
  4355   001D7E  0EFF               	movlw	255
  4356   001D80  1616               	andwf	___ftdiv@f1^0,f,c
  4357   001D82  0EFF               	movlw	255
  4358   001D84  1617               	andwf	(___ftdiv@f1+1)^0,f,c
  4359   001D86  0E00               	movlw	0
  4360   001D88  1618               	andwf	(___ftdiv@f1+2)^0,f,c
  4361                           
  4362                           ; BSR set to: 0
  4363   001D8A  8E1A               	bsf	(___ftdiv@f2+1)^0,7,c
  4364                           
  4365                           ; BSR set to: 0
  4366   001D8C  0EFF               	movlw	255
  4367   001D8E  1619               	andwf	___ftdiv@f2^0,f,c
  4368   001D90  0EFF               	movlw	255
  4369   001D92  161A               	andwf	(___ftdiv@f2+1)^0,f,c
  4370   001D94  0E00               	movlw	0
  4371   001D96  161B               	andwf	(___ftdiv@f2+2)^0,f,c
  4372                           
  4373                           ; BSR set to: 0
  4374   001D98  0E18               	movlw	24
  4375   001D9A  6E1F               	movwf	___ftdiv@cntr^0,c
  4376   001D9C                     l4413:
  4377                           
  4378                           ; BSR set to: 0
  4379   001D9C  90D8               	bcf	status,0,c
  4380   001D9E  3620               	rlcf	___ftdiv@f3^0,f,c
  4381   001DA0  3621               	rlcf	(___ftdiv@f3+1)^0,f,c
  4382   001DA2  3622               	rlcf	(___ftdiv@f3+2)^0,f,c
  4383                           
  4384                           ; BSR set to: 0
  4385   001DA4  5019               	movf	___ftdiv@f2^0,w,c
  4386   001DA6  5C16               	subwf	___ftdiv@f1^0,w,c
  4387   001DA8  501A               	movf	(___ftdiv@f2+1)^0,w,c
  4388   001DAA  5817               	subwfb	(___ftdiv@f1+1)^0,w,c
  4389   001DAC  501B               	movf	(___ftdiv@f2+2)^0,w,c
  4390   001DAE  5818               	subwfb	(___ftdiv@f1+2)^0,w,c
  4391   001DB0  A0D8               	btfss	status,0,c
  4392   001DB2  D007               	goto	l686
  4393                           
  4394                           ; BSR set to: 0
  4395   001DB4  5019               	movf	___ftdiv@f2^0,w,c
  4396   001DB6  5E16               	subwf	___ftdiv@f1^0,f,c
  4397   001DB8  501A               	movf	(___ftdiv@f2+1)^0,w,c
  4398   001DBA  5A17               	subwfb	(___ftdiv@f1+1)^0,f,c
  4399   001DBC  501B               	movf	(___ftdiv@f2+2)^0,w,c
  4400   001DBE  5A18               	subwfb	(___ftdiv@f1+2)^0,f,c
  4401                           
  4402                           ; BSR set to: 0
  4403   001DC0  8020               	bsf	___ftdiv@f3^0,0,c
  4404   001DC2                     l686:
  4405                           
  4406                           ; BSR set to: 0
  4407   001DC2  90D8               	bcf	status,0,c
  4408   001DC4  3616               	rlcf	___ftdiv@f1^0,f,c
  4409   001DC6  3617               	rlcf	(___ftdiv@f1+1)^0,f,c
  4410   001DC8  3618               	rlcf	(___ftdiv@f1+2)^0,f,c
  4411                           
  4412                           ; BSR set to: 0
  4413   001DCA  2E1F               	decfsz	___ftdiv@cntr^0,f,c
  4414   001DCC  D7E7               	goto	l4413
  4415                           
  4416                           ; BSR set to: 0
  4417   001DCE  C020  F00E         	movff	___ftdiv@f3,___ftpack@arg
  4418   001DD2  C021  F00F         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4419   001DD6  C022  F010         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4420   001DDA  C023  F011         	movff	___ftdiv@exp,___ftpack@exp
  4421   001DDE  C024  F012         	movff	___ftdiv@sign,___ftpack@sign
  4422   001DE2  EC9C  F010         	call	___ftpack	;wreg free
  4423   001DE6  C00E  F016         	movff	?___ftpack,?___ftdiv
  4424   001DEA  C00F  F017         	movff	?___ftpack+1,?___ftdiv+1
  4425   001DEE  C010  F018         	movff	?___ftpack+2,?___ftdiv+2
  4426   001DF2  0012               	return		;funcret
  4427   001DF4                     __end_of___ftdiv:
  4428                           	callstack 0
  4429                           
  4430 ;; *************** function ___awtoft *****************
  4431 ;; Defined at:
  4432 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awtoft.c"
  4433 ;; Parameters:    Size  Location     Type
  4434 ;;  c               2   21[COMRAM] int 
  4435 ;; Auto vars:     Size  Location     Type
  4436 ;;  sign            1   24[COMRAM] unsigned char 
  4437 ;; Return value:  Size  Location     Type
  4438 ;;                  3   21[COMRAM] float 
  4439 ;; Registers used:
  4440 ;;		wreg, status,2, status,0, cstack
  4441 ;; Tracked objects:
  4442 ;;		On entry : 0/0
  4443 ;;		On exit  : 0/0
  4444 ;;		Unchanged: 0/0
  4445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4446 ;;      Params:         3       0       0       0       0       0       0       0       0
  4447 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4448 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4449 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4450 ;;Total ram usage:        4 bytes
  4451 ;; Hardware stack levels used: 1
  4452 ;; Hardware stack levels required when called: 6
  4453 ;; This function calls:
  4454 ;;		___ftpack
  4455 ;; This function is called by:
  4456 ;;		_exp
  4457 ;;		_log
  4458 ;; This function uses a non-reentrant model
  4459 ;;
  4460                           
  4461                           	psect	text16
  4462   002A84                     __ptext16:
  4463                           	callstack 0
  4464   002A84                     ___awtoft:
  4465                           	callstack 22
  4466                           
  4467                           ;incstack = 0
  4468   002A84  0E00               	movlw	0
  4469   002A86  6E19               	movwf	___awtoft@sign^0,c
  4470   002A88  AE17               	btfss	(___awtoft@c+1)^0,7,c
  4471   002A8A  D006               	goto	l4443
  4472   002A8C  6C16               	negf	___awtoft@c^0,c
  4473   002A8E  1E17               	comf	(___awtoft@c+1)^0,f,c
  4474   002A90  B0D8               	btfsc	status,0,c
  4475   002A92  2A17               	incf	(___awtoft@c+1)^0,f,c
  4476   002A94  0E01               	movlw	1
  4477   002A96  6E19               	movwf	___awtoft@sign^0,c
  4478   002A98                     l4443:
  4479   002A98  C016  F00E         	movff	___awtoft@c,___ftpack@arg
  4480   002A9C  C017  F00F         	movff	___awtoft@c+1,___ftpack@arg+1
  4481   002AA0  6A10               	clrf	(___ftpack@arg+2)^0,c
  4482   002AA2  0E8E               	movlw	142
  4483   002AA4  6E11               	movwf	___ftpack@exp^0,c
  4484   002AA6  C019  F012         	movff	___awtoft@sign,___ftpack@sign
  4485   002AAA  EC9C  F010         	call	___ftpack	;wreg free
  4486   002AAE  C00E  F016         	movff	?___ftpack,?___awtoft
  4487   002AB2  C00F  F017         	movff	?___ftpack+1,?___awtoft+1
  4488   002AB6  C010  F018         	movff	?___ftpack+2,?___awtoft+2
  4489   002ABA  0012               	return		;funcret
  4490   002ABC                     __end_of___awtoft:
  4491                           	callstack 0
  4492                           
  4493 ;; *************** function ___lltoft *****************
  4494 ;; Defined at:
  4495 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lltoft.c"
  4496 ;; Parameters:    Size  Location     Type
  4497 ;;  c               4   21[COMRAM] unsigned long 
  4498 ;; Auto vars:     Size  Location     Type
  4499 ;;  exp             1   29[COMRAM] unsigned char 
  4500 ;; Return value:  Size  Location     Type
  4501 ;;                  3   21[COMRAM] float 
  4502 ;; Registers used:
  4503 ;;		wreg, status,2, status,0, cstack
  4504 ;; Tracked objects:
  4505 ;;		On entry : 0/0
  4506 ;;		On exit  : 0/0
  4507 ;;		Unchanged: 0/0
  4508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4509 ;;      Params:         4       0       0       0       0       0       0       0       0
  4510 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4511 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4512 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4513 ;;Total ram usage:        9 bytes
  4514 ;; Hardware stack levels used: 1
  4515 ;; Hardware stack levels required when called: 6
  4516 ;; This function calls:
  4517 ;;		___ftpack
  4518 ;; This function is called by:
  4519 ;;		_pow
  4520 ;; This function uses a non-reentrant model
  4521 ;;
  4522                           
  4523                           	psect	text17
  4524   00267C                     __ptext17:
  4525                           	callstack 0
  4526   00267C                     ___lltoft:
  4527                           	callstack 23
  4528                           
  4529                           ;incstack = 0
  4530   00267C  0E8E               	movlw	142
  4531   00267E  6E1E               	movwf	___lltoft@exp^0,c
  4532   002680  D006               	goto	l4521
  4533   002682                     l4519:
  4534   002682  90D8               	bcf	status,0,c
  4535   002684  3219               	rrcf	(___lltoft@c+3)^0,f,c
  4536   002686  3218               	rrcf	(___lltoft@c+2)^0,f,c
  4537   002688  3217               	rrcf	(___lltoft@c+1)^0,f,c
  4538   00268A  3216               	rrcf	___lltoft@c^0,f,c
  4539   00268C  2A1E               	incf	___lltoft@exp^0,f,c
  4540   00268E                     l4521:
  4541   00268E  0E00               	movlw	0
  4542   002690  1416               	andwf	___lltoft@c^0,w,c
  4543   002692  6E1A               	movwf	??___lltoft^0,c
  4544   002694  0E00               	movlw	0
  4545   002696  1417               	andwf	(___lltoft@c+1)^0,w,c
  4546   002698  6E1B               	movwf	(??___lltoft+1)^0,c
  4547   00269A  0E00               	movlw	0
  4548   00269C  1418               	andwf	(___lltoft@c+2)^0,w,c
  4549   00269E  6E1C               	movwf	(??___lltoft+2)^0,c
  4550   0026A0  0EFF               	movlw	255
  4551   0026A2  1419               	andwf	(___lltoft@c+3)^0,w,c
  4552   0026A4  6E1D               	movwf	(??___lltoft+3)^0,c
  4553   0026A6  501A               	movf	??___lltoft^0,w,c
  4554   0026A8  101B               	iorwf	(??___lltoft+1)^0,w,c
  4555   0026AA  101C               	iorwf	(??___lltoft+2)^0,w,c
  4556   0026AC  101D               	iorwf	(??___lltoft+3)^0,w,c
  4557   0026AE  A4D8               	btfss	status,2,c
  4558   0026B0  D7E8               	goto	l4519
  4559   0026B2  C016  F00E         	movff	___lltoft@c,___ftpack@arg
  4560   0026B6  C017  F00F         	movff	___lltoft@c+1,___ftpack@arg+1
  4561   0026BA  C018  F010         	movff	___lltoft@c+2,___ftpack@arg+2
  4562   0026BE  C01E  F011         	movff	___lltoft@exp,___ftpack@exp
  4563   0026C2  0E00               	movlw	0
  4564   0026C4  6E12               	movwf	___ftpack@sign^0,c
  4565   0026C6  EC9C  F010         	call	___ftpack	;wreg free
  4566   0026CA  C00E  F016         	movff	?___ftpack,?___lltoft
  4567   0026CE  C00F  F017         	movff	?___ftpack+1,?___lltoft+1
  4568   0026D2  C010  F018         	movff	?___ftpack+2,?___lltoft+2
  4569   0026D6  0012               	return		;funcret
  4570   0026D8                     __end_of___lltoft:
  4571                           	callstack 0
  4572                           
  4573 ;; *************** function _factorial_function *****************
  4574 ;; Defined at:
  4575 ;;		line 276 in file "Lab4.c"
  4576 ;; Parameters:    Size  Location     Type
  4577 ;;  a               2   19[COMRAM] int 
  4578 ;; Auto vars:     Size  Location     Type
  4579 ;;  fact            2   23[COMRAM] int 
  4580 ;; Return value:  Size  Location     Type
  4581 ;;                  4   19[COMRAM] unsigned long 
  4582 ;; Registers used:
  4583 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4584 ;; Tracked objects:
  4585 ;;		On entry : 0/0
  4586 ;;		On exit  : 0/0
  4587 ;;		Unchanged: 0/0
  4588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4589 ;;      Params:         4       0       0       0       0       0       0       0       0
  4590 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4591 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4592 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4593 ;;Total ram usage:        6 bytes
  4594 ;; Hardware stack levels used: 1
  4595 ;; Hardware stack levels required when called: 6
  4596 ;; This function calls:
  4597 ;;		___wmul
  4598 ;; This function is called by:
  4599 ;;		_main
  4600 ;; This function uses a non-reentrant model
  4601 ;;
  4602                           
  4603                           	psect	text18
  4604   0026D8                     __ptext18:
  4605                           	callstack 0
  4606   0026D8                     _factorial_function:
  4607                           	callstack 24
  4608                           
  4609                           ;Lab4.c: 277: int fact = 1;
  4610                           
  4611                           ;incstack = 0
  4612   0026D8  0E00               	movlw	0
  4613   0026DA  6E19               	movwf	(factorial_function@fact+1)^0,c
  4614   0026DC  0E01               	movlw	1
  4615   0026DE  6E18               	movwf	factorial_function@fact^0,c
  4616                           
  4617                           ;Lab4.c: 278: for (b = a; b > 1; b--){
  4618   0026E0  C014  F044         	movff	factorial_function@a,_b
  4619   0026E4  C015  F045         	movff	factorial_function@a+1,_b+1
  4620   0026E8  D011               	goto	l3685
  4621   0026EA                     l3681:
  4622                           
  4623                           ;Lab4.c: 279: fact = fact * b;
  4624   0026EA  C018  F00E         	movff	factorial_function@fact,___wmul@multiplier
  4625   0026EE  C019  F00F         	movff	factorial_function@fact+1,___wmul@multiplier+1
  4626   0026F2  C044  F010         	movff	_b,___wmul@multiplicand
  4627   0026F6  C045  F011         	movff	_b+1,___wmul@multiplicand+1
  4628   0026FA  EC5E  F015         	call	___wmul	;wreg free
  4629   0026FE  C00E  F018         	movff	?___wmul,factorial_function@fact
  4630   002702  C00F  F019         	movff	?___wmul+1,factorial_function@fact+1
  4631   002706  0644               	decf	_b^0,f,c
  4632   002708  A0D8               	btfss	status,0,c
  4633   00270A  0645               	decf	(_b+1)^0,f,c
  4634   00270C                     l3685:
  4635   00270C  BE45               	btfsc	(_b+1)^0,7,c
  4636   00270E  D006               	goto	u3940
  4637   002710  5045               	movf	(_b+1)^0,w,c
  4638   002712  E1EB               	bnz	l3681
  4639   002714  0E02               	movlw	2
  4640   002716  5C44               	subwf	_b^0,w,c
  4641   002718  B0D8               	btfsc	status,0,c
  4642   00271A  D7E7               	goto	l3681
  4643   00271C                     u3940:
  4644                           
  4645                           ;Lab4.c: 280: };Lab4.c: 281: return fact;
  4646   00271C  C018  F014         	movff	factorial_function@fact,?_factorial_function
  4647   002720  C019  F015         	movff	factorial_function@fact+1,?_factorial_function+1
  4648   002724  0E00               	movlw	0
  4649   002726  BE15               	btfsc	(?_factorial_function+1)^0,7,c
  4650   002728  0EFF               	movlw	-1
  4651   00272A  6E16               	movwf	(?_factorial_function+2)^0,c
  4652   00272C  6E17               	movwf	(?_factorial_function+3)^0,c
  4653   00272E  0012               	return		;funcret
  4654   002730                     __end_of_factorial_function:
  4655                           	callstack 0
  4656                           
  4657 ;; *************** function ___lwtoft *****************
  4658 ;; Defined at:
  4659 ;;		line 28 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwtoft.c"
  4660 ;; Parameters:    Size  Location     Type
  4661 ;;  c               2   21[COMRAM] unsigned int 
  4662 ;; Auto vars:     Size  Location     Type
  4663 ;;		None
  4664 ;; Return value:  Size  Location     Type
  4665 ;;                  3   21[COMRAM] float 
  4666 ;; Registers used:
  4667 ;;		wreg, status,2, status,0, cstack
  4668 ;; Tracked objects:
  4669 ;;		On entry : 0/0
  4670 ;;		On exit  : 0/0
  4671 ;;		Unchanged: 0/0
  4672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4673 ;;      Params:         3       0       0       0       0       0       0       0       0
  4674 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4675 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4676 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4677 ;;Total ram usage:        3 bytes
  4678 ;; Hardware stack levels used: 1
  4679 ;; Hardware stack levels required when called: 6
  4680 ;; This function calls:
  4681 ;;		___ftpack
  4682 ;; This function is called by:
  4683 ;;		_main
  4684 ;; This function uses a non-reentrant model
  4685 ;;
  4686                           
  4687                           	psect	text19
  4688   002B06                     __ptext19:
  4689                           	callstack 0
  4690   002B06                     ___lwtoft:
  4691                           	callstack 24
  4692                           
  4693                           ;incstack = 0
  4694   002B06  C016  F00E         	movff	___lwtoft@c,___ftpack@arg
  4695   002B0A  C017  F00F         	movff	___lwtoft@c+1,___ftpack@arg+1
  4696   002B0E  6A10               	clrf	(___ftpack@arg+2)^0,c
  4697   002B10  0E8E               	movlw	142
  4698   002B12  6E11               	movwf	___ftpack@exp^0,c
  4699   002B14  0E00               	movlw	0
  4700   002B16  6E12               	movwf	___ftpack@sign^0,c
  4701   002B18  EC9C  F010         	call	___ftpack	;wreg free
  4702   002B1C  C00E  F016         	movff	?___ftpack,?___lwtoft
  4703   002B20  C00F  F017         	movff	?___ftpack+1,?___lwtoft+1
  4704   002B24  C010  F018         	movff	?___ftpack+2,?___lwtoft+2
  4705   002B28  0012               	return		;funcret
  4706   002B2A                     __end_of___lwtoft:
  4707                           	callstack 0
  4708                           
  4709 ;; *************** function ___ftpack *****************
  4710 ;; Defined at:
  4711 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\float.c"
  4712 ;; Parameters:    Size  Location     Type
  4713 ;;  arg             3   13[COMRAM] unsigned um
  4714 ;;  exp             1   16[COMRAM] unsigned char 
  4715 ;;  sign            1   17[COMRAM] unsigned char 
  4716 ;; Auto vars:     Size  Location     Type
  4717 ;;		None
  4718 ;; Return value:  Size  Location     Type
  4719 ;;                  3   13[COMRAM] float 
  4720 ;; Registers used:
  4721 ;;		wreg, status,2, status,0
  4722 ;; Tracked objects:
  4723 ;;		On entry : 0/0
  4724 ;;		On exit  : 0/0
  4725 ;;		Unchanged: 0/0
  4726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4727 ;;      Params:         5       0       0       0       0       0       0       0       0
  4728 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4729 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4730 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4731 ;;Total ram usage:        8 bytes
  4732 ;; Hardware stack levels used: 1
  4733 ;; Hardware stack levels required when called: 5
  4734 ;; This function calls:
  4735 ;;		Nothing
  4736 ;; This function is called by:
  4737 ;;		___altoft
  4738 ;;		___awtoft
  4739 ;;		___ftadd
  4740 ;;		___ftdiv
  4741 ;;		___ftmul
  4742 ;;		___lltoft
  4743 ;;		___lwtoft
  4744 ;; This function uses a non-reentrant model
  4745 ;;
  4746                           
  4747                           	psect	text20
  4748   002138                     __ptext20:
  4749                           	callstack 0
  4750   002138                     ___ftpack:
  4751                           	callstack 21
  4752                           
  4753                           ;incstack = 0
  4754   002138  5011               	movf	___ftpack@exp^0,w,c
  4755   00213A  B4D8               	btfsc	status,2,c
  4756   00213C  D005               	goto	u4880
  4757   00213E  500E               	movf	___ftpack@arg^0,w,c
  4758   002140  100F               	iorwf	(___ftpack@arg+1)^0,w,c
  4759   002142  1010               	iorwf	(___ftpack@arg+2)^0,w,c
  4760   002144  A4D8               	btfss	status,2,c
  4761   002146  D00C               	goto	l4137
  4762   002148                     u4880:
  4763   002148  0E00               	movlw	0
  4764   00214A  6E0E               	movwf	?___ftpack^0,c
  4765   00214C  0E00               	movlw	0
  4766   00214E  6E0F               	movwf	(?___ftpack+1)^0,c
  4767   002150  0E00               	movlw	0
  4768   002152  6E10               	movwf	(?___ftpack+2)^0,c
  4769   002154  0012               	return	
  4770   002156                     l4135:
  4771   002156  2A11               	incf	___ftpack@exp^0,f,c
  4772   002158  90D8               	bcf	status,0,c
  4773   00215A  3210               	rrcf	(___ftpack@arg+2)^0,f,c
  4774   00215C  320F               	rrcf	(___ftpack@arg+1)^0,f,c
  4775   00215E  320E               	rrcf	___ftpack@arg^0,f,c
  4776   002160                     l4137:
  4777   002160  0E00               	movlw	0
  4778   002162  140E               	andwf	___ftpack@arg^0,w,c
  4779   002164  6E13               	movwf	??___ftpack^0,c
  4780   002166  0E00               	movlw	0
  4781   002168  140F               	andwf	(___ftpack@arg+1)^0,w,c
  4782   00216A  6E14               	movwf	(??___ftpack+1)^0,c
  4783   00216C  0EFE               	movlw	254
  4784   00216E  1410               	andwf	(___ftpack@arg+2)^0,w,c
  4785   002170  6E15               	movwf	(??___ftpack+2)^0,c
  4786   002172  5013               	movf	??___ftpack^0,w,c
  4787   002174  1014               	iorwf	(??___ftpack+1)^0,w,c
  4788   002176  1015               	iorwf	(??___ftpack+2)^0,w,c
  4789   002178  B4D8               	btfsc	status,2,c
  4790   00217A  D00C               	goto	l4143
  4791   00217C  D7EC               	goto	l4135
  4792   00217E                     l4139:
  4793   00217E  2A11               	incf	___ftpack@exp^0,f,c
  4794   002180  0E01               	movlw	1
  4795   002182  260E               	addwf	___ftpack@arg^0,f,c
  4796   002184  0E00               	movlw	0
  4797   002186  220F               	addwfc	(___ftpack@arg+1)^0,f,c
  4798   002188  0E00               	movlw	0
  4799   00218A  2210               	addwfc	(___ftpack@arg+2)^0,f,c
  4800   00218C  90D8               	bcf	status,0,c
  4801   00218E  3210               	rrcf	(___ftpack@arg+2)^0,f,c
  4802   002190  320F               	rrcf	(___ftpack@arg+1)^0,f,c
  4803   002192  320E               	rrcf	___ftpack@arg^0,f,c
  4804   002194                     l4143:
  4805   002194  0E00               	movlw	0
  4806   002196  140E               	andwf	___ftpack@arg^0,w,c
  4807   002198  6E13               	movwf	??___ftpack^0,c
  4808   00219A  0E00               	movlw	0
  4809   00219C  140F               	andwf	(___ftpack@arg+1)^0,w,c
  4810   00219E  6E14               	movwf	(??___ftpack+1)^0,c
  4811   0021A0  0EFF               	movlw	255
  4812   0021A2  1410               	andwf	(___ftpack@arg+2)^0,w,c
  4813   0021A4  6E15               	movwf	(??___ftpack+2)^0,c
  4814   0021A6  5013               	movf	??___ftpack^0,w,c
  4815   0021A8  1014               	iorwf	(??___ftpack+1)^0,w,c
  4816   0021AA  1015               	iorwf	(??___ftpack+2)^0,w,c
  4817   0021AC  B4D8               	btfsc	status,2,c
  4818   0021AE  D006               	goto	l4147
  4819   0021B0  D7E6               	goto	l4139
  4820   0021B2                     l4145:
  4821   0021B2  0611               	decf	___ftpack@exp^0,f,c
  4822   0021B4  90D8               	bcf	status,0,c
  4823   0021B6  360E               	rlcf	___ftpack@arg^0,f,c
  4824   0021B8  360F               	rlcf	(___ftpack@arg+1)^0,f,c
  4825   0021BA  3610               	rlcf	(___ftpack@arg+2)^0,f,c
  4826   0021BC                     l4147:
  4827   0021BC  BE0F               	btfsc	(___ftpack@arg+1)^0,7,c
  4828   0021BE  D003               	goto	u4920
  4829   0021C0  0E02               	movlw	2
  4830   0021C2  6011               	cpfslt	___ftpack@exp^0,c
  4831   0021C4  D7F6               	goto	l4145
  4832   0021C6                     u4920:
  4833   0021C6  A011               	btfss	___ftpack@exp^0,0,c
  4834   0021C8  9E0F               	bcf	(___ftpack@arg+1)^0,7,c
  4835   0021CA  90D8               	bcf	status,0,c
  4836   0021CC  3211               	rrcf	___ftpack@exp^0,f,c
  4837   0021CE  5011               	movf	___ftpack@exp^0,w,c
  4838   0021D0  1210               	iorwf	(___ftpack@arg+2)^0,f,c
  4839   0021D2  5012               	movf	___ftpack@sign^0,w,c
  4840   0021D4  A4D8               	btfss	status,2,c
  4841   0021D6  8E10               	bsf	(___ftpack@arg+2)^0,7,c
  4842   0021D8  C00E  F00E         	movff	___ftpack@arg,?___ftpack
  4843   0021DC  C00F  F00F         	movff	___ftpack@arg+1,?___ftpack+1
  4844   0021E0  C010  F010         	movff	___ftpack@arg+2,?___ftpack+2
  4845   0021E4  0012               	return		;funcret
  4846   0021E6                     __end_of___ftpack:
  4847                           	callstack 0
  4848                           
  4849 ;; *************** function _LeerTeclado *****************
  4850 ;; Defined at:
  4851 ;;		line 205 in file "Lab4.c"
  4852 ;; Parameters:    Size  Location     Type
  4853 ;;		None
  4854 ;; Auto vars:     Size  Location     Type
  4855 ;;		None
  4856 ;; Return value:  Size  Location     Type
  4857 ;;                  1    wreg      unsigned char 
  4858 ;; Registers used:
  4859 ;;		wreg, status,2
  4860 ;; Tracked objects:
  4861 ;;		On entry : 0/0
  4862 ;;		On exit  : 0/0
  4863 ;;		Unchanged: 0/0
  4864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4865 ;;      Params:         0       0       0       0       0       0       0       0       0
  4866 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4867 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4868 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4869 ;;Total ram usage:        0 bytes
  4870 ;; Hardware stack levels used: 1
  4871 ;; Hardware stack levels required when called: 5
  4872 ;; This function calls:
  4873 ;;		Nothing
  4874 ;; This function is called by:
  4875 ;;		_main
  4876 ;; This function uses a non-reentrant model
  4877 ;;
  4878                           
  4879                           	psect	text21
  4880   001FA0                     __ptext21:
  4881                           	callstack 0
  4882   001FA0                     _LeerTeclado:
  4883                           	callstack 25
  4884                           
  4885                           ;Lab4.c: 206: while(RB4==1 && RB5==1 && RB6==1 && RB7==1);
  4886                           
  4887                           ;incstack = 0
  4888   001FA0  B881               	btfsc	3969,4,c	;volatile
  4889   001FA2  AA81               	btfss	3969,5,c	;volatile
  4890   001FA4  D004               	goto	u3520
  4891   001FA6  AC81               	btfss	3969,6,c	;volatile
  4892   001FA8  D002               	goto	u3520
  4893   001FAA  BE81               	btfsc	3969,7,c	;volatile
  4894   001FAC  D7F9               	goto	__ptext21
  4895   001FAE                     u3520:
  4896                           
  4897                           ;Lab4.c: 207: verificador = 1;
  4898   001FAE  0E00               	movlw	0
  4899   001FB0  6E47               	movwf	(_verificador+1)^0,c
  4900   001FB2  0E01               	movlw	1
  4901   001FB4  6E46               	movwf	_verificador^0,c
  4902                           
  4903                           ;Lab4.c: 208: LATB=0b11111110;
  4904   001FB6  0EFE               	movlw	254
  4905   001FB8  6E8A               	movwf	138,c	;volatile
  4906                           
  4907                           ;Lab4.c: 209: if(RB4==0){
  4908   001FBA  B881               	btfsc	3969,4,c	;volatile
  4909   001FBC  D00B               	goto	l252
  4910                           
  4911                           ;Lab4.c: 210: if(!potencia) return '+';
  4912   001FBE  0100               	movlb	0	; () banked
  4913   001FC0  519C               	movf	_potencia& (0+255),w,b
  4914   001FC2  A4D8               	btfss	status,2,c
  4915   001FC4  D002               	goto	l3423
  4916                           
  4917                           ; BSR set to: 0
  4918   001FC6  0E2B               	movlw	43
  4919   001FC8  0012               	return	
  4920   001FCA                     l3423:
  4921                           
  4922                           ; BSR set to: 0
  4923                           ;Lab4.c: 211: else if(potencia) return '^';
  4924   001FCA  519C               	movf	_potencia& (0+255),w,b
  4925   001FCC  B4D8               	btfsc	status,2,c
  4926   001FCE  D04D               	goto	l284
  4927                           
  4928                           ; BSR set to: 0
  4929   001FD0  0E5E               	movlw	94
  4930   001FD2  0012               	return	
  4931   001FD4                     l252:
  4932                           
  4933                           ;Lab4.c: 213: else if(RB5==0) return '=';
  4934   001FD4  BA81               	btfsc	3969,5,c	;volatile
  4935   001FD6  D002               	goto	l258
  4936   001FD8  0E3D               	movlw	61
  4937   001FDA  0012               	return	
  4938   001FDC                     l258:
  4939                           
  4940                           ;Lab4.c: 214: else if(RB6==0) return '0';
  4941   001FDC  BC81               	btfsc	3969,6,c	;volatile
  4942   001FDE  D002               	goto	l260
  4943   001FE0  0E30               	movlw	48
  4944   001FE2  0012               	return	
  4945   001FE4                     l260:
  4946                           
  4947                           ;Lab4.c: 215: else if(RB7==0) return 'C';
  4948   001FE4  BE81               	btfsc	3969,7,c	;volatile
  4949   001FE6  D002               	goto	l3447
  4950   001FE8  0E43               	movlw	67
  4951   001FEA  0012               	return	
  4952   001FEC                     l3447:
  4953                           
  4954                           ;Lab4.c: 216: else{;Lab4.c: 217: LATB=0b11111101;
  4955   001FEC  0EFD               	movlw	253
  4956   001FEE  6E8A               	movwf	138,c	;volatile
  4957                           
  4958                           ;Lab4.c: 218: if(RB4==0){
  4959   001FF0  B881               	btfsc	3969,4,c	;volatile
  4960   001FF2  D00B               	goto	l264
  4961                           
  4962                           ;Lab4.c: 219: if(!factorial) return '-';
  4963   001FF4  0100               	movlb	0	; () banked
  4964   001FF6  519B               	movf	_factorial& (0+255),w,b
  4965   001FF8  A4D8               	btfss	status,2,c
  4966   001FFA  D002               	goto	l3459
  4967                           
  4968                           ; BSR set to: 0
  4969   001FFC  0E2D               	movlw	45
  4970   001FFE  0012               	return	
  4971   002000                     l3459:
  4972                           
  4973                           ; BSR set to: 0
  4974                           ;Lab4.c: 220: else if(factorial) return '!';
  4975   002000  519B               	movf	_factorial& (0+255),w,b
  4976   002002  B4D8               	btfsc	status,2,c
  4977   002004  D032               	goto	l284
  4978                           
  4979                           ; BSR set to: 0
  4980   002006  0E21               	movlw	33
  4981   002008  0012               	return	
  4982   00200A                     l264:
  4983                           
  4984                           ;Lab4.c: 222: else if(RB5==0) return '9';
  4985   00200A  BA81               	btfsc	3969,5,c	;volatile
  4986   00200C  D002               	goto	l269
  4987   00200E  0E39               	movlw	57
  4988   002010  0012               	return	
  4989   002012                     l269:
  4990                           
  4991                           ;Lab4.c: 223: else if(RB6==0) return '8';
  4992   002012  BC81               	btfsc	3969,6,c	;volatile
  4993   002014  D002               	goto	l271
  4994   002016  0E38               	movlw	56
  4995   002018  0012               	return	
  4996   00201A                     l271:
  4997                           
  4998                           ;Lab4.c: 224: else if(RB7==0) return '7';
  4999   00201A  BE81               	btfsc	3969,7,c	;volatile
  5000   00201C  D002               	goto	l3483
  5001   00201E  0E37               	movlw	55
  5002   002020  0012               	return	
  5003   002022                     l3483:
  5004                           
  5005                           ;Lab4.c: 225: else{;Lab4.c: 226: LATB=0b11111011;
  5006   002022  0EFB               	movlw	251
  5007   002024  6E8A               	movwf	138,c	;volatile
  5008                           
  5009                           ;Lab4.c: 227: if(RB4==0) return 'x';
  5010   002026  B881               	btfsc	3969,4,c	;volatile
  5011   002028  D002               	goto	l275
  5012   00202A  0E78               	movlw	120
  5013   00202C  0012               	return	
  5014   00202E                     l275:
  5015                           
  5016                           ;Lab4.c: 228: else if(RB5==0) return '6';
  5017   00202E  BA81               	btfsc	3969,5,c	;volatile
  5018   002030  D002               	goto	l277
  5019   002032  0E36               	movlw	54
  5020   002034  0012               	return	
  5021   002036                     l277:
  5022                           
  5023                           ;Lab4.c: 229: else if(RB6==0) return '5';
  5024   002036  BC81               	btfsc	3969,6,c	;volatile
  5025   002038  D002               	goto	l279
  5026   00203A  0E35               	movlw	53
  5027   00203C  0012               	return	
  5028   00203E                     l279:
  5029                           
  5030                           ;Lab4.c: 230: else if(RB7==0) return '4';
  5031   00203E  BE81               	btfsc	3969,7,c	;volatile
  5032   002040  D002               	goto	l3511
  5033   002042  0E34               	movlw	52
  5034   002044  0012               	return	
  5035   002046                     l3511:
  5036                           
  5037                           ;Lab4.c: 231: else{;Lab4.c: 232: LATB=0b11110111;
  5038   002046  0EF7               	movlw	247
  5039   002048  6E8A               	movwf	138,c	;volatile
  5040                           
  5041                           ;Lab4.c: 233: if(RB4==0) return '/';
  5042   00204A  B881               	btfsc	3969,4,c	;volatile
  5043   00204C  D002               	goto	l283
  5044   00204E  0E2F               	movlw	47
  5045   002050  0012               	return	
  5046   002052                     l283:
  5047                           
  5048                           ;Lab4.c: 234: else if(RB5==0) return '3';
  5049   002052  BA81               	btfsc	3969,5,c	;volatile
  5050   002054  D002               	goto	l285
  5051   002056  0E33               	movlw	51
  5052   002058  0012               	return	
  5053   00205A                     l285:
  5054                           
  5055                           ;Lab4.c: 235: else if(RB6==0) return '2';
  5056   00205A  BC81               	btfsc	3969,6,c	;volatile
  5057   00205C  D002               	goto	l287
  5058   00205E  0E32               	movlw	50
  5059   002060  0012               	return	
  5060   002062                     l287:
  5061                           
  5062                           ;Lab4.c: 236: else if(RB7==0) return '1';
  5063   002062  BE81               	btfsc	3969,7,c	;volatile
  5064   002064  D002               	goto	l284
  5065   002066  0E31               	movlw	49
  5066   002068  0012               	return	
  5067   00206A                     l284:
  5068                           
  5069                           ;Lab4.c: 237: };Lab4.c: 238: };Lab4.c: 239: };Lab4.c: 240: return '?';
  5070   00206A  0E3F               	movlw	63
  5071   00206C  0012               	return		;funcret
  5072   00206E                     __end_of_LeerTeclado:
  5073                           	callstack 0
  5074                           
  5075 ;; *************** function _InicializaLCD *****************
  5076 ;; Defined at:
  5077 ;;		line 61 in file "LibLCDXC8.h"
  5078 ;; Parameters:    Size  Location     Type
  5079 ;;		None
  5080 ;; Auto vars:     Size  Location     Type
  5081 ;;		None
  5082 ;; Return value:  Size  Location     Type
  5083 ;;                  1    wreg      void 
  5084 ;; Registers used:
  5085 ;;		wreg, status,2, status,0, cstack
  5086 ;; Tracked objects:
  5087 ;;		On entry : 0/0
  5088 ;;		On exit  : 0/0
  5089 ;;		Unchanged: 0/0
  5090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5091 ;;      Params:         0       0       0       0       0       0       0       0       0
  5092 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5093 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5094 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5095 ;;Total ram usage:        0 bytes
  5096 ;; Hardware stack levels used: 1
  5097 ;; Hardware stack levels required when called: 8
  5098 ;; This function calls:
  5099 ;;		_BorraLCD
  5100 ;;		_EnviaDato
  5101 ;;		_HabilitaLCD
  5102 ;;		_RetardoLCD
  5103 ;; This function is called by:
  5104 ;;		_main
  5105 ;; This function uses a non-reentrant model
  5106 ;;
  5107                           
  5108                           	psect	text22
  5109   002284                     __ptext22:
  5110                           	callstack 0
  5111   002284                     _InicializaLCD:
  5112                           	callstack 22
  5113                           
  5114                           ;LibLCDXC8.h: 63: LATE0=0;
  5115                           
  5116                           ;incstack = 0
  5117   002284  908D               	bcf	3981,0,c	;volatile
  5118                           
  5119                           ;LibLCDXC8.h: 64: if(interfaz==4)
  5120   002286  0E04               	movlw	4
  5121   002288  1850               	xorwf	_interfaz^0,w,c
  5122   00228A  A4D8               	btfss	status,2,c
  5123   00228C  D004               	goto	l3355
  5124                           
  5125                           ;LibLCDXC8.h: 65: LATD=(LATD & 0b00001111) | 0x30;
  5126   00228E  508C               	movf	140,w,c	;volatile
  5127   002290  0B0F               	andlw	15
  5128   002292  0930               	iorlw	48
  5129   002294  D001               	goto	L5
  5130   002296                     l3355:
  5131                           
  5132                           ;LibLCDXC8.h: 66: else;LibLCDXC8.h: 67: LATD=0x3F;
  5133   002296  0E3F               	movlw	63
  5134   002298                     L5:
  5135   002298  6E8C               	movwf	140,c	;volatile
  5136                           
  5137                           ;LibLCDXC8.h: 68: HabilitaLCD();
  5138   00229A  ECE1  F015         	call	_HabilitaLCD	;wreg free
  5139                           
  5140                           ;LibLCDXC8.h: 69: RetardoLCD(1);
  5141   00229E  0E01               	movlw	1
  5142   0022A0  ECEE  F013         	call	_RetardoLCD
  5143                           
  5144                           ;LibLCDXC8.h: 70: if(interfaz==4)
  5145   0022A4  0E04               	movlw	4
  5146   0022A6  1850               	xorwf	_interfaz^0,w,c
  5147   0022A8  A4D8               	btfss	status,2,c
  5148   0022AA  D004               	goto	l3365
  5149                           
  5150                           ;LibLCDXC8.h: 71: LATD=(LATD & 0b00001111) | 0x30;
  5151   0022AC  508C               	movf	140,w,c	;volatile
  5152   0022AE  0B0F               	andlw	15
  5153   0022B0  0930               	iorlw	48
  5154   0022B2  D001               	goto	L6
  5155   0022B4                     l3365:
  5156                           
  5157                           ;LibLCDXC8.h: 72: else;LibLCDXC8.h: 73: LATD=0x3F;
  5158   0022B4  0E3F               	movlw	63
  5159   0022B6                     L6:
  5160   0022B6  6E8C               	movwf	140,c	;volatile
  5161                           
  5162                           ;LibLCDXC8.h: 74: HabilitaLCD();
  5163   0022B8  ECE1  F015         	call	_HabilitaLCD	;wreg free
  5164                           
  5165                           ;LibLCDXC8.h: 75: RetardoLCD(3);
  5166   0022BC  0E03               	movlw	3
  5167   0022BE  ECEE  F013         	call	_RetardoLCD
  5168                           
  5169                           ;LibLCDXC8.h: 76: if(interfaz==4)
  5170   0022C2  0E04               	movlw	4
  5171   0022C4  1850               	xorwf	_interfaz^0,w,c
  5172   0022C6  A4D8               	btfss	status,2,c
  5173   0022C8  D004               	goto	l3375
  5174                           
  5175                           ;LibLCDXC8.h: 77: LATD=(LATD & 0b00001111) | 0x30;
  5176   0022CA  508C               	movf	140,w,c	;volatile
  5177   0022CC  0B0F               	andlw	15
  5178   0022CE  0930               	iorlw	48
  5179   0022D0  D001               	goto	L7
  5180   0022D2                     l3375:
  5181                           
  5182                           ;LibLCDXC8.h: 78: else;LibLCDXC8.h: 79: LATD=0x3F;
  5183   0022D2  0E3F               	movlw	63
  5184   0022D4                     L7:
  5185   0022D4  6E8C               	movwf	140,c	;volatile
  5186                           
  5187                           ;LibLCDXC8.h: 80: HabilitaLCD();
  5188   0022D6  ECE1  F015         	call	_HabilitaLCD	;wreg free
  5189                           
  5190                           ;LibLCDXC8.h: 81: RetardoLCD(4);
  5191   0022DA  0E04               	movlw	4
  5192   0022DC  ECEE  F013         	call	_RetardoLCD
  5193                           
  5194                           ;LibLCDXC8.h: 82: if(interfaz==4){
  5195   0022E0  0E04               	movlw	4
  5196   0022E2  1850               	xorwf	_interfaz^0,w,c
  5197   0022E4  A4D8               	btfss	status,2,c
  5198   0022E6  D011               	goto	l3395
  5199                           
  5200                           ;LibLCDXC8.h: 83: LATD=(LATD & 0b00001111) | 0x20;
  5201   0022E8  508C               	movf	140,w,c	;volatile
  5202   0022EA  0B0F               	andlw	15
  5203   0022EC  0920               	iorlw	32
  5204   0022EE  6E8C               	movwf	140,c	;volatile
  5205                           
  5206                           ;LibLCDXC8.h: 84: HabilitaLCD();
  5207   0022F0  ECE1  F015         	call	_HabilitaLCD	;wreg free
  5208                           
  5209                           ;LibLCDXC8.h: 85: RetardoLCD(4);
  5210   0022F4  0E04               	movlw	4
  5211   0022F6  ECEE  F013         	call	_RetardoLCD
  5212                           
  5213                           ;LibLCDXC8.h: 86: EnviaDato(0x2F);
  5214   0022FA  0E2F               	movlw	47
  5215   0022FC  ECBB  F014         	call	_EnviaDato
  5216                           
  5217                           ;LibLCDXC8.h: 87: HabilitaLCD();
  5218   002300  ECE1  F015         	call	_HabilitaLCD	;wreg free
  5219                           
  5220                           ;LibLCDXC8.h: 88: RetardoLCD(4);
  5221   002304  0E04               	movlw	4
  5222   002306  ECEE  F013         	call	_RetardoLCD
  5223   00230A                     l3395:
  5224                           
  5225                           ;LibLCDXC8.h: 89: };LibLCDXC8.h: 90: BorraLCD();
  5226   00230A  ECCD  F015         	call	_BorraLCD	;wreg free
  5227                           
  5228                           ;LibLCDXC8.h: 91: EnviaDato(0xF);
  5229   00230E  0E0F               	movlw	15
  5230   002310  ECBB  F014         	call	_EnviaDato
  5231                           
  5232                           ;LibLCDXC8.h: 92: HabilitaLCD();
  5233   002314  ECE1  F015         	call	_HabilitaLCD	;wreg free
  5234                           
  5235                           ;LibLCDXC8.h: 93: RetardoLCD(4);
  5236   002318  0E04               	movlw	4
  5237   00231A  ECEE  F013         	call	_RetardoLCD
  5238   00231E  0012               	return		;funcret
  5239   002320                     __end_of_InicializaLCD:
  5240                           	callstack 0
  5241                           
  5242 ;; *************** function _BorraLCD *****************
  5243 ;; Defined at:
  5244 ;;		line 102 in file "LibLCDXC8.h"
  5245 ;; Parameters:    Size  Location     Type
  5246 ;;		None
  5247 ;; Auto vars:     Size  Location     Type
  5248 ;;		None
  5249 ;; Return value:  Size  Location     Type
  5250 ;;                  1    wreg      void 
  5251 ;; Registers used:
  5252 ;;		wreg, status,2, status,0, cstack
  5253 ;; Tracked objects:
  5254 ;;		On entry : 0/0
  5255 ;;		On exit  : 0/0
  5256 ;;		Unchanged: 0/0
  5257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5258 ;;      Params:         0       0       0       0       0       0       0       0       0
  5259 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5260 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5261 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5262 ;;Total ram usage:        0 bytes
  5263 ;; Hardware stack levels used: 1
  5264 ;; Hardware stack levels required when called: 7
  5265 ;; This function calls:
  5266 ;;		_EnviaDato
  5267 ;;		_HabilitaLCD
  5268 ;;		_RetardoLCD
  5269 ;; This function is called by:
  5270 ;;		_InicializaLCD
  5271 ;;		_main
  5272 ;; This function uses a non-reentrant model
  5273 ;;
  5274                           
  5275                           	psect	text23
  5276   002B9A                     __ptext23:
  5277                           	callstack 0
  5278   002B9A                     _BorraLCD:
  5279                           	callstack 22
  5280                           
  5281                           ;LibLCDXC8.h: 104: LATE0=0;
  5282                           
  5283                           ;incstack = 0
  5284   002B9A  908D               	bcf	3981,0,c	;volatile
  5285                           
  5286                           ;LibLCDXC8.h: 105: EnviaDato(0x01);
  5287   002B9C  0E01               	movlw	1
  5288   002B9E  ECBB  F014         	call	_EnviaDato
  5289                           
  5290                           ;LibLCDXC8.h: 106: HabilitaLCD();
  5291   002BA2  ECE1  F015         	call	_HabilitaLCD	;wreg free
  5292                           
  5293                           ;LibLCDXC8.h: 107: RetardoLCD(2);
  5294   002BA6  0E02               	movlw	2
  5295   002BA8  ECEE  F013         	call	_RetardoLCD
  5296   002BAC  0012               	return		;funcret
  5297   002BAE                     __end_of_BorraLCD:
  5298                           	callstack 0
  5299                           
  5300 ;; *************** function _Imprimir_Resultado *****************
  5301 ;; Defined at:
  5302 ;;		line 305 in file "Lab4.c"
  5303 ;; Parameters:    Size  Location     Type
  5304 ;;  r               4   50[COMRAM] long 
  5305 ;; Auto vars:     Size  Location     Type
  5306 ;;  i               2   58[COMRAM] int 
  5307 ;; Return value:  Size  Location     Type
  5308 ;;                  1    wreg      void 
  5309 ;; Registers used:
  5310 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5311 ;; Tracked objects:
  5312 ;;		On entry : 0/0
  5313 ;;		On exit  : 0/0
  5314 ;;		Unchanged: 0/0
  5315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5316 ;;      Params:         4       0       0       0       0       0       0       0       0
  5317 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5318 ;;      Temps:          4       0       0       0       0       0       0       0       0
  5319 ;;      Totals:        10       0       0       0       0       0       0       0       0
  5320 ;;Total ram usage:       10 bytes
  5321 ;; Hardware stack levels used: 1
  5322 ;; Hardware stack levels required when called: 9
  5323 ;; This function calls:
  5324 ;;		_DireccionaLCD
  5325 ;;		_EscribeLCD_c
  5326 ;;		_EscribeLCD_n16
  5327 ;;		_MensajeLCD_Var
  5328 ;;		___lldiv
  5329 ;;		___lmul
  5330 ;;		___lwdiv
  5331 ;;		___lwmod
  5332 ;;		___wmul
  5333 ;; This function is called by:
  5334 ;;		_main
  5335 ;; This function uses a non-reentrant model
  5336 ;;
  5337                           
  5338                           	psect	text24
  5339   0013BE                     __ptext24:
  5340                           	callstack 0
  5341   0013BE                     _Imprimir_Resultado:
  5342                           	callstack 21
  5343                           
  5344                           ;Lab4.c: 306: if ((partdecl-(r*100))>0 | (partdecl-(r*100))<0){
  5345                           
  5346                           ;incstack = 0
  5347   0013BE  C033  F00E         	movff	Imprimir_Resultado@r,___lmul@multiplier
  5348   0013C2  C034  F00F         	movff	Imprimir_Resultado@r+1,___lmul@multiplier+1
  5349   0013C6  C035  F010         	movff	Imprimir_Resultado@r+2,___lmul@multiplier+2
  5350   0013CA  C036  F011         	movff	Imprimir_Resultado@r+3,___lmul@multiplier+3
  5351   0013CE  0E9C               	movlw	156
  5352   0013D0  6E12               	movwf	___lmul@multiplicand^0,c
  5353   0013D2  0EFF               	movlw	255
  5354   0013D4  6E13               	movwf	(___lmul@multiplicand+1)^0,c
  5355   0013D6  0EFF               	movlw	255
  5356   0013D8  6E14               	movwf	(___lmul@multiplicand+2)^0,c
  5357   0013DA  0EFF               	movlw	255
  5358   0013DC  6E15               	movwf	(___lmul@multiplicand+3)^0,c
  5359   0013DE  ECC3  F013         	call	___lmul	;wreg free
  5360   0013E2  0100               	movlb	0	; () banked
  5361   0013E4  518B               	movf	_partdecl& (0+255),w,b
  5362   0013E6  240E               	addwf	?___lmul^0,w,c
  5363   0013E8  6E37               	movwf	??_Imprimir_Resultado^0,c
  5364   0013EA  518C               	movf	(_partdecl+1)& (0+255),w,b
  5365   0013EC  200F               	addwfc	(?___lmul+1)^0,w,c
  5366   0013EE  6E38               	movwf	(??_Imprimir_Resultado+1)^0,c
  5367   0013F0  518D               	movf	(_partdecl+2)& (0+255),w,b
  5368   0013F2  2010               	addwfc	(?___lmul+2)^0,w,c
  5369   0013F4  6E39               	movwf	(??_Imprimir_Resultado+2)^0,c
  5370   0013F6  518E               	movf	(_partdecl+3)& (0+255),w,b
  5371   0013F8  2011               	addwfc	(?___lmul+3)^0,w,c
  5372   0013FA  6E3A               	movwf	(??_Imprimir_Resultado+3)^0,c
  5373   0013FC  5037               	movf	??_Imprimir_Resultado^0,w,c
  5374   0013FE  1038               	iorwf	(??_Imprimir_Resultado+1)^0,w,c
  5375   001400  1039               	iorwf	(??_Imprimir_Resultado+2)^0,w,c
  5376   001402  103A               	iorwf	(??_Imprimir_Resultado+3)^0,w,c
  5377   001404  B4D8               	btfsc	status,2,c
  5378   001406  D055               	goto	l3637
  5379                           
  5380                           ; BSR set to: 0
  5381                           ;Lab4.c: 307: for (int i = 0; i < 3; i++) {
  5382   001408  0E00               	movlw	0
  5383   00140A  6E3C               	movwf	(Imprimir_Resultado@i+1)^0,c
  5384   00140C  0E00               	movlw	0
  5385   00140E  6E3B               	movwf	Imprimir_Resultado@i^0,c
  5386   001410                     l3621:
  5387                           
  5388                           ;Lab4.c: 308: r = n1 / n2;
  5389   001410  C099  F014         	movff	_n1,___lwdiv@dividend
  5390   001414  C09A  F015         	movff	_n1+1,___lwdiv@dividend+1
  5391   001418  C097  F016         	movff	_n2,___lwdiv@divisor
  5392   00141C  C098  F017         	movff	_n2+1,___lwdiv@divisor+1
  5393   001420  EC44  F014         	call	___lwdiv	;wreg free
  5394   001424  C014  F033         	movff	?___lwdiv,Imprimir_Resultado@r
  5395   001428  C015  F034         	movff	?___lwdiv+1,Imprimir_Resultado@r+1
  5396   00142C  6A35               	clrf	(Imprimir_Resultado@r+2)^0,c
  5397   00142E  6A36               	clrf	(Imprimir_Resultado@r+3)^0,c
  5398                           
  5399                           ;Lab4.c: 309: m = n1 % n2;
  5400   001430  C099  F00E         	movff	_n1,___lwmod@dividend
  5401   001434  C09A  F00F         	movff	_n1+1,___lwmod@dividend+1
  5402   001438  C097  F010         	movff	_n2,___lwmod@divisor
  5403   00143C  C098  F011         	movff	_n2+1,___lwmod@divisor+1
  5404   001440  EC01  F015         	call	___lwmod	;wreg free
  5405   001444  C00E  F04C         	movff	?___lwmod,_m
  5406   001448  C00F  F04D         	movff	?___lwmod+1,_m+1
  5407   00144C  6A4E               	clrf	(_m+2)^0,c
  5408   00144E  6A4F               	clrf	(_m+3)^0,c
  5409                           
  5410                           ;Lab4.c: 310: EscribeLCD_c(r+'0');
  5411   001450  5033               	movf	Imprimir_Resultado@r^0,w,c
  5412   001452  0F30               	addlw	48
  5413   001454  ECA1  F015         	call	_EscribeLCD_c
  5414                           
  5415                           ;Lab4.c: 311: if(i == 0 && m != 0) {
  5416   001458  503B               	movf	Imprimir_Resultado@i^0,w,c
  5417   00145A  103C               	iorwf	(Imprimir_Resultado@i+1)^0,w,c
  5418   00145C  A4D8               	btfss	status,2,c
  5419   00145E  D009               	goto	l3629
  5420   001460  504C               	movf	_m^0,w,c
  5421   001462  104D               	iorwf	(_m+1)^0,w,c
  5422   001464  104E               	iorwf	(_m+2)^0,w,c
  5423   001466  104F               	iorwf	(_m+3)^0,w,c
  5424   001468  B4D8               	btfsc	status,2,c
  5425   00146A  D003               	goto	l3629
  5426                           
  5427                           ;Lab4.c: 312: EscribeLCD_c(',');
  5428   00146C  0E2C               	movlw	44
  5429   00146E  ECA1  F015         	call	_EscribeLCD_c
  5430   001472                     l3629:
  5431                           
  5432                           ;Lab4.c: 313: };Lab4.c: 315: if (m != 0) {
  5433   001472  504C               	movf	_m^0,w,c
  5434   001474  104D               	iorwf	(_m+1)^0,w,c
  5435   001476  104E               	iorwf	(_m+2)^0,w,c
  5436   001478  104F               	iorwf	(_m+3)^0,w,c
  5437   00147A  B4D8               	btfsc	status,2,c
  5438   00147C  0012               	return	
  5439                           
  5440                           ;Lab4.c: 316: n1 = m * 10;
  5441   00147E  C04C  F00E         	movff	_m,___wmul@multiplier
  5442   001482  C04D  F00F         	movff	_m+1,___wmul@multiplier+1
  5443   001486  0E00               	movlw	0
  5444   001488  6E11               	movwf	(___wmul@multiplicand+1)^0,c
  5445   00148A  0E0A               	movlw	10
  5446   00148C  6E10               	movwf	___wmul@multiplicand^0,c
  5447   00148E  EC5E  F015         	call	___wmul	;wreg free
  5448   001492  C00E  F099         	movff	?___wmul,_n1
  5449   001496  C00F  F09A         	movff	?___wmul+1,_n1+1
  5450                           
  5451                           ;Lab4.c: 317: } else {
  5452   00149A  4A3B               	infsnz	Imprimir_Resultado@i^0,f,c
  5453   00149C  2A3C               	incf	(Imprimir_Resultado@i+1)^0,f,c
  5454   00149E  BE3C               	btfsc	(Imprimir_Resultado@i+1)^0,7,c
  5455   0014A0  D7B7               	goto	l3621
  5456   0014A2  503C               	movf	(Imprimir_Resultado@i+1)^0,w,c
  5457   0014A4  E105               	bnz	u3840
  5458   0014A6  0E03               	movlw	3
  5459   0014A8  5C3B               	subwf	Imprimir_Resultado@i^0,w,c
  5460   0014AA  B0D8               	btfsc	status,0,c
  5461   0014AC  0012               	return	
  5462   0014AE  D7B0               	goto	l3621
  5463   0014B0                     u3840:
  5464   0014B0  0012               	return	
  5465   0014B2                     l3637:
  5466                           
  5467                           ; BSR set to: 0
  5468   0014B2  BE36               	btfsc	(Imprimir_Resultado@r+3)^0,7,c
  5469   0014B4  D026               	goto	l3649
  5470   0014B6  5036               	movf	(Imprimir_Resultado@r+3)^0,w,c
  5471   0014B8  E103               	bnz	u3850
  5472   0014BA  0435               	decf	(Imprimir_Resultado@r+2)^0,w,c
  5473   0014BC  A0D8               	btfss	status,0,c
  5474   0014BE  D021               	goto	l3649
  5475   0014C0                     u3850:
  5476                           
  5477                           ; BSR set to: 0
  5478   0014C0  0EE8               	movlw	232
  5479   0014C2  1833               	xorwf	Imprimir_Resultado@r^0,w,c
  5480   0014C4  E106               	bnz	u3860
  5481   0014C6  0E03               	movlw	3
  5482   0014C8  1834               	xorwf	(Imprimir_Resultado@r+1)^0,w,c
  5483   0014CA  1035               	iorwf	(Imprimir_Resultado@r+2)^0,w,c
  5484   0014CC  1036               	iorwf	(Imprimir_Resultado@r+3)^0,w,c
  5485   0014CE  B4D8               	btfsc	status,2,c
  5486   0014D0  D018               	goto	l3649
  5487   0014D2                     u3860:
  5488                           
  5489                           ; BSR set to: 0
  5490   0014D2  0EE9               	movlw	233
  5491   0014D4  1833               	xorwf	Imprimir_Resultado@r^0,w,c
  5492   0014D6  E106               	bnz	u3870
  5493   0014D8  0E03               	movlw	3
  5494   0014DA  1834               	xorwf	(Imprimir_Resultado@r+1)^0,w,c
  5495   0014DC  1035               	iorwf	(Imprimir_Resultado@r+2)^0,w,c
  5496   0014DE  1036               	iorwf	(Imprimir_Resultado@r+3)^0,w,c
  5497   0014E0  B4D8               	btfsc	status,2,c
  5498   0014E2  D00F               	goto	l3649
  5499   0014E4                     u3870:
  5500                           
  5501                           ; BSR set to: 0
  5502                           ;Lab4.c: 323: DireccionaLCD(0x85);
  5503   0014E4  0E85               	movlw	133
  5504   0014E6  ECAC  F015         	call	_DireccionaLCD
  5505                           
  5506                           ;Lab4.c: 324: MensajeLCD_Var("Imposible");
  5507   0014EA  0E93               	movlw	low STR_12
  5508   0014EC  6E13               	movwf	MensajeLCD_Var@a^0,c
  5509   0014EE  EC6D  F014         	call	_MensajeLCD_Var	;wreg free
  5510                           
  5511                           ;Lab4.c: 325: DireccionaLCD(0xC0);
  5512   0014F2  0EC0               	movlw	192
  5513   0014F4  ECAC  F015         	call	_DireccionaLCD
  5514                           
  5515                           ;Lab4.c: 326: MensajeLCD_Var("de calcular");
  5516   0014F8  0E72               	movlw	low STR_13
  5517   0014FA  6E13               	movwf	MensajeLCD_Var@a^0,c
  5518   0014FC  EC6D  F014         	call	_MensajeLCD_Var	;wreg free
  5519                           
  5520                           ;Lab4.c: 327: }else{
  5521   001500  0012               	return	
  5522   001502                     l3649:
  5523                           
  5524                           ; BSR set to: 0
  5525                           ;Lab4.c: 328: if(r>=0xA & r!=1000 & r !=1001){
  5526   001502  BE36               	btfsc	(Imprimir_Resultado@r+3)^0,7,c
  5527   001504  D056               	goto	l3665
  5528   001506  5036               	movf	(Imprimir_Resultado@r+3)^0,w,c
  5529   001508  1035               	iorwf	(Imprimir_Resultado@r+2)^0,w,c
  5530   00150A  1034               	iorwf	(Imprimir_Resultado@r+1)^0,w,c
  5531   00150C  E104               	bnz	u3880
  5532   00150E  0E0A               	movlw	10
  5533   001510  5C33               	subwf	Imprimir_Resultado@r^0,w,c
  5534   001512  A0D8               	btfss	status,0,c
  5535   001514  D04E               	goto	l3665
  5536   001516                     u3880:
  5537                           
  5538                           ; BSR set to: 0
  5539   001516  0EE8               	movlw	232
  5540   001518  1833               	xorwf	Imprimir_Resultado@r^0,w,c
  5541   00151A  E106               	bnz	u3890
  5542   00151C  0E03               	movlw	3
  5543   00151E  1834               	xorwf	(Imprimir_Resultado@r+1)^0,w,c
  5544   001520  1035               	iorwf	(Imprimir_Resultado@r+2)^0,w,c
  5545   001522  1036               	iorwf	(Imprimir_Resultado@r+3)^0,w,c
  5546   001524  B4D8               	btfsc	status,2,c
  5547   001526  D045               	goto	l3665
  5548   001528                     u3890:
  5549                           
  5550                           ; BSR set to: 0
  5551   001528  0EE9               	movlw	233
  5552   00152A  1833               	xorwf	Imprimir_Resultado@r^0,w,c
  5553   00152C  E106               	bnz	u3900
  5554   00152E  0E03               	movlw	3
  5555   001530  1834               	xorwf	(Imprimir_Resultado@r+1)^0,w,c
  5556   001532  1035               	iorwf	(Imprimir_Resultado@r+2)^0,w,c
  5557   001534  1036               	iorwf	(Imprimir_Resultado@r+3)^0,w,c
  5558   001536  B4D8               	btfsc	status,2,c
  5559   001538  D03C               	goto	l3665
  5560   00153A                     u3900:
  5561                           
  5562                           ; BSR set to: 0
  5563                           ;Lab4.c: 329: contador_digitos=0;
  5564   00153A  0E00               	movlw	0
  5565   00153C  6F94               	movwf	(_contador_digitos+1)& (0+255),b
  5566   00153E  0E00               	movlw	0
  5567   001540  6F93               	movwf	_contador_digitos& (0+255),b
  5568                           
  5569                           ; BSR set to: 0
  5570                           ;Lab4.c: 330: res=r;
  5571   001542  C033  F083         	movff	Imprimir_Resultado@r,_res
  5572   001546  C034  F084         	movff	Imprimir_Resultado@r+1,_res+1
  5573   00154A  C035  F085         	movff	Imprimir_Resultado@r+2,_res+2
  5574   00154E  C036  F086         	movff	Imprimir_Resultado@r+3,_res+3
  5575   001552                     l3659:
  5576                           
  5577                           ; BSR set to: 0
  5578                           ;Lab4.c: 332: res=res/10;
  5579   001552  C083  F017         	movff	_res,___lldiv@dividend
  5580   001556  C084  F018         	movff	_res+1,___lldiv@dividend+1
  5581   00155A  C085  F019         	movff	_res+2,___lldiv@dividend+2
  5582   00155E  C086  F01A         	movff	_res+3,___lldiv@dividend+3
  5583   001562  0E0A               	movlw	10
  5584   001564  6E1B               	movwf	___lldiv@divisor^0,c
  5585   001566  0E00               	movlw	0
  5586   001568  6E1C               	movwf	(___lldiv@divisor+1)^0,c
  5587   00156A  0E00               	movlw	0
  5588   00156C  6E1D               	movwf	(___lldiv@divisor+2)^0,c
  5589   00156E  0E00               	movlw	0
  5590   001570  6E1E               	movwf	(___lldiv@divisor+3)^0,c
  5591   001572  EC17  F012         	call	___lldiv	;wreg free
  5592   001576  C017  F083         	movff	?___lldiv,_res
  5593   00157A  C018  F084         	movff	?___lldiv+1,_res+1
  5594   00157E  C019  F085         	movff	?___lldiv+2,_res+2
  5595   001582  C01A  F086         	movff	?___lldiv+3,_res+3
  5596                           
  5597                           ;Lab4.c: 333: }while(res>1);
  5598   001586  0100               	movlb	0	; () banked
  5599   001588  5186               	movf	(_res+3)& (0+255),w,b
  5600   00158A  1185               	iorwf	(_res+2)& (0+255),w,b
  5601   00158C  1184               	iorwf	(_res+1)& (0+255),w,b
  5602   00158E  E1E1               	bnz	l3659
  5603   001590  0E02               	movlw	2
  5604   001592  5D83               	subwf	_res& (0+255),w,b
  5605   001594  B0D8               	btfsc	status,0,c
  5606   001596  D7DD               	goto	l3659
  5607                           
  5608                           ; BSR set to: 0
  5609                           ;Lab4.c: 334: EscribeLCD_n16(r,contador_digitos);
  5610   001598  C033  F024         	movff	Imprimir_Resultado@r,EscribeLCD_n16@a
  5611   00159C  C034  F025         	movff	Imprimir_Resultado@r+1,EscribeLCD_n16@a+1
  5612   0015A0  C035  F026         	movff	Imprimir_Resultado@r+2,EscribeLCD_n16@a+2
  5613   0015A4  C036  F027         	movff	Imprimir_Resultado@r+3,EscribeLCD_n16@a+3
  5614   0015A8  C093  F028         	movff	_contador_digitos,EscribeLCD_n16@b
  5615   0015AC  ECA1  F007         	call	_EscribeLCD_n16	;wreg free
  5616                           
  5617                           ;Lab4.c: 352: }else{
  5618   0015B0  0012               	return	
  5619   0015B2                     l3665:
  5620                           
  5621                           ; BSR set to: 0
  5622                           ;Lab4.c: 353: if(r==1000){
  5623   0015B2  0EE8               	movlw	232
  5624   0015B4  1833               	xorwf	Imprimir_Resultado@r^0,w,c
  5625   0015B6  E10B               	bnz	l3669
  5626   0015B8  0E03               	movlw	3
  5627   0015BA  1834               	xorwf	(Imprimir_Resultado@r+1)^0,w,c
  5628   0015BC  1035               	iorwf	(Imprimir_Resultado@r+2)^0,w,c
  5629   0015BE  1036               	iorwf	(Imprimir_Resultado@r+3)^0,w,c
  5630   0015C0  A4D8               	btfss	status,2,c
  5631   0015C2  D005               	goto	l3669
  5632                           
  5633                           ; BSR set to: 0
  5634                           ;Lab4.c: 354: MensajeLCD_Var("Infinito");
  5635   0015C4  0E9D               	movlw	low STR_14
  5636   0015C6  6E13               	movwf	MensajeLCD_Var@a^0,c
  5637   0015C8  EC6D  F014         	call	_MensajeLCD_Var	;wreg free
  5638                           
  5639                           ;Lab4.c: 355: }else{
  5640   0015CC  0012               	return	
  5641   0015CE                     l3669:
  5642                           
  5643                           ; BSR set to: 0
  5644                           ;Lab4.c: 356: if(r==1001){
  5645   0015CE  0EE9               	movlw	233
  5646   0015D0  1833               	xorwf	Imprimir_Resultado@r^0,w,c
  5647   0015D2  E10E               	bnz	l3675
  5648   0015D4  0E03               	movlw	3
  5649   0015D6  1834               	xorwf	(Imprimir_Resultado@r+1)^0,w,c
  5650   0015D8  1035               	iorwf	(Imprimir_Resultado@r+2)^0,w,c
  5651   0015DA  1036               	iorwf	(Imprimir_Resultado@r+3)^0,w,c
  5652   0015DC  A4D8               	btfss	status,2,c
  5653   0015DE  D008               	goto	l3675
  5654                           
  5655                           ; BSR set to: 0
  5656                           ;Lab4.c: 357: DireccionaLCD(0xC1);
  5657   0015E0  0EC1               	movlw	193
  5658   0015E2  ECAC  F015         	call	_DireccionaLCD
  5659                           
  5660                           ;Lab4.c: 358: MensajeLCD_Var("Indeterminado");
  5661   0015E6  0E57               	movlw	low STR_15
  5662   0015E8  6E13               	movwf	MensajeLCD_Var@a^0,c
  5663   0015EA  EC6D  F014         	call	_MensajeLCD_Var	;wreg free
  5664                           
  5665                           ;Lab4.c: 359: }else{
  5666   0015EE  0012               	return	
  5667   0015F0                     l3675:
  5668                           
  5669                           ; BSR set to: 0
  5670                           ;Lab4.c: 360: EscribeLCD_c(r+'0');
  5671   0015F0  5033               	movf	Imprimir_Resultado@r^0,w,c
  5672   0015F2  0F30               	addlw	48
  5673   0015F4  ECA1  F015         	call	_EscribeLCD_c
  5674   0015F8  0012               	return		;funcret
  5675   0015FA                     __end_of_Imprimir_Resultado:
  5676                           	callstack 0
  5677                           
  5678 ;; *************** function ___wmul *****************
  5679 ;; Defined at:
  5680 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul16.c"
  5681 ;; Parameters:    Size  Location     Type
  5682 ;;  multiplier      2   13[COMRAM] unsigned int 
  5683 ;;  multiplicand    2   15[COMRAM] unsigned int 
  5684 ;; Auto vars:     Size  Location     Type
  5685 ;;  product         2   17[COMRAM] unsigned int 
  5686 ;; Return value:  Size  Location     Type
  5687 ;;                  2   13[COMRAM] unsigned int 
  5688 ;; Registers used:
  5689 ;;		wreg, status,2, status,0, prodl, prodh
  5690 ;; Tracked objects:
  5691 ;;		On entry : 0/0
  5692 ;;		On exit  : 0/0
  5693 ;;		Unchanged: 0/0
  5694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5695 ;;      Params:         4       0       0       0       0       0       0       0       0
  5696 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5697 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5698 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5699 ;;Total ram usage:        6 bytes
  5700 ;; Hardware stack levels used: 1
  5701 ;; Hardware stack levels required when called: 5
  5702 ;; This function calls:
  5703 ;;		Nothing
  5704 ;; This function is called by:
  5705 ;;		_main
  5706 ;;		_factorial_function
  5707 ;;		_Imprimir_Resultado
  5708 ;; This function uses a non-reentrant model
  5709 ;;
  5710                           
  5711                           	psect	text25
  5712   002ABC                     __ptext25:
  5713                           	callstack 0
  5714   002ABC                     ___wmul:
  5715                           	callstack 24
  5716                           
  5717                           ;incstack = 0
  5718   002ABC  500E               	movf	___wmul@multiplier^0,w,c
  5719   002ABE  0210               	mulwf	___wmul@multiplicand^0,c
  5720   002AC0  CFF3 F012          	movff	prodl,___wmul@product
  5721   002AC4  CFF4 F013          	movff	prodh,___wmul@product+1
  5722   002AC8  500E               	movf	___wmul@multiplier^0,w,c
  5723   002ACA  0211               	mulwf	(___wmul@multiplicand+1)^0,c
  5724   002ACC  50F3               	movf	243,w,c
  5725   002ACE  2613               	addwf	(___wmul@product+1)^0,f,c
  5726   002AD0  500F               	movf	(___wmul@multiplier+1)^0,w,c
  5727   002AD2  0210               	mulwf	___wmul@multiplicand^0,c
  5728   002AD4  50F3               	movf	243,w,c
  5729   002AD6  2613               	addwf	(___wmul@product+1)^0,f,c
  5730   002AD8  C012  F00E         	movff	___wmul@product,?___wmul
  5731   002ADC  C013  F00F         	movff	___wmul@product+1,?___wmul+1
  5732   002AE0  0012               	return		;funcret
  5733   002AE2                     __end_of___wmul:
  5734                           	callstack 0
  5735                           
  5736 ;; *************** function ___lwmod *****************
  5737 ;; Defined at:
  5738 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwmod.c"
  5739 ;; Parameters:    Size  Location     Type
  5740 ;;  dividend        2   13[COMRAM] unsigned int 
  5741 ;;  divisor         2   15[COMRAM] unsigned int 
  5742 ;; Auto vars:     Size  Location     Type
  5743 ;;  counter         1   17[COMRAM] unsigned char 
  5744 ;; Return value:  Size  Location     Type
  5745 ;;                  2   13[COMRAM] unsigned int 
  5746 ;; Registers used:
  5747 ;;		wreg, status,2, status,0
  5748 ;; Tracked objects:
  5749 ;;		On entry : 0/0
  5750 ;;		On exit  : 0/0
  5751 ;;		Unchanged: 0/0
  5752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5753 ;;      Params:         4       0       0       0       0       0       0       0       0
  5754 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5755 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5756 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5757 ;;Total ram usage:        5 bytes
  5758 ;; Hardware stack levels used: 1
  5759 ;; Hardware stack levels required when called: 5
  5760 ;; This function calls:
  5761 ;;		Nothing
  5762 ;; This function is called by:
  5763 ;;		_Imprimir_Resultado
  5764 ;; This function uses a non-reentrant model
  5765 ;;
  5766                           
  5767                           	psect	text26
  5768   002A02                     __ptext26:
  5769                           	callstack 0
  5770   002A02                     ___lwmod:
  5771                           	callstack 24
  5772                           
  5773                           ;incstack = 0
  5774   002A02  5010               	movf	___lwmod@divisor^0,w,c
  5775   002A04  1011               	iorwf	(___lwmod@divisor+1)^0,w,c
  5776   002A06  B4D8               	btfsc	status,2,c
  5777   002A08  D018               	goto	l834
  5778   002A0A  0E01               	movlw	1
  5779   002A0C  6E12               	movwf	___lwmod@counter^0,c
  5780   002A0E  D004               	goto	l3261
  5781   002A10                     l3259:
  5782   002A10  90D8               	bcf	status,0,c
  5783   002A12  3610               	rlcf	___lwmod@divisor^0,f,c
  5784   002A14  3611               	rlcf	(___lwmod@divisor+1)^0,f,c
  5785   002A16  2A12               	incf	___lwmod@counter^0,f,c
  5786   002A18                     l3261:
  5787   002A18  AE11               	btfss	(___lwmod@divisor+1)^0,7,c
  5788   002A1A  D7FA               	goto	l3259
  5789   002A1C                     u3310:
  5790   002A1C  5010               	movf	___lwmod@divisor^0,w,c
  5791   002A1E  5C0E               	subwf	___lwmod@dividend^0,w,c
  5792   002A20  5011               	movf	(___lwmod@divisor+1)^0,w,c
  5793   002A22  580F               	subwfb	(___lwmod@dividend+1)^0,w,c
  5794   002A24  A0D8               	btfss	status,0,c
  5795   002A26  D004               	goto	l3267
  5796   002A28  5010               	movf	___lwmod@divisor^0,w,c
  5797   002A2A  5E0E               	subwf	___lwmod@dividend^0,f,c
  5798   002A2C  5011               	movf	(___lwmod@divisor+1)^0,w,c
  5799   002A2E  5A0F               	subwfb	(___lwmod@dividend+1)^0,f,c
  5800   002A30                     l3267:
  5801   002A30  90D8               	bcf	status,0,c
  5802   002A32  3211               	rrcf	(___lwmod@divisor+1)^0,f,c
  5803   002A34  3210               	rrcf	___lwmod@divisor^0,f,c
  5804   002A36  2E12               	decfsz	___lwmod@counter^0,f,c
  5805   002A38  D7F1               	goto	u3310
  5806   002A3A                     l834:
  5807   002A3A  C00E  F00E         	movff	___lwmod@dividend,?___lwmod
  5808   002A3E  C00F  F00F         	movff	___lwmod@dividend+1,?___lwmod+1
  5809   002A42  0012               	return		;funcret
  5810   002A44                     __end_of___lwmod:
  5811                           	callstack 0
  5812                           
  5813 ;; *************** function ___lwdiv *****************
  5814 ;; Defined at:
  5815 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwdiv.c"
  5816 ;; Parameters:    Size  Location     Type
  5817 ;;  dividend        2   19[COMRAM] unsigned int 
  5818 ;;  divisor         2   21[COMRAM] unsigned int 
  5819 ;; Auto vars:     Size  Location     Type
  5820 ;;  quotient        2   23[COMRAM] unsigned int 
  5821 ;;  counter         1   25[COMRAM] unsigned char 
  5822 ;; Return value:  Size  Location     Type
  5823 ;;                  2   19[COMRAM] unsigned int 
  5824 ;; Registers used:
  5825 ;;		wreg, status,2, status,0
  5826 ;; Tracked objects:
  5827 ;;		On entry : 0/0
  5828 ;;		On exit  : 0/0
  5829 ;;		Unchanged: 0/0
  5830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5831 ;;      Params:         4       0       0       0       0       0       0       0       0
  5832 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5833 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5834 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5835 ;;Total ram usage:        7 bytes
  5836 ;; Hardware stack levels used: 1
  5837 ;; Hardware stack levels required when called: 5
  5838 ;; This function calls:
  5839 ;;		Nothing
  5840 ;; This function is called by:
  5841 ;;		_main
  5842 ;;		_Imprimir_Resultado
  5843 ;; This function uses a non-reentrant model
  5844 ;;
  5845                           
  5846                           	psect	text27
  5847   002888                     __ptext27:
  5848                           	callstack 0
  5849   002888                     ___lwdiv:
  5850                           	callstack 25
  5851                           
  5852                           ;incstack = 0
  5853   002888  0E00               	movlw	0
  5854   00288A  6E19               	movwf	(___lwdiv@quotient+1)^0,c
  5855   00288C  0E00               	movlw	0
  5856   00288E  6E18               	movwf	___lwdiv@quotient^0,c
  5857   002890  5016               	movf	___lwdiv@divisor^0,w,c
  5858   002892  1017               	iorwf	(___lwdiv@divisor+1)^0,w,c
  5859   002894  B4D8               	btfsc	status,2,c
  5860   002896  D01C               	goto	l824
  5861   002898  0E01               	movlw	1
  5862   00289A  6E1A               	movwf	___lwdiv@counter^0,c
  5863   00289C  D004               	goto	l3241
  5864   00289E                     l3239:
  5865   00289E  90D8               	bcf	status,0,c
  5866   0028A0  3616               	rlcf	___lwdiv@divisor^0,f,c
  5867   0028A2  3617               	rlcf	(___lwdiv@divisor+1)^0,f,c
  5868   0028A4  2A1A               	incf	___lwdiv@counter^0,f,c
  5869   0028A6                     l3241:
  5870   0028A6  AE17               	btfss	(___lwdiv@divisor+1)^0,7,c
  5871   0028A8  D7FA               	goto	l3239
  5872   0028AA                     u3280:
  5873   0028AA  90D8               	bcf	status,0,c
  5874   0028AC  3618               	rlcf	___lwdiv@quotient^0,f,c
  5875   0028AE  3619               	rlcf	(___lwdiv@quotient+1)^0,f,c
  5876   0028B0  5016               	movf	___lwdiv@divisor^0,w,c
  5877   0028B2  5C14               	subwf	___lwdiv@dividend^0,w,c
  5878   0028B4  5017               	movf	(___lwdiv@divisor+1)^0,w,c
  5879   0028B6  5815               	subwfb	(___lwdiv@dividend+1)^0,w,c
  5880   0028B8  A0D8               	btfss	status,0,c
  5881   0028BA  D005               	goto	l3251
  5882   0028BC  5016               	movf	___lwdiv@divisor^0,w,c
  5883   0028BE  5E14               	subwf	___lwdiv@dividend^0,f,c
  5884   0028C0  5017               	movf	(___lwdiv@divisor+1)^0,w,c
  5885   0028C2  5A15               	subwfb	(___lwdiv@dividend+1)^0,f,c
  5886   0028C4  8018               	bsf	___lwdiv@quotient^0,0,c
  5887   0028C6                     l3251:
  5888   0028C6  90D8               	bcf	status,0,c
  5889   0028C8  3217               	rrcf	(___lwdiv@divisor+1)^0,f,c
  5890   0028CA  3216               	rrcf	___lwdiv@divisor^0,f,c
  5891   0028CC  2E1A               	decfsz	___lwdiv@counter^0,f,c
  5892   0028CE  D7ED               	goto	u3280
  5893   0028D0                     l824:
  5894   0028D0  C018  F014         	movff	___lwdiv@quotient,?___lwdiv
  5895   0028D4  C019  F015         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5896   0028D8  0012               	return		;funcret
  5897   0028DA                     __end_of___lwdiv:
  5898                           	callstack 0
  5899                           
  5900 ;; *************** function ___lmul *****************
  5901 ;; Defined at:
  5902 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul32.c"
  5903 ;; Parameters:    Size  Location     Type
  5904 ;;  multiplier      4   13[COMRAM] unsigned long 
  5905 ;;  multiplicand    4   17[COMRAM] unsigned long 
  5906 ;; Auto vars:     Size  Location     Type
  5907 ;;  product         4   21[COMRAM] unsigned long 
  5908 ;; Return value:  Size  Location     Type
  5909 ;;                  4   13[COMRAM] unsigned long 
  5910 ;; Registers used:
  5911 ;;		wreg, status,2, status,0
  5912 ;; Tracked objects:
  5913 ;;		On entry : 0/0
  5914 ;;		On exit  : 0/0
  5915 ;;		Unchanged: 0/0
  5916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5917 ;;      Params:         8       0       0       0       0       0       0       0       0
  5918 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5919 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5920 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5921 ;;Total ram usage:       12 bytes
  5922 ;; Hardware stack levels used: 1
  5923 ;; Hardware stack levels required when called: 5
  5924 ;; This function calls:
  5925 ;;		Nothing
  5926 ;; This function is called by:
  5927 ;;		_main
  5928 ;;		_Imprimir_Resultado
  5929 ;; This function uses a non-reentrant model
  5930 ;;
  5931                           
  5932                           	psect	text28
  5933   002786                     __ptext28:
  5934                           	callstack 0
  5935   002786                     ___lmul:
  5936                           	callstack 25
  5937                           
  5938                           ;incstack = 0
  5939   002786  0E00               	movlw	0
  5940   002788  6E16               	movwf	___lmul@product^0,c
  5941   00278A  0E00               	movlw	0
  5942   00278C  6E17               	movwf	(___lmul@product+1)^0,c
  5943   00278E  0E00               	movlw	0
  5944   002790  6E18               	movwf	(___lmul@product+2)^0,c
  5945   002792  0E00               	movlw	0
  5946   002794  6E19               	movwf	(___lmul@product+3)^0,c
  5947   002796                     l3215:
  5948   002796  A00E               	btfss	___lmul@multiplier^0,0,c
  5949   002798  D008               	goto	l3219
  5950   00279A  5012               	movf	___lmul@multiplicand^0,w,c
  5951   00279C  2616               	addwf	___lmul@product^0,f,c
  5952   00279E  5013               	movf	(___lmul@multiplicand+1)^0,w,c
  5953   0027A0  2217               	addwfc	(___lmul@product+1)^0,f,c
  5954   0027A2  5014               	movf	(___lmul@multiplicand+2)^0,w,c
  5955   0027A4  2218               	addwfc	(___lmul@product+2)^0,f,c
  5956   0027A6  5015               	movf	(___lmul@multiplicand+3)^0,w,c
  5957   0027A8  2219               	addwfc	(___lmul@product+3)^0,f,c
  5958   0027AA                     l3219:
  5959   0027AA  90D8               	bcf	status,0,c
  5960   0027AC  3612               	rlcf	___lmul@multiplicand^0,f,c
  5961   0027AE  3613               	rlcf	(___lmul@multiplicand+1)^0,f,c
  5962   0027B0  3614               	rlcf	(___lmul@multiplicand+2)^0,f,c
  5963   0027B2  3615               	rlcf	(___lmul@multiplicand+3)^0,f,c
  5964   0027B4  90D8               	bcf	status,0,c
  5965   0027B6  3211               	rrcf	(___lmul@multiplier+3)^0,f,c
  5966   0027B8  3210               	rrcf	(___lmul@multiplier+2)^0,f,c
  5967   0027BA  320F               	rrcf	(___lmul@multiplier+1)^0,f,c
  5968   0027BC  320E               	rrcf	___lmul@multiplier^0,f,c
  5969   0027BE  500E               	movf	___lmul@multiplier^0,w,c
  5970   0027C0  100F               	iorwf	(___lmul@multiplier+1)^0,w,c
  5971   0027C2  1010               	iorwf	(___lmul@multiplier+2)^0,w,c
  5972   0027C4  1011               	iorwf	(___lmul@multiplier+3)^0,w,c
  5973   0027C6  A4D8               	btfss	status,2,c
  5974   0027C8  D7E6               	goto	l3215
  5975   0027CA  C016  F00E         	movff	___lmul@product,?___lmul
  5976   0027CE  C017  F00F         	movff	___lmul@product+1,?___lmul+1
  5977   0027D2  C018  F010         	movff	___lmul@product+2,?___lmul+2
  5978   0027D6  C019  F011         	movff	___lmul@product+3,?___lmul+3
  5979   0027DA  0012               	return		;funcret
  5980   0027DC                     __end_of___lmul:
  5981                           	callstack 0
  5982                           
  5983 ;; *************** function _MensajeLCD_Var *****************
  5984 ;; Defined at:
  5985 ;;		line 260 in file "LibLCDXC8.h"
  5986 ;; Parameters:    Size  Location     Type
  5987 ;;  a               1   18[COMRAM] PTR unsigned char 
  5988 ;;		 -> STR_15(14), STR_14(9), STR_13(12), STR_12(10), 
  5989 ;;		 -> STR_11(13), STR_10(9), STR_9(11), STR_8(9), 
  5990 ;;		 -> STR_7(15), STR_6(9), STR_5(10), STR_4(9), 
  5991 ;;		 -> STR_3(14), STR_2(5), STR_1(8), 
  5992 ;; Auto vars:     Size  Location     Type
  5993 ;;  i               2   20[COMRAM] int 
  5994 ;; Return value:  Size  Location     Type
  5995 ;;                  1    wreg      void 
  5996 ;; Registers used:
  5997 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5998 ;; Tracked objects:
  5999 ;;		On entry : 0/0
  6000 ;;		On exit  : 0/0
  6001 ;;		Unchanged: 0/0
  6002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6003 ;;      Params:         1       0       0       0       0       0       0       0       0
  6004 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6005 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6006 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6007 ;;Total ram usage:        4 bytes
  6008 ;; Hardware stack levels used: 1
  6009 ;; Hardware stack levels required when called: 8
  6010 ;; This function calls:
  6011 ;;		_EscribeLCD_c
  6012 ;; This function is called by:
  6013 ;;		_main
  6014 ;;		_Imprimir_Resultado
  6015 ;; This function uses a non-reentrant model
  6016 ;;
  6017                           
  6018                           	psect	text29
  6019   0028DA                     __ptext29:
  6020                           	callstack 0
  6021   0028DA                     _MensajeLCD_Var:
  6022                           	callstack 22
  6023                           
  6024                           ;LibLCDXC8.h: 264: for(int i = 0; i<16; i++){
  6025                           
  6026                           ;incstack = 0
  6027   0028DA  0E00               	movlw	0
  6028   0028DC  6E16               	movwf	(MensajeLCD_Var@i+1)^0,c
  6029   0028DE  0E00               	movlw	0
  6030   0028E0  6E15               	movwf	MensajeLCD_Var@i^0,c
  6031   0028E2                     l3189:
  6032                           
  6033                           ;LibLCDXC8.h: 265: if(a[i] == (0)){
  6034   0028E2  5013               	movf	MensajeLCD_Var@a^0,w,c
  6035   0028E4  2415               	addwf	MensajeLCD_Var@i^0,w,c
  6036   0028E6  6E14               	movwf	??_MensajeLCD_Var^0,c
  6037   0028E8  C014  FFF6         	movff	??_MensajeLCD_Var,tblptrl
  6038   0028EC                     	if	1	;There is more than 1 active tblptr byte
  6039   0028EC  0E08               	movlw	high __smallconst
  6040   0028EE  6EF7               	movwf	tblptrh,c
  6041   0028F0                     	endif
  6042   0028F0                     	if	0	;tblptru may be non-zero
  6043   0028F0                     	endif
  6044   0028F0                     	if	0	;tblptru may be non-zero
  6045   0028F0                     	endif
  6046   0028F0  0008               	tblrd		*
  6047   0028F2  50F5               	movf	tablat,w,c
  6048   0028F4  0900               	iorlw	0
  6049   0028F6  B4D8               	btfsc	status,2,c
  6050   0028F8  0012               	return	
  6051                           
  6052                           ;LibLCDXC8.h: 267: };LibLCDXC8.h: 268: EscribeLCD_c(a[i]);
  6053   0028FA  5013               	movf	MensajeLCD_Var@a^0,w,c
  6054   0028FC  2415               	addwf	MensajeLCD_Var@i^0,w,c
  6055   0028FE  6E14               	movwf	??_MensajeLCD_Var^0,c
  6056   002900  C014  FFF6         	movff	??_MensajeLCD_Var,tblptrl
  6057   002904                     	if	1	;There is more than 1 active tblptr byte
  6058   002904  0E08               	movlw	high __smallconst
  6059   002906  6EF7               	movwf	tblptrh,c
  6060   002908                     	endif
  6061   002908                     	if	0	;tblptru may be non-zero
  6062   002908                     	endif
  6063   002908                     	if	0	;tblptru may be non-zero
  6064   002908                     	endif
  6065   002908  0008               	tblrd		*
  6066   00290A  50F5               	movf	tablat,w,c
  6067   00290C  ECA1  F015         	call	_EscribeLCD_c
  6068   002910  4A15               	infsnz	MensajeLCD_Var@i^0,f,c
  6069   002912  2A16               	incf	(MensajeLCD_Var@i+1)^0,f,c
  6070   002914  BE16               	btfsc	(MensajeLCD_Var@i+1)^0,7,c
  6071   002916  D7E5               	goto	l3189
  6072   002918  5016               	movf	(MensajeLCD_Var@i+1)^0,w,c
  6073   00291A  E105               	bnz	u3230
  6074   00291C  0E10               	movlw	16
  6075   00291E  5C15               	subwf	MensajeLCD_Var@i^0,w,c
  6076   002920  B0D8               	btfsc	status,0,c
  6077   002922  0012               	return	
  6078   002924  D7DE               	goto	l3189
  6079   002926                     u3230:
  6080   002926  0012               	return		;funcret
  6081   002928                     __end_of_MensajeLCD_Var:
  6082                           	callstack 0
  6083                           
  6084 ;; *************** function _EscribeLCD_n16 *****************
  6085 ;; Defined at:
  6086 ;;		line 214 in file "LibLCDXC8.h"
  6087 ;; Parameters:    Size  Location     Type
  6088 ;;  a               4   35[COMRAM] unsigned long 
  6089 ;;  b               1   39[COMRAM] unsigned char 
  6090 ;; Auto vars:     Size  Location     Type
  6091 ;;  centena         4   44[COMRAM] unsigned long 
  6092 ;;  millar          4   40[COMRAM] unsigned long 
  6093 ;;  unidad          1   49[COMRAM] unsigned char 
  6094 ;;  decena          1   48[COMRAM] unsigned char 
  6095 ;; Return value:  Size  Location     Type
  6096 ;;                  1    wreg      void 
  6097 ;; Registers used:
  6098 ;;		wreg, status,2, status,0, cstack
  6099 ;; Tracked objects:
  6100 ;;		On entry : 3F/0
  6101 ;;		On exit  : 0/0
  6102 ;;		Unchanged: 0/0
  6103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6104 ;;      Params:         5       0       0       0       0       0       0       0       0
  6105 ;;      Locals:        10       0       0       0       0       0       0       0       0
  6106 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6107 ;;      Totals:        15       0       0       0       0       0       0       0       0
  6108 ;;Total ram usage:       15 bytes
  6109 ;; Hardware stack levels used: 1
  6110 ;; Hardware stack levels required when called: 8
  6111 ;; This function calls:
  6112 ;;		_EscribeLCD_c
  6113 ;;		___lldiv
  6114 ;;		___llmod
  6115 ;; This function is called by:
  6116 ;;		_Imprimir_Resultado
  6117 ;; This function uses a non-reentrant model
  6118 ;;
  6119                           
  6120                           	psect	text30
  6121   000F42                     __ptext30:
  6122                           	callstack 0
  6123   000F42                     _EscribeLCD_n16:
  6124                           	callstack 21
  6125                           
  6126                           ; BSR set to: 0
  6127                           ;LibLCDXC8.h: 219: unsigned char decena,unidad;;LibLCDXC8.h: 220: unsigned long centena,
      +                          millar;;LibLCDXC8.h: 221: LATE0=1;
  6128                           
  6129                           ;incstack = 0
  6130   000F42  808D               	bsf	3981,0,c	;volatile
  6131                           
  6132                           ;LibLCDXC8.h: 222: switch(b){
  6133   000F44  D22B               	goto	l3181
  6134   000F46                     l3169:
  6135                           
  6136                           ; BSR set to: 0
  6137   000F46  C024  F00E         	movff	EscribeLCD_n16@a,___llmod@dividend
  6138   000F4A  C025  F00F         	movff	EscribeLCD_n16@a+1,___llmod@dividend+1
  6139   000F4E  C026  F010         	movff	EscribeLCD_n16@a+2,___llmod@dividend+2
  6140   000F52  C027  F011         	movff	EscribeLCD_n16@a+3,___llmod@dividend+3
  6141   000F56  0E0A               	movlw	10
  6142   000F58  6E12               	movwf	___llmod@divisor^0,c
  6143   000F5A  0E00               	movlw	0
  6144   000F5C  6E13               	movwf	(___llmod@divisor+1)^0,c
  6145   000F5E  0E00               	movlw	0
  6146   000F60  6E14               	movwf	(___llmod@divisor+2)^0,c
  6147   000F62  0E00               	movlw	0
  6148   000F64  6E15               	movwf	(___llmod@divisor+3)^0,c
  6149   000F66  EC0B  F013         	call	___llmod	;wreg free
  6150   000F6A  500E               	movf	?___llmod^0,w,c
  6151   000F6C  6E32               	movwf	EscribeLCD_n16@unidad^0,c
  6152                           
  6153                           ;LibLCDXC8.h: 224: EscribeLCD_c(unidad+48);
  6154   000F6E  5032               	movf	EscribeLCD_n16@unidad^0,w,c
  6155   000F70  0F30               	addlw	48
  6156   000F72  ECA1  F015         	call	_EscribeLCD_c
  6157                           
  6158                           ;LibLCDXC8.h: 225: break;
  6159   000F76  0012               	return	
  6160   000F78                     l3171:
  6161                           
  6162                           ; BSR set to: 0
  6163   000F78  0E64               	movlw	100
  6164   000F7A  6E12               	movwf	___llmod@divisor^0,c
  6165   000F7C  0E00               	movlw	0
  6166   000F7E  6E13               	movwf	(___llmod@divisor+1)^0,c
  6167   000F80  0E00               	movlw	0
  6168   000F82  6E14               	movwf	(___llmod@divisor+2)^0,c
  6169   000F84  0E00               	movlw	0
  6170   000F86  6E15               	movwf	(___llmod@divisor+3)^0,c
  6171   000F88  C024  F00E         	movff	EscribeLCD_n16@a,___llmod@dividend
  6172   000F8C  C025  F00F         	movff	EscribeLCD_n16@a+1,___llmod@dividend+1
  6173   000F90  C026  F010         	movff	EscribeLCD_n16@a+2,___llmod@dividend+2
  6174   000F94  C027  F011         	movff	EscribeLCD_n16@a+3,___llmod@dividend+3
  6175   000F98  EC0B  F013         	call	___llmod	;wreg free
  6176   000F9C  C00E  F017         	movff	?___llmod,___lldiv@dividend
  6177   000FA0  C00F  F018         	movff	?___llmod+1,___lldiv@dividend+1
  6178   000FA4  C010  F019         	movff	?___llmod+2,___lldiv@dividend+2
  6179   000FA8  C011  F01A         	movff	?___llmod+3,___lldiv@dividend+3
  6180   000FAC  0E0A               	movlw	10
  6181   000FAE  6E1B               	movwf	___lldiv@divisor^0,c
  6182   000FB0  0E00               	movlw	0
  6183   000FB2  6E1C               	movwf	(___lldiv@divisor+1)^0,c
  6184   000FB4  0E00               	movlw	0
  6185   000FB6  6E1D               	movwf	(___lldiv@divisor+2)^0,c
  6186   000FB8  0E00               	movlw	0
  6187   000FBA  6E1E               	movwf	(___lldiv@divisor+3)^0,c
  6188   000FBC  EC17  F012         	call	___lldiv	;wreg free
  6189   000FC0  5017               	movf	?___lldiv^0,w,c
  6190   000FC2  6E31               	movwf	EscribeLCD_n16@decena^0,c
  6191                           
  6192                           ;LibLCDXC8.h: 227: unidad=a%10;
  6193   000FC4  C024  F00E         	movff	EscribeLCD_n16@a,___llmod@dividend
  6194   000FC8  C025  F00F         	movff	EscribeLCD_n16@a+1,___llmod@dividend+1
  6195   000FCC  C026  F010         	movff	EscribeLCD_n16@a+2,___llmod@dividend+2
  6196   000FD0  C027  F011         	movff	EscribeLCD_n16@a+3,___llmod@dividend+3
  6197   000FD4  0E0A               	movlw	10
  6198   000FD6  6E12               	movwf	___llmod@divisor^0,c
  6199   000FD8  0E00               	movlw	0
  6200   000FDA  6E13               	movwf	(___llmod@divisor+1)^0,c
  6201   000FDC  0E00               	movlw	0
  6202   000FDE  6E14               	movwf	(___llmod@divisor+2)^0,c
  6203   000FE0  0E00               	movlw	0
  6204   000FE2  6E15               	movwf	(___llmod@divisor+3)^0,c
  6205   000FE4  EC0B  F013         	call	___llmod	;wreg free
  6206   000FE8  500E               	movf	?___llmod^0,w,c
  6207   000FEA  6E32               	movwf	EscribeLCD_n16@unidad^0,c
  6208                           
  6209                           ;LibLCDXC8.h: 228: EscribeLCD_c(decena+48);
  6210   000FEC  5031               	movf	EscribeLCD_n16@decena^0,w,c
  6211   000FEE  0F30               	addlw	48
  6212   000FF0  ECA1  F015         	call	_EscribeLCD_c
  6213                           
  6214                           ;LibLCDXC8.h: 229: EscribeLCD_c(unidad+48);
  6215   000FF4  5032               	movf	EscribeLCD_n16@unidad^0,w,c
  6216   000FF6  0F30               	addlw	48
  6217   000FF8  ECA1  F015         	call	_EscribeLCD_c
  6218                           
  6219                           ;LibLCDXC8.h: 230: break;
  6220   000FFC  0012               	return	
  6221   000FFE                     l3173:
  6222                           
  6223                           ; BSR set to: 0
  6224   000FFE  0EE8               	movlw	232
  6225   001000  6E12               	movwf	___llmod@divisor^0,c
  6226   001002  0E03               	movlw	3
  6227   001004  6E13               	movwf	(___llmod@divisor+1)^0,c
  6228   001006  0E00               	movlw	0
  6229   001008  6E14               	movwf	(___llmod@divisor+2)^0,c
  6230   00100A  0E00               	movlw	0
  6231   00100C  6E15               	movwf	(___llmod@divisor+3)^0,c
  6232   00100E  C024  F00E         	movff	EscribeLCD_n16@a,___llmod@dividend
  6233   001012  C025  F00F         	movff	EscribeLCD_n16@a+1,___llmod@dividend+1
  6234   001016  C026  F010         	movff	EscribeLCD_n16@a+2,___llmod@dividend+2
  6235   00101A  C027  F011         	movff	EscribeLCD_n16@a+3,___llmod@dividend+3
  6236   00101E  EC0B  F013         	call	___llmod	;wreg free
  6237   001022  C00E  F017         	movff	?___llmod,___lldiv@dividend
  6238   001026  C00F  F018         	movff	?___llmod+1,___lldiv@dividend+1
  6239   00102A  C010  F019         	movff	?___llmod+2,___lldiv@dividend+2
  6240   00102E  C011  F01A         	movff	?___llmod+3,___lldiv@dividend+3
  6241   001032  0E64               	movlw	100
  6242   001034  6E1B               	movwf	___lldiv@divisor^0,c
  6243   001036  0E00               	movlw	0
  6244   001038  6E1C               	movwf	(___lldiv@divisor+1)^0,c
  6245   00103A  0E00               	movlw	0
  6246   00103C  6E1D               	movwf	(___lldiv@divisor+2)^0,c
  6247   00103E  0E00               	movlw	0
  6248   001040  6E1E               	movwf	(___lldiv@divisor+3)^0,c
  6249   001042  EC17  F012         	call	___lldiv	;wreg free
  6250   001046  C017  F02D         	movff	?___lldiv,EscribeLCD_n16@centena
  6251   00104A  C018  F02E         	movff	?___lldiv+1,EscribeLCD_n16@centena+1
  6252   00104E  C019  F02F         	movff	?___lldiv+2,EscribeLCD_n16@centena+2
  6253   001052  C01A  F030         	movff	?___lldiv+3,EscribeLCD_n16@centena+3
  6254                           
  6255                           ;LibLCDXC8.h: 232: decena=(a%100)/10;
  6256   001056  0E64               	movlw	100
  6257   001058  6E12               	movwf	___llmod@divisor^0,c
  6258   00105A  0E00               	movlw	0
  6259   00105C  6E13               	movwf	(___llmod@divisor+1)^0,c
  6260   00105E  0E00               	movlw	0
  6261   001060  6E14               	movwf	(___llmod@divisor+2)^0,c
  6262   001062  0E00               	movlw	0
  6263   001064  6E15               	movwf	(___llmod@divisor+3)^0,c
  6264   001066  C024  F00E         	movff	EscribeLCD_n16@a,___llmod@dividend
  6265   00106A  C025  F00F         	movff	EscribeLCD_n16@a+1,___llmod@dividend+1
  6266   00106E  C026  F010         	movff	EscribeLCD_n16@a+2,___llmod@dividend+2
  6267   001072  C027  F011         	movff	EscribeLCD_n16@a+3,___llmod@dividend+3
  6268   001076  EC0B  F013         	call	___llmod	;wreg free
  6269   00107A  C00E  F017         	movff	?___llmod,___lldiv@dividend
  6270   00107E  C00F  F018         	movff	?___llmod+1,___lldiv@dividend+1
  6271   001082  C010  F019         	movff	?___llmod+2,___lldiv@dividend+2
  6272   001086  C011  F01A         	movff	?___llmod+3,___lldiv@dividend+3
  6273   00108A  0E0A               	movlw	10
  6274   00108C  6E1B               	movwf	___lldiv@divisor^0,c
  6275   00108E  0E00               	movlw	0
  6276   001090  6E1C               	movwf	(___lldiv@divisor+1)^0,c
  6277   001092  0E00               	movlw	0
  6278   001094  6E1D               	movwf	(___lldiv@divisor+2)^0,c
  6279   001096  0E00               	movlw	0
  6280   001098  6E1E               	movwf	(___lldiv@divisor+3)^0,c
  6281   00109A  EC17  F012         	call	___lldiv	;wreg free
  6282   00109E  5017               	movf	?___lldiv^0,w,c
  6283   0010A0  6E31               	movwf	EscribeLCD_n16@decena^0,c
  6284                           
  6285                           ;LibLCDXC8.h: 233: unidad=a%10;
  6286   0010A2  C024  F00E         	movff	EscribeLCD_n16@a,___llmod@dividend
  6287   0010A6  C025  F00F         	movff	EscribeLCD_n16@a+1,___llmod@dividend+1
  6288   0010AA  C026  F010         	movff	EscribeLCD_n16@a+2,___llmod@dividend+2
  6289   0010AE  C027  F011         	movff	EscribeLCD_n16@a+3,___llmod@dividend+3
  6290   0010B2  0E0A               	movlw	10
  6291   0010B4  6E12               	movwf	___llmod@divisor^0,c
  6292   0010B6  0E00               	movlw	0
  6293   0010B8  6E13               	movwf	(___llmod@divisor+1)^0,c
  6294   0010BA  0E00               	movlw	0
  6295   0010BC  6E14               	movwf	(___llmod@divisor+2)^0,c
  6296   0010BE  0E00               	movlw	0
  6297   0010C0  6E15               	movwf	(___llmod@divisor+3)^0,c
  6298   0010C2  EC0B  F013         	call	___llmod	;wreg free
  6299   0010C6  500E               	movf	?___llmod^0,w,c
  6300   0010C8  6E32               	movwf	EscribeLCD_n16@unidad^0,c
  6301                           
  6302                           ;LibLCDXC8.h: 234: EscribeLCD_c(centena+48);
  6303   0010CA  502D               	movf	EscribeLCD_n16@centena^0,w,c
  6304   0010CC  0F30               	addlw	48
  6305   0010CE  ECA1  F015         	call	_EscribeLCD_c
  6306                           
  6307                           ;LibLCDXC8.h: 235: EscribeLCD_c(decena+48);
  6308   0010D2  5031               	movf	EscribeLCD_n16@decena^0,w,c
  6309   0010D4  0F30               	addlw	48
  6310   0010D6  ECA1  F015         	call	_EscribeLCD_c
  6311                           
  6312                           ;LibLCDXC8.h: 236: EscribeLCD_c(unidad+48);
  6313   0010DA  5032               	movf	EscribeLCD_n16@unidad^0,w,c
  6314   0010DC  0F30               	addlw	48
  6315   0010DE  ECA1  F015         	call	_EscribeLCD_c
  6316                           
  6317                           ;LibLCDXC8.h: 237: break;
  6318   0010E2  0012               	return	
  6319   0010E4                     l3175:
  6320                           
  6321                           ; BSR set to: 0
  6322   0010E4  0E10               	movlw	16
  6323   0010E6  6E12               	movwf	___llmod@divisor^0,c
  6324   0010E8  0E27               	movlw	39
  6325   0010EA  6E13               	movwf	(___llmod@divisor+1)^0,c
  6326   0010EC  0E00               	movlw	0
  6327   0010EE  6E14               	movwf	(___llmod@divisor+2)^0,c
  6328   0010F0  0E00               	movlw	0
  6329   0010F2  6E15               	movwf	(___llmod@divisor+3)^0,c
  6330   0010F4  C024  F00E         	movff	EscribeLCD_n16@a,___llmod@dividend
  6331   0010F8  C025  F00F         	movff	EscribeLCD_n16@a+1,___llmod@dividend+1
  6332   0010FC  C026  F010         	movff	EscribeLCD_n16@a+2,___llmod@dividend+2
  6333   001100  C027  F011         	movff	EscribeLCD_n16@a+3,___llmod@dividend+3
  6334   001104  EC0B  F013         	call	___llmod	;wreg free
  6335   001108  C00E  F017         	movff	?___llmod,___lldiv@dividend
  6336   00110C  C00F  F018         	movff	?___llmod+1,___lldiv@dividend+1
  6337   001110  C010  F019         	movff	?___llmod+2,___lldiv@dividend+2
  6338   001114  C011  F01A         	movff	?___llmod+3,___lldiv@dividend+3
  6339   001118  0EE8               	movlw	232
  6340   00111A  6E1B               	movwf	___lldiv@divisor^0,c
  6341   00111C  0E03               	movlw	3
  6342   00111E  6E1C               	movwf	(___lldiv@divisor+1)^0,c
  6343   001120  0E00               	movlw	0
  6344   001122  6E1D               	movwf	(___lldiv@divisor+2)^0,c
  6345   001124  0E00               	movlw	0
  6346   001126  6E1E               	movwf	(___lldiv@divisor+3)^0,c
  6347   001128  EC17  F012         	call	___lldiv	;wreg free
  6348   00112C  C017  F029         	movff	?___lldiv,EscribeLCD_n16@millar
  6349   001130  C018  F02A         	movff	?___lldiv+1,EscribeLCD_n16@millar+1
  6350   001134  C019  F02B         	movff	?___lldiv+2,EscribeLCD_n16@millar+2
  6351   001138  C01A  F02C         	movff	?___lldiv+3,EscribeLCD_n16@millar+3
  6352                           
  6353                           ;LibLCDXC8.h: 239: centena=(a%1000)/100;
  6354   00113C  0EE8               	movlw	232
  6355   00113E  6E12               	movwf	___llmod@divisor^0,c
  6356   001140  0E03               	movlw	3
  6357   001142  6E13               	movwf	(___llmod@divisor+1)^0,c
  6358   001144  0E00               	movlw	0
  6359   001146  6E14               	movwf	(___llmod@divisor+2)^0,c
  6360   001148  0E00               	movlw	0
  6361   00114A  6E15               	movwf	(___llmod@divisor+3)^0,c
  6362   00114C  C024  F00E         	movff	EscribeLCD_n16@a,___llmod@dividend
  6363   001150  C025  F00F         	movff	EscribeLCD_n16@a+1,___llmod@dividend+1
  6364   001154  C026  F010         	movff	EscribeLCD_n16@a+2,___llmod@dividend+2
  6365   001158  C027  F011         	movff	EscribeLCD_n16@a+3,___llmod@dividend+3
  6366   00115C  EC0B  F013         	call	___llmod	;wreg free
  6367   001160  C00E  F017         	movff	?___llmod,___lldiv@dividend
  6368   001164  C00F  F018         	movff	?___llmod+1,___lldiv@dividend+1
  6369   001168  C010  F019         	movff	?___llmod+2,___lldiv@dividend+2
  6370   00116C  C011  F01A         	movff	?___llmod+3,___lldiv@dividend+3
  6371   001170  0E64               	movlw	100
  6372   001172  6E1B               	movwf	___lldiv@divisor^0,c
  6373   001174  0E00               	movlw	0
  6374   001176  6E1C               	movwf	(___lldiv@divisor+1)^0,c
  6375   001178  0E00               	movlw	0
  6376   00117A  6E1D               	movwf	(___lldiv@divisor+2)^0,c
  6377   00117C  0E00               	movlw	0
  6378   00117E  6E1E               	movwf	(___lldiv@divisor+3)^0,c
  6379   001180  EC17  F012         	call	___lldiv	;wreg free
  6380   001184  C017  F02D         	movff	?___lldiv,EscribeLCD_n16@centena
  6381   001188  C018  F02E         	movff	?___lldiv+1,EscribeLCD_n16@centena+1
  6382   00118C  C019  F02F         	movff	?___lldiv+2,EscribeLCD_n16@centena+2
  6383   001190  C01A  F030         	movff	?___lldiv+3,EscribeLCD_n16@centena+3
  6384                           
  6385                           ;LibLCDXC8.h: 240: decena=(a%100)/10;
  6386   001194  0E64               	movlw	100
  6387   001196  6E12               	movwf	___llmod@divisor^0,c
  6388   001198  0E00               	movlw	0
  6389   00119A  6E13               	movwf	(___llmod@divisor+1)^0,c
  6390   00119C  0E00               	movlw	0
  6391   00119E  6E14               	movwf	(___llmod@divisor+2)^0,c
  6392   0011A0  0E00               	movlw	0
  6393   0011A2  6E15               	movwf	(___llmod@divisor+3)^0,c
  6394   0011A4  C024  F00E         	movff	EscribeLCD_n16@a,___llmod@dividend
  6395   0011A8  C025  F00F         	movff	EscribeLCD_n16@a+1,___llmod@dividend+1
  6396   0011AC  C026  F010         	movff	EscribeLCD_n16@a+2,___llmod@dividend+2
  6397   0011B0  C027  F011         	movff	EscribeLCD_n16@a+3,___llmod@dividend+3
  6398   0011B4  EC0B  F013         	call	___llmod	;wreg free
  6399   0011B8  C00E  F017         	movff	?___llmod,___lldiv@dividend
  6400   0011BC  C00F  F018         	movff	?___llmod+1,___lldiv@dividend+1
  6401   0011C0  C010  F019         	movff	?___llmod+2,___lldiv@dividend+2
  6402   0011C4  C011  F01A         	movff	?___llmod+3,___lldiv@dividend+3
  6403   0011C8  0E0A               	movlw	10
  6404   0011CA  6E1B               	movwf	___lldiv@divisor^0,c
  6405   0011CC  0E00               	movlw	0
  6406   0011CE  6E1C               	movwf	(___lldiv@divisor+1)^0,c
  6407   0011D0  0E00               	movlw	0
  6408   0011D2  6E1D               	movwf	(___lldiv@divisor+2)^0,c
  6409   0011D4  0E00               	movlw	0
  6410   0011D6  6E1E               	movwf	(___lldiv@divisor+3)^0,c
  6411   0011D8  EC17  F012         	call	___lldiv	;wreg free
  6412   0011DC  5017               	movf	?___lldiv^0,w,c
  6413   0011DE  6E31               	movwf	EscribeLCD_n16@decena^0,c
  6414                           
  6415                           ;LibLCDXC8.h: 241: unidad=a%10;
  6416   0011E0  C024  F00E         	movff	EscribeLCD_n16@a,___llmod@dividend
  6417   0011E4  C025  F00F         	movff	EscribeLCD_n16@a+1,___llmod@dividend+1
  6418   0011E8  C026  F010         	movff	EscribeLCD_n16@a+2,___llmod@dividend+2
  6419   0011EC  C027  F011         	movff	EscribeLCD_n16@a+3,___llmod@dividend+3
  6420   0011F0  0E0A               	movlw	10
  6421   0011F2  6E12               	movwf	___llmod@divisor^0,c
  6422   0011F4  0E00               	movlw	0
  6423   0011F6  6E13               	movwf	(___llmod@divisor+1)^0,c
  6424   0011F8  0E00               	movlw	0
  6425   0011FA  6E14               	movwf	(___llmod@divisor+2)^0,c
  6426   0011FC  0E00               	movlw	0
  6427   0011FE  6E15               	movwf	(___llmod@divisor+3)^0,c
  6428   001200  EC0B  F013         	call	___llmod	;wreg free
  6429   001204  500E               	movf	?___llmod^0,w,c
  6430   001206  6E32               	movwf	EscribeLCD_n16@unidad^0,c
  6431                           
  6432                           ;LibLCDXC8.h: 242: EscribeLCD_c(millar+48);
  6433   001208  5029               	movf	EscribeLCD_n16@millar^0,w,c
  6434   00120A  0F30               	addlw	48
  6435   00120C  ECA1  F015         	call	_EscribeLCD_c
  6436                           
  6437                           ;LibLCDXC8.h: 243: EscribeLCD_c(centena+48);
  6438   001210  502D               	movf	EscribeLCD_n16@centena^0,w,c
  6439   001212  0F30               	addlw	48
  6440   001214  ECA1  F015         	call	_EscribeLCD_c
  6441                           
  6442                           ;LibLCDXC8.h: 244: EscribeLCD_c(decena+48);
  6443   001218  5031               	movf	EscribeLCD_n16@decena^0,w,c
  6444   00121A  0F30               	addlw	48
  6445   00121C  ECA1  F015         	call	_EscribeLCD_c
  6446                           
  6447                           ;LibLCDXC8.h: 245: EscribeLCD_c(unidad+48);
  6448   001220  5032               	movf	EscribeLCD_n16@unidad^0,w,c
  6449   001222  0F30               	addlw	48
  6450   001224  ECA1  F015         	call	_EscribeLCD_c
  6451                           
  6452                           ;LibLCDXC8.h: 246: break;
  6453   001228  0012               	return	
  6454   00122A                     l3177:
  6455                           
  6456                           ; BSR set to: 0
  6457   00122A  C024  F017         	movff	EscribeLCD_n16@a,___lldiv@dividend
  6458   00122E  C025  F018         	movff	EscribeLCD_n16@a+1,___lldiv@dividend+1
  6459   001232  C026  F019         	movff	EscribeLCD_n16@a+2,___lldiv@dividend+2
  6460   001236  C027  F01A         	movff	EscribeLCD_n16@a+3,___lldiv@dividend+3
  6461   00123A  0E10               	movlw	16
  6462   00123C  6E1B               	movwf	___lldiv@divisor^0,c
  6463   00123E  0E27               	movlw	39
  6464   001240  6E1C               	movwf	(___lldiv@divisor+1)^0,c
  6465   001242  0E00               	movlw	0
  6466   001244  6E1D               	movwf	(___lldiv@divisor+2)^0,c
  6467   001246  0E00               	movlw	0
  6468   001248  6E1E               	movwf	(___lldiv@divisor+3)^0,c
  6469   00124A  EC17  F012         	call	___lldiv	;wreg free
  6470   00124E  5017               	movf	?___lldiv^0,w,c
  6471   001250  0F30               	addlw	48
  6472   001252  ECA1  F015         	call	_EscribeLCD_c
  6473                           
  6474                           ;LibLCDXC8.h: 248: millar=(a%10000)/1000;
  6475   001256  0E10               	movlw	16
  6476   001258  6E12               	movwf	___llmod@divisor^0,c
  6477   00125A  0E27               	movlw	39
  6478   00125C  6E13               	movwf	(___llmod@divisor+1)^0,c
  6479   00125E  0E00               	movlw	0
  6480   001260  6E14               	movwf	(___llmod@divisor+2)^0,c
  6481   001262  0E00               	movlw	0
  6482   001264  6E15               	movwf	(___llmod@divisor+3)^0,c
  6483   001266  C024  F00E         	movff	EscribeLCD_n16@a,___llmod@dividend
  6484   00126A  C025  F00F         	movff	EscribeLCD_n16@a+1,___llmod@dividend+1
  6485   00126E  C026  F010         	movff	EscribeLCD_n16@a+2,___llmod@dividend+2
  6486   001272  C027  F011         	movff	EscribeLCD_n16@a+3,___llmod@dividend+3
  6487   001276  EC0B  F013         	call	___llmod	;wreg free
  6488   00127A  C00E  F017         	movff	?___llmod,___lldiv@dividend
  6489   00127E  C00F  F018         	movff	?___llmod+1,___lldiv@dividend+1
  6490   001282  C010  F019         	movff	?___llmod+2,___lldiv@dividend+2
  6491   001286  C011  F01A         	movff	?___llmod+3,___lldiv@dividend+3
  6492   00128A  0EE8               	movlw	232
  6493   00128C  6E1B               	movwf	___lldiv@divisor^0,c
  6494   00128E  0E03               	movlw	3
  6495   001290  6E1C               	movwf	(___lldiv@divisor+1)^0,c
  6496   001292  0E00               	movlw	0
  6497   001294  6E1D               	movwf	(___lldiv@divisor+2)^0,c
  6498   001296  0E00               	movlw	0
  6499   001298  6E1E               	movwf	(___lldiv@divisor+3)^0,c
  6500   00129A  EC17  F012         	call	___lldiv	;wreg free
  6501   00129E  C017  F029         	movff	?___lldiv,EscribeLCD_n16@millar
  6502   0012A2  C018  F02A         	movff	?___lldiv+1,EscribeLCD_n16@millar+1
  6503   0012A6  C019  F02B         	movff	?___lldiv+2,EscribeLCD_n16@millar+2
  6504   0012AA  C01A  F02C         	movff	?___lldiv+3,EscribeLCD_n16@millar+3
  6505                           
  6506                           ;LibLCDXC8.h: 249: centena=(a%1000)/100;
  6507   0012AE  0EE8               	movlw	232
  6508   0012B0  6E12               	movwf	___llmod@divisor^0,c
  6509   0012B2  0E03               	movlw	3
  6510   0012B4  6E13               	movwf	(___llmod@divisor+1)^0,c
  6511   0012B6  0E00               	movlw	0
  6512   0012B8  6E14               	movwf	(___llmod@divisor+2)^0,c
  6513   0012BA  0E00               	movlw	0
  6514   0012BC  6E15               	movwf	(___llmod@divisor+3)^0,c
  6515   0012BE  C024  F00E         	movff	EscribeLCD_n16@a,___llmod@dividend
  6516   0012C2  C025  F00F         	movff	EscribeLCD_n16@a+1,___llmod@dividend+1
  6517   0012C6  C026  F010         	movff	EscribeLCD_n16@a+2,___llmod@dividend+2
  6518   0012CA  C027  F011         	movff	EscribeLCD_n16@a+3,___llmod@dividend+3
  6519   0012CE  EC0B  F013         	call	___llmod	;wreg free
  6520   0012D2  C00E  F017         	movff	?___llmod,___lldiv@dividend
  6521   0012D6  C00F  F018         	movff	?___llmod+1,___lldiv@dividend+1
  6522   0012DA  C010  F019         	movff	?___llmod+2,___lldiv@dividend+2
  6523   0012DE  C011  F01A         	movff	?___llmod+3,___lldiv@dividend+3
  6524   0012E2  0E64               	movlw	100
  6525   0012E4  6E1B               	movwf	___lldiv@divisor^0,c
  6526   0012E6  0E00               	movlw	0
  6527   0012E8  6E1C               	movwf	(___lldiv@divisor+1)^0,c
  6528   0012EA  0E00               	movlw	0
  6529   0012EC  6E1D               	movwf	(___lldiv@divisor+2)^0,c
  6530   0012EE  0E00               	movlw	0
  6531   0012F0  6E1E               	movwf	(___lldiv@divisor+3)^0,c
  6532   0012F2  EC17  F012         	call	___lldiv	;wreg free
  6533   0012F6  C017  F02D         	movff	?___lldiv,EscribeLCD_n16@centena
  6534   0012FA  C018  F02E         	movff	?___lldiv+1,EscribeLCD_n16@centena+1
  6535   0012FE  C019  F02F         	movff	?___lldiv+2,EscribeLCD_n16@centena+2
  6536   001302  C01A  F030         	movff	?___lldiv+3,EscribeLCD_n16@centena+3
  6537                           
  6538                           ;LibLCDXC8.h: 250: decena=(a%100)/10;
  6539   001306  0E64               	movlw	100
  6540   001308  6E12               	movwf	___llmod@divisor^0,c
  6541   00130A  0E00               	movlw	0
  6542   00130C  6E13               	movwf	(___llmod@divisor+1)^0,c
  6543   00130E  0E00               	movlw	0
  6544   001310  6E14               	movwf	(___llmod@divisor+2)^0,c
  6545   001312  0E00               	movlw	0
  6546   001314  6E15               	movwf	(___llmod@divisor+3)^0,c
  6547   001316  C024  F00E         	movff	EscribeLCD_n16@a,___llmod@dividend
  6548   00131A  C025  F00F         	movff	EscribeLCD_n16@a+1,___llmod@dividend+1
  6549   00131E  C026  F010         	movff	EscribeLCD_n16@a+2,___llmod@dividend+2
  6550   001322  C027  F011         	movff	EscribeLCD_n16@a+3,___llmod@dividend+3
  6551   001326  EC0B  F013         	call	___llmod	;wreg free
  6552   00132A  C00E  F017         	movff	?___llmod,___lldiv@dividend
  6553   00132E  C00F  F018         	movff	?___llmod+1,___lldiv@dividend+1
  6554   001332  C010  F019         	movff	?___llmod+2,___lldiv@dividend+2
  6555   001336  C011  F01A         	movff	?___llmod+3,___lldiv@dividend+3
  6556   00133A  0E0A               	movlw	10
  6557   00133C  6E1B               	movwf	___lldiv@divisor^0,c
  6558   00133E  0E00               	movlw	0
  6559   001340  6E1C               	movwf	(___lldiv@divisor+1)^0,c
  6560   001342  0E00               	movlw	0
  6561   001344  6E1D               	movwf	(___lldiv@divisor+2)^0,c
  6562   001346  0E00               	movlw	0
  6563   001348  6E1E               	movwf	(___lldiv@divisor+3)^0,c
  6564   00134A  EC17  F012         	call	___lldiv	;wreg free
  6565   00134E  5017               	movf	?___lldiv^0,w,c
  6566   001350  6E31               	movwf	EscribeLCD_n16@decena^0,c
  6567                           
  6568                           ;LibLCDXC8.h: 251: unidad=a%10;
  6569   001352  C024  F00E         	movff	EscribeLCD_n16@a,___llmod@dividend
  6570   001356  C025  F00F         	movff	EscribeLCD_n16@a+1,___llmod@dividend+1
  6571   00135A  C026  F010         	movff	EscribeLCD_n16@a+2,___llmod@dividend+2
  6572   00135E  C027  F011         	movff	EscribeLCD_n16@a+3,___llmod@dividend+3
  6573   001362  0E0A               	movlw	10
  6574   001364  6E12               	movwf	___llmod@divisor^0,c
  6575   001366  0E00               	movlw	0
  6576   001368  6E13               	movwf	(___llmod@divisor+1)^0,c
  6577   00136A  0E00               	movlw	0
  6578   00136C  6E14               	movwf	(___llmod@divisor+2)^0,c
  6579   00136E  0E00               	movlw	0
  6580   001370  6E15               	movwf	(___llmod@divisor+3)^0,c
  6581   001372  EC0B  F013         	call	___llmod	;wreg free
  6582   001376  500E               	movf	?___llmod^0,w,c
  6583   001378  6E32               	movwf	EscribeLCD_n16@unidad^0,c
  6584                           
  6585                           ;LibLCDXC8.h: 252: EscribeLCD_c(millar+48);
  6586   00137A  5029               	movf	EscribeLCD_n16@millar^0,w,c
  6587   00137C  0F30               	addlw	48
  6588   00137E  ECA1  F015         	call	_EscribeLCD_c
  6589                           
  6590                           ;LibLCDXC8.h: 253: EscribeLCD_c(centena+48);
  6591   001382  502D               	movf	EscribeLCD_n16@centena^0,w,c
  6592   001384  0F30               	addlw	48
  6593   001386  ECA1  F015         	call	_EscribeLCD_c
  6594                           
  6595                           ;LibLCDXC8.h: 254: EscribeLCD_c(decena+48);
  6596   00138A  5031               	movf	EscribeLCD_n16@decena^0,w,c
  6597   00138C  0F30               	addlw	48
  6598   00138E  ECA1  F015         	call	_EscribeLCD_c
  6599                           
  6600                           ;LibLCDXC8.h: 255: EscribeLCD_c(unidad+48);
  6601   001392  5032               	movf	EscribeLCD_n16@unidad^0,w,c
  6602   001394  0F30               	addlw	48
  6603   001396  ECA1  F015         	call	_EscribeLCD_c
  6604                           
  6605                           ;LibLCDXC8.h: 256: break;
  6606   00139A  0012               	return	
  6607   00139C                     l3181:
  6608                           
  6609                           ; BSR set to: 0
  6610   00139C  5028               	movf	EscribeLCD_n16@b^0,w,c
  6611                           
  6612                           ; Switch size 1, requested type "simple"
  6613                           ; Number of cases is 5, Range of values is 1 to 5
  6614                           ; switch strategies available:
  6615                           ; Name         Instructions Cycles
  6616                           ; simple_byte           16     9 (average)
  6617                           ;	Chosen strategy is simple_byte
  6618   00139E  0A01               	xorlw	1	; case 1
  6619   0013A0  B4D8               	btfsc	status,2,c
  6620   0013A2  D5D1               	goto	l3169
  6621   0013A4  0A03               	xorlw	3	; case 2
  6622   0013A6  B4D8               	btfsc	status,2,c
  6623   0013A8  D5E7               	goto	l3171
  6624   0013AA  0A01               	xorlw	1	; case 3
  6625   0013AC  B4D8               	btfsc	status,2,c
  6626   0013AE  D627               	goto	l3173
  6627   0013B0  0A07               	xorlw	7	; case 4
  6628   0013B2  B4D8               	btfsc	status,2,c
  6629   0013B4  D697               	goto	l3175
  6630   0013B6  0A01               	xorlw	1	; case 5
  6631   0013B8  A4D8               	btfss	status,2,c
  6632   0013BA  0012               	return	
  6633   0013BC  D736               	goto	l3177
  6634   0013BE                     __end_of_EscribeLCD_n16:
  6635                           	callstack 0
  6636                           
  6637 ;; *************** function ___llmod *****************
  6638 ;; Defined at:
  6639 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\llmod.c"
  6640 ;; Parameters:    Size  Location     Type
  6641 ;;  dividend        4   13[COMRAM] unsigned long 
  6642 ;;  divisor         4   17[COMRAM] unsigned long 
  6643 ;; Auto vars:     Size  Location     Type
  6644 ;;  counter         1   21[COMRAM] unsigned char 
  6645 ;; Return value:  Size  Location     Type
  6646 ;;                  4   13[COMRAM] unsigned long 
  6647 ;; Registers used:
  6648 ;;		wreg, status,2, status,0
  6649 ;; Tracked objects:
  6650 ;;		On entry : 0/0
  6651 ;;		On exit  : 0/0
  6652 ;;		Unchanged: 0/0
  6653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6654 ;;      Params:         8       0       0       0       0       0       0       0       0
  6655 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6656 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6657 ;;      Totals:         9       0       0       0       0       0       0       0       0
  6658 ;;Total ram usage:        9 bytes
  6659 ;; Hardware stack levels used: 1
  6660 ;; Hardware stack levels required when called: 5
  6661 ;; This function calls:
  6662 ;;		Nothing
  6663 ;; This function is called by:
  6664 ;;		_EscribeLCD_n16
  6665 ;; This function uses a non-reentrant model
  6666 ;;
  6667                           
  6668                           	psect	text31
  6669   002616                     __ptext31:
  6670                           	callstack 0
  6671   002616                     ___llmod:
  6672                           	callstack 23
  6673                           
  6674                           ;incstack = 0
  6675   002616  5012               	movf	___llmod@divisor^0,w,c
  6676   002618  1013               	iorwf	(___llmod@divisor+1)^0,w,c
  6677   00261A  1014               	iorwf	(___llmod@divisor+2)^0,w,c
  6678   00261C  1015               	iorwf	(___llmod@divisor+3)^0,w,c
  6679   00261E  B4D8               	btfsc	status,2,c
  6680   002620  D024               	goto	l753
  6681   002622  0E01               	movlw	1
  6682   002624  6E16               	movwf	___llmod@counter^0,c
  6683   002626  D006               	goto	l3069
  6684   002628                     l3067:
  6685   002628  90D8               	bcf	status,0,c
  6686   00262A  3612               	rlcf	___llmod@divisor^0,f,c
  6687   00262C  3613               	rlcf	(___llmod@divisor+1)^0,f,c
  6688   00262E  3614               	rlcf	(___llmod@divisor+2)^0,f,c
  6689   002630  3615               	rlcf	(___llmod@divisor+3)^0,f,c
  6690   002632  2A16               	incf	___llmod@counter^0,f,c
  6691   002634                     l3069:
  6692   002634  AE15               	btfss	(___llmod@divisor+3)^0,7,c
  6693   002636  D7F8               	goto	l3067
  6694   002638                     u3080:
  6695   002638  5012               	movf	___llmod@divisor^0,w,c
  6696   00263A  5C0E               	subwf	___llmod@dividend^0,w,c
  6697   00263C  5013               	movf	(___llmod@divisor+1)^0,w,c
  6698   00263E  580F               	subwfb	(___llmod@dividend+1)^0,w,c
  6699   002640  5014               	movf	(___llmod@divisor+2)^0,w,c
  6700   002642  5810               	subwfb	(___llmod@dividend+2)^0,w,c
  6701   002644  5015               	movf	(___llmod@divisor+3)^0,w,c
  6702   002646  5811               	subwfb	(___llmod@dividend+3)^0,w,c
  6703   002648  A0D8               	btfss	status,0,c
  6704   00264A  D008               	goto	l3075
  6705   00264C  5012               	movf	___llmod@divisor^0,w,c
  6706   00264E  5E0E               	subwf	___llmod@dividend^0,f,c
  6707   002650  5013               	movf	(___llmod@divisor+1)^0,w,c
  6708   002652  5A0F               	subwfb	(___llmod@dividend+1)^0,f,c
  6709   002654  5014               	movf	(___llmod@divisor+2)^0,w,c
  6710   002656  5A10               	subwfb	(___llmod@dividend+2)^0,f,c
  6711   002658  5015               	movf	(___llmod@divisor+3)^0,w,c
  6712   00265A  5A11               	subwfb	(___llmod@dividend+3)^0,f,c
  6713   00265C                     l3075:
  6714   00265C  90D8               	bcf	status,0,c
  6715   00265E  3215               	rrcf	(___llmod@divisor+3)^0,f,c
  6716   002660  3214               	rrcf	(___llmod@divisor+2)^0,f,c
  6717   002662  3213               	rrcf	(___llmod@divisor+1)^0,f,c
  6718   002664  3212               	rrcf	___llmod@divisor^0,f,c
  6719   002666  2E16               	decfsz	___llmod@counter^0,f,c
  6720   002668  D7E7               	goto	u3080
  6721   00266A                     l753:
  6722   00266A  C00E  F00E         	movff	___llmod@dividend,?___llmod
  6723   00266E  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  6724   002672  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  6725   002676  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  6726   00267A  0012               	return		;funcret
  6727   00267C                     __end_of___llmod:
  6728                           	callstack 0
  6729                           
  6730 ;; *************** function ___lldiv *****************
  6731 ;; Defined at:
  6732 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\__lldiv.c"
  6733 ;; Parameters:    Size  Location     Type
  6734 ;;  dividend        4   22[COMRAM] unsigned long 
  6735 ;;  divisor         4   26[COMRAM] unsigned long 
  6736 ;; Auto vars:     Size  Location     Type
  6737 ;;  quotient        4   30[COMRAM] unsigned long 
  6738 ;;  counter         1   34[COMRAM] unsigned char 
  6739 ;; Return value:  Size  Location     Type
  6740 ;;                  4   22[COMRAM] unsigned long 
  6741 ;; Registers used:
  6742 ;;		wreg, status,2, status,0
  6743 ;; Tracked objects:
  6744 ;;		On entry : 0/0
  6745 ;;		On exit  : 0/0
  6746 ;;		Unchanged: 0/0
  6747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6748 ;;      Params:         8       0       0       0       0       0       0       0       0
  6749 ;;      Locals:         5       0       0       0       0       0       0       0       0
  6750 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6751 ;;      Totals:        13       0       0       0       0       0       0       0       0
  6752 ;;Total ram usage:       13 bytes
  6753 ;; Hardware stack levels used: 1
  6754 ;; Hardware stack levels required when called: 5
  6755 ;; This function calls:
  6756 ;;		Nothing
  6757 ;; This function is called by:
  6758 ;;		_EscribeLCD_n16
  6759 ;;		_Imprimir_Resultado
  6760 ;; This function uses a non-reentrant model
  6761 ;;
  6762                           
  6763                           	psect	text32
  6764   00242E                     __ptext32:
  6765                           	callstack 0
  6766   00242E                     ___lldiv:
  6767                           	callstack 24
  6768                           
  6769                           ;incstack = 0
  6770   00242E  0E00               	movlw	0
  6771   002430  6E1F               	movwf	___lldiv@quotient^0,c
  6772   002432  0E00               	movlw	0
  6773   002434  6E20               	movwf	(___lldiv@quotient+1)^0,c
  6774   002436  0E00               	movlw	0
  6775   002438  6E21               	movwf	(___lldiv@quotient+2)^0,c
  6776   00243A  0E00               	movlw	0
  6777   00243C  6E22               	movwf	(___lldiv@quotient+3)^0,c
  6778   00243E  501B               	movf	___lldiv@divisor^0,w,c
  6779   002440  101C               	iorwf	(___lldiv@divisor+1)^0,w,c
  6780   002442  101D               	iorwf	(___lldiv@divisor+2)^0,w,c
  6781   002444  101E               	iorwf	(___lldiv@divisor+3)^0,w,c
  6782   002446  B4D8               	btfsc	status,2,c
  6783   002448  D02A               	goto	l372
  6784   00244A  0E01               	movlw	1
  6785   00244C  6E23               	movwf	___lldiv@counter^0,c
  6786   00244E  D006               	goto	l2979
  6787   002450                     l2977:
  6788   002450  90D8               	bcf	status,0,c
  6789   002452  361B               	rlcf	___lldiv@divisor^0,f,c
  6790   002454  361C               	rlcf	(___lldiv@divisor+1)^0,f,c
  6791   002456  361D               	rlcf	(___lldiv@divisor+2)^0,f,c
  6792   002458  361E               	rlcf	(___lldiv@divisor+3)^0,f,c
  6793   00245A  2A23               	incf	___lldiv@counter^0,f,c
  6794   00245C                     l2979:
  6795   00245C  AE1E               	btfss	(___lldiv@divisor+3)^0,7,c
  6796   00245E  D7F8               	goto	l2977
  6797   002460                     u2970:
  6798   002460  90D8               	bcf	status,0,c
  6799   002462  361F               	rlcf	___lldiv@quotient^0,f,c
  6800   002464  3620               	rlcf	(___lldiv@quotient+1)^0,f,c
  6801   002466  3621               	rlcf	(___lldiv@quotient+2)^0,f,c
  6802   002468  3622               	rlcf	(___lldiv@quotient+3)^0,f,c
  6803   00246A  501B               	movf	___lldiv@divisor^0,w,c
  6804   00246C  5C17               	subwf	___lldiv@dividend^0,w,c
  6805   00246E  501C               	movf	(___lldiv@divisor+1)^0,w,c
  6806   002470  5818               	subwfb	(___lldiv@dividend+1)^0,w,c
  6807   002472  501D               	movf	(___lldiv@divisor+2)^0,w,c
  6808   002474  5819               	subwfb	(___lldiv@dividend+2)^0,w,c
  6809   002476  501E               	movf	(___lldiv@divisor+3)^0,w,c
  6810   002478  581A               	subwfb	(___lldiv@dividend+3)^0,w,c
  6811   00247A  A0D8               	btfss	status,0,c
  6812   00247C  D009               	goto	l2989
  6813   00247E  501B               	movf	___lldiv@divisor^0,w,c
  6814   002480  5E17               	subwf	___lldiv@dividend^0,f,c
  6815   002482  501C               	movf	(___lldiv@divisor+1)^0,w,c
  6816   002484  5A18               	subwfb	(___lldiv@dividend+1)^0,f,c
  6817   002486  501D               	movf	(___lldiv@divisor+2)^0,w,c
  6818   002488  5A19               	subwfb	(___lldiv@dividend+2)^0,f,c
  6819   00248A  501E               	movf	(___lldiv@divisor+3)^0,w,c
  6820   00248C  5A1A               	subwfb	(___lldiv@dividend+3)^0,f,c
  6821   00248E  801F               	bsf	___lldiv@quotient^0,0,c
  6822   002490                     l2989:
  6823   002490  90D8               	bcf	status,0,c
  6824   002492  321E               	rrcf	(___lldiv@divisor+3)^0,f,c
  6825   002494  321D               	rrcf	(___lldiv@divisor+2)^0,f,c
  6826   002496  321C               	rrcf	(___lldiv@divisor+1)^0,f,c
  6827   002498  321B               	rrcf	___lldiv@divisor^0,f,c
  6828   00249A  2E23               	decfsz	___lldiv@counter^0,f,c
  6829   00249C  D7E1               	goto	u2970
  6830   00249E                     l372:
  6831   00249E  C01F  F017         	movff	___lldiv@quotient,?___lldiv
  6832   0024A2  C020  F018         	movff	___lldiv@quotient+1,?___lldiv+1
  6833   0024A6  C021  F019         	movff	___lldiv@quotient+2,?___lldiv+2
  6834   0024AA  C022  F01A         	movff	___lldiv@quotient+3,?___lldiv+3
  6835   0024AE  0012               	return		;funcret
  6836   0024B0                     __end_of___lldiv:
  6837                           	callstack 0
  6838                           
  6839 ;; *************** function _EscribeLCD_c *****************
  6840 ;; Defined at:
  6841 ;;		line 116 in file "LibLCDXC8.h"
  6842 ;; Parameters:    Size  Location     Type
  6843 ;;  a               1    wreg     unsigned char 
  6844 ;; Auto vars:     Size  Location     Type
  6845 ;;  a               1   17[COMRAM] unsigned char 
  6846 ;; Return value:  Size  Location     Type
  6847 ;;                  1    wreg      void 
  6848 ;; Registers used:
  6849 ;;		wreg, status,2, status,0, cstack
  6850 ;; Tracked objects:
  6851 ;;		On entry : 0/0
  6852 ;;		On exit  : 0/0
  6853 ;;		Unchanged: 0/0
  6854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6855 ;;      Params:         0       0       0       0       0       0       0       0       0
  6856 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6857 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6858 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6859 ;;Total ram usage:        1 bytes
  6860 ;; Hardware stack levels used: 1
  6861 ;; Hardware stack levels required when called: 7
  6862 ;; This function calls:
  6863 ;;		_EnviaDato
  6864 ;;		_HabilitaLCD
  6865 ;;		_RetardoLCD
  6866 ;; This function is called by:
  6867 ;;		_EscribeLCD_n16
  6868 ;;		_MensajeLCD_Var
  6869 ;;		_main
  6870 ;;		_Imprimir_Resultado
  6871 ;; This function uses a non-reentrant model
  6872 ;;
  6873                           
  6874                           	psect	text33
  6875   002B42                     __ptext33:
  6876                           	callstack 0
  6877   002B42                     _EscribeLCD_c:
  6878                           	callstack 22
  6879                           
  6880                           ;incstack = 0
  6881                           ;EscribeLCD_c@a stored from wreg
  6882   002B42  6E12               	movwf	EscribeLCD_c@a^0,c
  6883                           
  6884                           ;LibLCDXC8.h: 120: LATE0=1;
  6885   002B44  808D               	bsf	3981,0,c	;volatile
  6886                           
  6887                           ;LibLCDXC8.h: 121: EnviaDato(a);
  6888   002B46  5012               	movf	EscribeLCD_c@a^0,w,c
  6889   002B48  ECBB  F014         	call	_EnviaDato
  6890                           
  6891                           ;LibLCDXC8.h: 122: HabilitaLCD();
  6892   002B4C  ECE1  F015         	call	_HabilitaLCD	;wreg free
  6893                           
  6894                           ;LibLCDXC8.h: 123: RetardoLCD(4);
  6895   002B50  0E04               	movlw	4
  6896   002B52  ECEE  F013         	call	_RetardoLCD
  6897   002B56  0012               	return		;funcret
  6898   002B58                     __end_of_EscribeLCD_c:
  6899                           	callstack 0
  6900                           
  6901 ;; *************** function _DireccionaLCD *****************
  6902 ;; Defined at:
  6903 ;;		line 272 in file "LibLCDXC8.h"
  6904 ;; Parameters:    Size  Location     Type
  6905 ;;  a               1    wreg     unsigned char 
  6906 ;; Auto vars:     Size  Location     Type
  6907 ;;  a               1   17[COMRAM] unsigned char 
  6908 ;; Return value:  Size  Location     Type
  6909 ;;                  1    wreg      void 
  6910 ;; Registers used:
  6911 ;;		wreg, status,2, status,0, cstack
  6912 ;; Tracked objects:
  6913 ;;		On entry : 0/0
  6914 ;;		On exit  : 0/0
  6915 ;;		Unchanged: 0/0
  6916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6917 ;;      Params:         0       0       0       0       0       0       0       0       0
  6918 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6919 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6920 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6921 ;;Total ram usage:        1 bytes
  6922 ;; Hardware stack levels used: 1
  6923 ;; Hardware stack levels required when called: 7
  6924 ;; This function calls:
  6925 ;;		_EnviaDato
  6926 ;;		_HabilitaLCD
  6927 ;;		_RetardoLCD
  6928 ;; This function is called by:
  6929 ;;		_main
  6930 ;;		_Imprimir_Resultado
  6931 ;; This function uses a non-reentrant model
  6932 ;;
  6933                           
  6934                           	psect	text34
  6935   002B58                     __ptext34:
  6936                           	callstack 0
  6937   002B58                     _DireccionaLCD:
  6938                           	callstack 22
  6939                           
  6940                           ;incstack = 0
  6941                           ;DireccionaLCD@a stored from wreg
  6942   002B58  6E12               	movwf	DireccionaLCD@a^0,c
  6943                           
  6944                           ;LibLCDXC8.h: 275: LATE0=0;
  6945   002B5A  908D               	bcf	3981,0,c	;volatile
  6946                           
  6947                           ;LibLCDXC8.h: 276: EnviaDato(a);
  6948   002B5C  5012               	movf	DireccionaLCD@a^0,w,c
  6949   002B5E  ECBB  F014         	call	_EnviaDato
  6950                           
  6951                           ;LibLCDXC8.h: 277: HabilitaLCD();
  6952   002B62  ECE1  F015         	call	_HabilitaLCD	;wreg free
  6953                           
  6954                           ;LibLCDXC8.h: 278: RetardoLCD(4);
  6955   002B66  0E04               	movlw	4
  6956   002B68  ECEE  F013         	call	_RetardoLCD
  6957   002B6C  0012               	return		;funcret
  6958   002B6E                     __end_of_DireccionaLCD:
  6959                           	callstack 0
  6960                           
  6961 ;; *************** function _EnviaDato *****************
  6962 ;; Defined at:
  6963 ;;		line 51 in file "LibLCDXC8.h"
  6964 ;; Parameters:    Size  Location     Type
  6965 ;;  a               1    wreg     unsigned char 
  6966 ;; Auto vars:     Size  Location     Type
  6967 ;;  a               1   16[COMRAM] unsigned char 
  6968 ;; Return value:  Size  Location     Type
  6969 ;;                  1    wreg      void 
  6970 ;; Registers used:
  6971 ;;		wreg, status,2, status,0, cstack
  6972 ;; Tracked objects:
  6973 ;;		On entry : 0/0
  6974 ;;		On exit  : 0/0
  6975 ;;		Unchanged: 0/0
  6976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6977 ;;      Params:         0       0       0       0       0       0       0       0       0
  6978 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6979 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6980 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6981 ;;Total ram usage:        2 bytes
  6982 ;; Hardware stack levels used: 1
  6983 ;; Hardware stack levels required when called: 6
  6984 ;; This function calls:
  6985 ;;		_HabilitaLCD
  6986 ;;		_RetardoLCD
  6987 ;; This function is called by:
  6988 ;;		_InicializaLCD
  6989 ;;		_BorraLCD
  6990 ;;		_EscribeLCD_c
  6991 ;;		_DireccionaLCD
  6992 ;; This function uses a non-reentrant model
  6993 ;;
  6994                           
  6995                           	psect	text35
  6996   002976                     __ptext35:
  6997                           	callstack 0
  6998   002976                     _EnviaDato:
  6999                           	callstack 22
  7000                           
  7001                           ;incstack = 0
  7002                           ;EnviaDato@a stored from wreg
  7003   002976  6E11               	movwf	EnviaDato@a^0,c
  7004                           
  7005                           ;LibLCDXC8.h: 52: if(interfaz==4){
  7006   002978  0E04               	movlw	4
  7007   00297A  1850               	xorwf	_interfaz^0,w,c
  7008   00297C  A4D8               	btfss	status,2,c
  7009   00297E  D017               	goto	l2721
  7010                           
  7011                           ;LibLCDXC8.h: 53: LATD=(LATD & 0b00001111) | (a & 0b11110000);
  7012   002980  C011  F010         	movff	EnviaDato@a,??_EnviaDato
  7013   002984  0EF0               	movlw	240
  7014   002986  1610               	andwf	??_EnviaDato^0,f,c
  7015   002988  508C               	movf	140,w,c	;volatile
  7016   00298A  0B0F               	andlw	15
  7017   00298C  1010               	iorwf	??_EnviaDato^0,w,c
  7018   00298E  6E8C               	movwf	140,c	;volatile
  7019                           
  7020                           ;LibLCDXC8.h: 54: HabilitaLCD();
  7021   002990  ECE1  F015         	call	_HabilitaLCD	;wreg free
  7022                           
  7023                           ;LibLCDXC8.h: 55: RetardoLCD(1);
  7024   002994  0E01               	movlw	1
  7025   002996  ECEE  F013         	call	_RetardoLCD
  7026                           
  7027                           ;LibLCDXC8.h: 56: LATD=(LATD & 0b00001111) | (a<<4);
  7028   00299A  C011  F010         	movff	EnviaDato@a,??_EnviaDato
  7029   00299E  3A10               	swapf	??_EnviaDato^0,f,c
  7030   0029A0  0EF0               	movlw	240
  7031   0029A2  1610               	andwf	??_EnviaDato^0,f,c
  7032   0029A4  508C               	movf	140,w,c	;volatile
  7033   0029A6  0B0F               	andlw	15
  7034   0029A8  1010               	iorwf	??_EnviaDato^0,w,c
  7035   0029AA  6E8C               	movwf	140,c	;volatile
  7036                           
  7037                           ;LibLCDXC8.h: 57: }else if(interfaz==8){
  7038   0029AC  0012               	return	
  7039   0029AE                     l2721:
  7040   0029AE  0E08               	movlw	8
  7041   0029B0  1850               	xorwf	_interfaz^0,w,c
  7042   0029B2  A4D8               	btfss	status,2,c
  7043   0029B4  0012               	return	
  7044                           
  7045                           ;LibLCDXC8.h: 58: LATD=a;
  7046   0029B6  C011  FF8C         	movff	EnviaDato@a,3980	;volatile
  7047   0029BA  0012               	return		;funcret
  7048   0029BC                     __end_of_EnviaDato:
  7049                           	callstack 0
  7050                           
  7051 ;; *************** function _RetardoLCD *****************
  7052 ;; Defined at:
  7053 ;;		line 308 in file "LibLCDXC8.h"
  7054 ;; Parameters:    Size  Location     Type
  7055 ;;  a               1    wreg     unsigned char 
  7056 ;; Auto vars:     Size  Location     Type
  7057 ;;  a               1   14[COMRAM] unsigned char 
  7058 ;; Return value:  Size  Location     Type
  7059 ;;                  1    wreg      void 
  7060 ;; Registers used:
  7061 ;;		wreg, status,2, status,0
  7062 ;; Tracked objects:
  7063 ;;		On entry : 0/0
  7064 ;;		On exit  : 0/0
  7065 ;;		Unchanged: 0/0
  7066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7067 ;;      Params:         0       0       0       0       0       0       0       0       0
  7068 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7069 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7070 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7071 ;;Total ram usage:        2 bytes
  7072 ;; Hardware stack levels used: 1
  7073 ;; Hardware stack levels required when called: 5
  7074 ;; This function calls:
  7075 ;;		Nothing
  7076 ;; This function is called by:
  7077 ;;		_EnviaDato
  7078 ;;		_InicializaLCD
  7079 ;;		_BorraLCD
  7080 ;;		_EscribeLCD_c
  7081 ;;		_DireccionaLCD
  7082 ;; This function uses a non-reentrant model
  7083 ;;
  7084                           
  7085                           	psect	text36
  7086   0027DC                     __ptext36:
  7087                           	callstack 0
  7088   0027DC                     _RetardoLCD:
  7089                           	callstack 23
  7090                           
  7091                           ;incstack = 0
  7092                           ;RetardoLCD@a stored from wreg
  7093   0027DC  6E0F               	movwf	RetardoLCD@a^0,c
  7094                           
  7095                           ;LibLCDXC8.h: 309: switch(a){
  7096   0027DE  D01B               	goto	l2673
  7097   0027E0                     l2663:
  7098   0027E0  0E05               	movlw	5
  7099   0027E2  6E0E               	movwf	??_RetardoLCD^0,c
  7100   0027E4  0EDE               	movlw	222
  7101   0027E6                     u6577:
  7102   0027E6  2EE8               	decfsz	wreg,f,c
  7103   0027E8  D7FE               	bra	u6577
  7104   0027EA  2E0E               	decfsz	??_RetardoLCD^0,f,c
  7105   0027EC  D7FC               	bra	u6577
  7106                           
  7107                           ;LibLCDXC8.h: 312: break;
  7108   0027EE  0012               	return	
  7109   0027F0                     l2665:
  7110   0027F0  0E53               	movlw	83
  7111   0027F2                     u6587:
  7112   0027F2  2EE8               	decfsz	wreg,f,c
  7113   0027F4  D7FE               	bra	u6587
  7114   0027F6  F000               	nop	
  7115                           
  7116                           ;LibLCDXC8.h: 314: _delay((unsigned long)((640)*(1000000/4000000.0)));
  7117   0027F8  0E35               	movlw	53
  7118   0027FA                     u6597:
  7119   0027FA  2EE8               	decfsz	wreg,f,c
  7120   0027FC  D7FE               	bra	u6597
  7121   0027FE  F000               	nop	
  7122                           
  7123                           ;LibLCDXC8.h: 316: break;
  7124   002800  0012               	return	
  7125   002802                     l2667:
  7126   002802  0E08               	movlw	8
  7127   002804                     u6607:
  7128   002804  2EE8               	decfsz	wreg,f,c
  7129   002806  D7FE               	bra	u6607
  7130   002808  F000               	nop	
  7131                           
  7132                           ;LibLCDXC8.h: 319: break;
  7133   00280A  0012               	return	
  7134   00280C                     l2669:
  7135   00280C  0E03               	movlw	3
  7136   00280E                     u6617:
  7137   00280E  2EE8               	decfsz	wreg,f,c
  7138   002810  D7FE               	bra	u6617
  7139   002812  F000               	nop	
  7140                           
  7141                           ;LibLCDXC8.h: 322: break;
  7142   002814  0012               	return	
  7143   002816                     l2673:
  7144   002816  500F               	movf	RetardoLCD@a^0,w,c
  7145                           
  7146                           ; Switch size 1, requested type "simple"
  7147                           ; Number of cases is 4, Range of values is 1 to 4
  7148                           ; switch strategies available:
  7149                           ; Name         Instructions Cycles
  7150                           ; simple_byte           13     7 (average)
  7151                           ;	Chosen strategy is simple_byte
  7152   002818  0A01               	xorlw	1	; case 1
  7153   00281A  B4D8               	btfsc	status,2,c
  7154   00281C  D7E1               	goto	l2663
  7155   00281E  0A03               	xorlw	3	; case 2
  7156   002820  B4D8               	btfsc	status,2,c
  7157   002822  D7E6               	goto	l2665
  7158   002824  0A01               	xorlw	1	; case 3
  7159   002826  B4D8               	btfsc	status,2,c
  7160   002828  D7EC               	goto	l2667
  7161   00282A  0A07               	xorlw	7	; case 4
  7162   00282C  A4D8               	btfss	status,2,c
  7163   00282E  0012               	return	
  7164   002830  D7ED               	goto	l2669
  7165   002832                     __end_of_RetardoLCD:
  7166                           	callstack 0
  7167                           
  7168 ;; *************** function _HabilitaLCD *****************
  7169 ;; Defined at:
  7170 ;;		line 95 in file "LibLCDXC8.h"
  7171 ;; Parameters:    Size  Location     Type
  7172 ;;		None
  7173 ;; Auto vars:     Size  Location     Type
  7174 ;;		None
  7175 ;; Return value:  Size  Location     Type
  7176 ;;                  1    wreg      void 
  7177 ;; Registers used:
  7178 ;;		wreg
  7179 ;; Tracked objects:
  7180 ;;		On entry : 0/0
  7181 ;;		On exit  : 0/0
  7182 ;;		Unchanged: 0/0
  7183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7184 ;;      Params:         0       0       0       0       0       0       0       0       0
  7185 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7186 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7187 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7188 ;;Total ram usage:        0 bytes
  7189 ;; Hardware stack levels used: 1
  7190 ;; Hardware stack levels required when called: 5
  7191 ;; This function calls:
  7192 ;;		Nothing
  7193 ;; This function is called by:
  7194 ;;		_EnviaDato
  7195 ;;		_InicializaLCD
  7196 ;;		_BorraLCD
  7197 ;;		_EscribeLCD_c
  7198 ;;		_DireccionaLCD
  7199 ;; This function uses a non-reentrant model
  7200 ;;
  7201                           
  7202                           	psect	text37
  7203   002BC2                     __ptext37:
  7204                           	callstack 0
  7205   002BC2                     _HabilitaLCD:
  7206                           	callstack 23
  7207                           
  7208                           ;LibLCDXC8.h: 97: LATE1=1;
  7209                           
  7210                           ;incstack = 0
  7211   002BC2  828D               	bsf	3981,1,c	;volatile
  7212                           
  7213                           ;LibLCDXC8.h: 98: _delay((unsigned long)((40)*(1000000/4000000.0)));
  7214   002BC4  0E03               	movlw	3
  7215   002BC6                     u6627:
  7216   002BC6  2EE8               	decfsz	wreg,f,c
  7217   002BC8  D7FE               	bra	u6627
  7218   002BCA  F000               	nop	
  7219                           
  7220                           ;LibLCDXC8.h: 100: LATE1=0;
  7221   002BCC  928D               	bcf	3981,1,c	;volatile
  7222   002BCE  0012               	return		;funcret
  7223   002BD0                     __end_of_HabilitaLCD:
  7224                           	callstack 0
  7225                           
  7226 ;; *************** function _ConfiguraLCD *****************
  7227 ;; Defined at:
  7228 ;;		line 47 in file "LibLCDXC8.h"
  7229 ;; Parameters:    Size  Location     Type
  7230 ;;  a               1    wreg     unsigned char 
  7231 ;; Auto vars:     Size  Location     Type
  7232 ;;  a               1   13[COMRAM] unsigned char 
  7233 ;; Return value:  Size  Location     Type
  7234 ;;                  1    wreg      void 
  7235 ;; Registers used:
  7236 ;;		wreg, status,2, status,0
  7237 ;; Tracked objects:
  7238 ;;		On entry : 0/0
  7239 ;;		On exit  : 0/0
  7240 ;;		Unchanged: 0/0
  7241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7242 ;;      Params:         0       0       0       0       0       0       0       0       0
  7243 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7244 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7245 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7246 ;;Total ram usage:        1 bytes
  7247 ;; Hardware stack levels used: 1
  7248 ;; Hardware stack levels required when called: 5
  7249 ;; This function calls:
  7250 ;;		Nothing
  7251 ;; This function is called by:
  7252 ;;		_main
  7253 ;; This function uses a non-reentrant model
  7254 ;;
  7255                           
  7256                           	psect	text38
  7257   002B2A                     __ptext38:
  7258                           	callstack 0
  7259   002B2A                     _ConfiguraLCD:
  7260                           	callstack 25
  7261                           
  7262                           ;incstack = 0
  7263                           ;ConfiguraLCD@a stored from wreg
  7264   002B2A  6E0E               	movwf	ConfiguraLCD@a^0,c
  7265                           
  7266                           ;LibLCDXC8.h: 48: if(a==4 | a ==8)
  7267   002B2C  0E04               	movlw	4
  7268   002B2E  180E               	xorwf	ConfiguraLCD@a^0,w,c
  7269   002B30  B4D8               	btfsc	status,2,c
  7270   002B32  D004               	goto	u3440
  7271   002B34  0E08               	movlw	8
  7272   002B36  180E               	xorwf	ConfiguraLCD@a^0,w,c
  7273   002B38  A4D8               	btfss	status,2,c
  7274   002B3A  0012               	return	
  7275   002B3C                     u3440:
  7276                           
  7277                           ;LibLCDXC8.h: 49: interfaz=a;
  7278   002B3C  C00E  F050         	movff	ConfiguraLCD@a,_interfaz
  7279   002B40  0012               	return		;funcret
  7280   002B42                     __end_of_ConfiguraLCD:
  7281                           	callstack 0
  7282                           
  7283 ;; *************** function _ColorRGB *****************
  7284 ;; Defined at:
  7285 ;;		line 243 in file "Lab4.c"
  7286 ;; Parameters:    Size  Location     Type
  7287 ;;		None
  7288 ;; Auto vars:     Size  Location     Type
  7289 ;;		None
  7290 ;; Return value:  Size  Location     Type
  7291 ;;                  1    wreg      void 
  7292 ;; Registers used:
  7293 ;;		wreg, status,2, status,0
  7294 ;; Tracked objects:
  7295 ;;		On entry : 3F/0
  7296 ;;		On exit  : 3F/0
  7297 ;;		Unchanged: 3F/0
  7298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7299 ;;      Params:         0       0       0       0       0       0       0       0       0
  7300 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7301 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7302 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7303 ;;Total ram usage:        2 bytes
  7304 ;; Hardware stack levels used: 1
  7305 ;; Hardware stack levels required when called: 5
  7306 ;; This function calls:
  7307 ;;		Nothing
  7308 ;; This function is called by:
  7309 ;;		_main
  7310 ;; This function uses a non-reentrant model
  7311 ;;
  7312                           
  7313                           	psect	text39
  7314   0024B0                     __ptext39:
  7315                           	callstack 0
  7316   0024B0                     _ColorRGB:
  7317                           	callstack 25
  7318                           
  7319                           ; BSR set to: 0
  7320                           ;Lab4.c: 244: if(color==8) color = 0;
  7321                           
  7322                           ;incstack = 0
  7323   0024B0  0E08               	movlw	8
  7324   0024B2  184A               	xorwf	_color^0,w,c
  7325   0024B4  104B               	iorwf	(_color+1)^0,w,c
  7326   0024B6  A4D8               	btfss	status,2,c
  7327   0024B8  D014               	goto	l3563
  7328                           
  7329                           ; BSR set to: 0
  7330   0024BA  0E00               	movlw	0
  7331   0024BC  6E4B               	movwf	(_color+1)^0,c
  7332   0024BE  0E00               	movlw	0
  7333   0024C0  6E4A               	movwf	_color^0,c
  7334   0024C2  D00F               	goto	l3563
  7335   0024C4                     l3545:
  7336                           
  7337                           ; BSR set to: 0
  7338                           ;Lab4.c: 247: LATC = 0b00000000;
  7339   0024C4  0E00               	movlw	0
  7340   0024C6  D00B               	goto	L13
  7341   0024C8                     l3547:
  7342                           
  7343                           ; BSR set to: 0
  7344                           ;Lab4.c: 250: LATC = 0b00000101;
  7345   0024C8  0E05               	movlw	5
  7346   0024CA  D009               	goto	L13
  7347   0024CC                     l3549:
  7348                           
  7349                           ; BSR set to: 0
  7350                           ;Lab4.c: 253: LATC = 0b00000110;
  7351   0024CC  0E06               	movlw	6
  7352   0024CE  D007               	goto	L13
  7353   0024D0                     l3551:
  7354                           
  7355                           ; BSR set to: 0
  7356                           ;Lab4.c: 256: LATC = 0b00000011;
  7357   0024D0  0E03               	movlw	3
  7358   0024D2  D005               	goto	L13
  7359   0024D4                     l3553:
  7360                           
  7361                           ; BSR set to: 0
  7362                           ;Lab4.c: 259: LATC = 0b00000010;
  7363   0024D4  0E02               	movlw	2
  7364   0024D6  D003               	goto	L13
  7365   0024D8                     l3557:
  7366                           
  7367                           ; BSR set to: 0
  7368                           ;Lab4.c: 265: LATC = 0b00000100;
  7369   0024D8  0E04               	movlw	4
  7370   0024DA  D001               	goto	L13
  7371   0024DC                     l3559:
  7372                           
  7373                           ; BSR set to: 0
  7374                           ;Lab4.c: 268: LATC = 0b00000111;
  7375   0024DC  0E07               	movlw	7
  7376   0024DE                     L13:
  7377   0024DE  6E8B               	movwf	139,c	;volatile
  7378                           
  7379                           ;Lab4.c: 269: break;
  7380   0024E0  D021               	goto	l3565
  7381   0024E2                     l3563:
  7382                           
  7383                           ; BSR set to: 0
  7384   0024E2  C04A  F00E         	movff	_color,??_ColorRGB
  7385   0024E6  C04B  F00F         	movff	_color+1,??_ColorRGB+1
  7386                           
  7387                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7388                           ; Switch size 1, requested type "simple"
  7389                           ; Number of cases is 1, Range of values is 0 to 0
  7390                           ; switch strategies available:
  7391                           ; Name         Instructions Cycles
  7392                           ; simple_byte            4     3 (average)
  7393                           ;	Chosen strategy is simple_byte
  7394   0024EA  500F               	movf	(??_ColorRGB+1)^0,w,c
  7395   0024EC  0A00               	xorlw	0	; case 0
  7396   0024EE  A4D8               	btfss	status,2,c
  7397   0024F0  D019               	goto	l3565
  7398                           
  7399                           ; BSR set to: 0
  7400                           ; Switch size 1, requested type "simple"
  7401                           ; Number of cases is 8, Range of values is 0 to 7
  7402                           ; switch strategies available:
  7403                           ; Name         Instructions Cycles
  7404                           ; simple_byte           25    13 (average)
  7405                           ;	Chosen strategy is simple_byte
  7406   0024F2  500E               	movf	??_ColorRGB^0,w,c
  7407   0024F4  0A00               	xorlw	0	; case 0
  7408   0024F6  B4D8               	btfsc	status,2,c
  7409   0024F8  D7E5               	goto	l3545
  7410   0024FA  0A01               	xorlw	1	; case 1
  7411   0024FC  B4D8               	btfsc	status,2,c
  7412   0024FE  D7E4               	goto	l3547
  7413   002500  0A03               	xorlw	3	; case 2
  7414   002502  B4D8               	btfsc	status,2,c
  7415   002504  D7E3               	goto	l3549
  7416   002506  0A01               	xorlw	1	; case 3
  7417   002508  B4D8               	btfsc	status,2,c
  7418   00250A  D7E2               	goto	l3551
  7419   00250C  0A07               	xorlw	7	; case 4
  7420   00250E  B4D8               	btfsc	status,2,c
  7421   002510  D7E1               	goto	l3553
  7422   002512  0A01               	xorlw	1	; case 5
  7423   002514  B4D8               	btfsc	status,2,c
  7424   002516  D7DA               	goto	l3549
  7425   002518  0A03               	xorlw	3	; case 6
  7426   00251A  B4D8               	btfsc	status,2,c
  7427   00251C  D7DD               	goto	l3557
  7428   00251E  0A01               	xorlw	1	; case 7
  7429   002520  B4D8               	btfsc	status,2,c
  7430   002522  D7DC               	goto	l3559
  7431   002524                     l3565:
  7432                           
  7433                           ; BSR set to: 0
  7434                           ;Lab4.c: 273: color += 1;
  7435   002524  4A4A               	infsnz	_color^0,f,c
  7436   002526  2A4B               	incf	(_color+1)^0,f,c
  7437                           
  7438                           ; BSR set to: 0
  7439   002528  0012               	return		;funcret
  7440   00252A                     __end_of_ColorRGB:
  7441                           	callstack 0
  7442                           
  7443 ;; *************** function _ISR *****************
  7444 ;; Defined at:
  7445 ;;		line 284 in file "Lab4.c"
  7446 ;; Parameters:    Size  Location     Type
  7447 ;;		None
  7448 ;; Auto vars:     Size  Location     Type
  7449 ;;		None
  7450 ;; Return value:  Size  Location     Type
  7451 ;;                  1    wreg      void 
  7452 ;; Registers used:
  7453 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7454 ;; Tracked objects:
  7455 ;;		On entry : 0/0
  7456 ;;		On exit  : 0/0
  7457 ;;		Unchanged: 0/0
  7458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7459 ;;      Params:         0       0       0       0       0       0       0       0       0
  7460 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7461 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7462 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7463 ;;Total ram usage:        4 bytes
  7464 ;; Hardware stack levels used: 1
  7465 ;; Hardware stack levels required when called: 4
  7466 ;; This function calls:
  7467 ;;		i2_BorraLCD
  7468 ;;		i2_DireccionaLCD
  7469 ;;		i2_MensajeLCD_Var
  7470 ;; This function is called by:
  7471 ;;		Interrupt level 2
  7472 ;; This function uses a non-reentrant model
  7473 ;;
  7474                           
  7475                           	psect	intcode
  7476   000008                     __pintcode:
  7477                           	callstack 0
  7478   000008                     _ISR:
  7479                           	callstack 21
  7480                           
  7481                           ; BSR set to: 0
  7482                           ;incstack = 0
  7483   000008  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7484   00000A  ED90  F011         	call	int_func,f	;refresh shadow registers
  7485                           
  7486                           	psect	intcode_body
  7487   002320                     __pintcode_body:
  7488                           	callstack 21
  7489   002320                     int_func:
  7490                           	callstack 21
  7491   002320  0006               	pop		; remove dummy address from shadow register refresh
  7492   002322  CFF6 F00A          	movff	tblptrl,??_ISR
  7493   002326  CFF7 F00B          	movff	tblptrh,??_ISR+1
  7494   00232A  CFF8 F00C          	movff	tblptru,??_ISR+2
  7495   00232E  CFF5 F00D          	movff	tablat,??_ISR+3
  7496                           
  7497                           ;Lab4.c: 285: if(TMR0IF==1){
  7498   002332  A4F2               	btfss	4082,2,c	;volatile
  7499   002334  D019               	goto	i2l4093
  7500                           
  7501                           ;Lab4.c: 286: if(!verificador) contador = contador +1;
  7502   002336  5046               	movf	_verificador^0,w,c
  7503   002338  1047               	iorwf	(_verificador+1)^0,w,c
  7504   00233A  A4D8               	btfss	status,2,c
  7505   00233C  D007               	goto	i2l4087
  7506   00233E  0E01               	movlw	1
  7507   002340  2448               	addwf	_contador^0,w,c
  7508   002342  6E48               	movwf	_contador^0,c
  7509   002344  0E00               	movlw	0
  7510   002346  2049               	addwfc	(_contador+1)^0,w,c
  7511   002348  6E49               	movwf	(_contador+1)^0,c
  7512   00234A  D004               	goto	i2l4089
  7513   00234C                     i2l4087:
  7514                           
  7515                           ;Lab4.c: 287: else contador = 0;
  7516   00234C  0E00               	movlw	0
  7517   00234E  6E49               	movwf	(_contador+1)^0,c
  7518   002350  0E00               	movlw	0
  7519   002352  6E48               	movwf	_contador^0,c
  7520   002354                     i2l4089:
  7521                           
  7522                           ;Lab4.c: 288: TMR0IF=0;
  7523   002354  94F2               	bcf	4082,2,c	;volatile
  7524                           
  7525                           ;Lab4.c: 289: LATE2 = !LATE2;
  7526   002356  B48D               	btfsc	3981,2,c	;volatile
  7527   002358  D002               	goto	i2u481_40
  7528   00235A  848D               	bsf	3981,2,c	;volatile
  7529   00235C  D001               	goto	i2u482_45
  7530   00235E                     i2u481_40:
  7531   00235E  948D               	bcf	3981,2,c	;volatile
  7532   002360                     i2u482_45:
  7533                           
  7534                           ;Lab4.c: 290: TMR0 = 49911;
  7535   002360  0EC2               	movlw	194
  7536   002362  6ED7               	movwf	215,c	;volatile
  7537   002364  0EF7               	movlw	247
  7538   002366  6ED6               	movwf	214,c	;volatile
  7539   002368                     i2l4093:
  7540                           
  7541                           ;Lab4.c: 291: };Lab4.c: 293: if(contador == 20){
  7542   002368  0E14               	movlw	20
  7543   00236A  1848               	xorwf	_contador^0,w,c
  7544   00236C  1049               	iorwf	(_contador+1)^0,w,c
  7545   00236E  A4D8               	btfss	status,2,c
  7546   002370  D013               	goto	i2l320
  7547                           
  7548                           ;Lab4.c: 294: if(!verificador){
  7549   002372  5046               	movf	_verificador^0,w,c
  7550   002374  1047               	iorwf	(_verificador+1)^0,w,c
  7551   002376  A4D8               	btfss	status,2,c
  7552   002378  D00F               	goto	i2l320
  7553                           
  7554                           ;Lab4.c: 295: LATC7 = !LATC7;
  7555   00237A  BE8B               	btfsc	3979,7,c	;volatile
  7556   00237C  D002               	goto	i2u485_40
  7557   00237E  8E8B               	bsf	3979,7,c	;volatile
  7558   002380  D001               	goto	i2u486_45
  7559   002382                     i2u485_40:
  7560   002382  9E8B               	bcf	3979,7,c	;volatile
  7561   002384                     i2u486_45:
  7562                           
  7563                           ;Lab4.c: 296: BorraLCD();
  7564   002384  ECD7  F015         	call	i2_BorraLCD	;wreg free
  7565                           
  7566                           ;Lab4.c: 297: DireccionaLCD(0x82);
  7567   002388  0E82               	movlw	130
  7568   00238A  ECC2  F015         	call	i2_DireccionaLCD
  7569                           
  7570                           ;Lab4.c: 298: MensajeLCD_Var("LVP Activado");
  7571   00238E  0E65               	movlw	low STR_11
  7572   002390  6E06               	movwf	i2MensajeLCD_Var@a^0,c
  7573   002392  EC94  F014         	call	i2_MensajeLCD_Var	;wreg free
  7574   002396  0003               	sleep		;# 
  7575   002398                     i2l320:
  7576   002398  C00D  FFF5         	movff	??_ISR+3,tablat
  7577   00239C  C00C  FFF8         	movff	??_ISR+2,tblptru
  7578   0023A0  C00B  FFF7         	movff	??_ISR+1,tblptrh
  7579   0023A4  C00A  FFF6         	movff	??_ISR,tblptrl
  7580   0023A8  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7581   0023AA  0011               	retfie		f
  7582   0023AC                     __end_of_ISR:
  7583                           	callstack 0
  7584                           
  7585 ;; *************** function i2_MensajeLCD_Var *****************
  7586 ;; Defined at:
  7587 ;;		line 260 in file "LibLCDXC8.h"
  7588 ;; Parameters:    Size  Location     Type
  7589 ;;  a               1    5[COMRAM] PTR unsigned char 
  7590 ;;		 -> STR_15(14), STR_14(9), STR_13(12), STR_12(10), 
  7591 ;;		 -> STR_11(13), STR_10(9), STR_9(11), STR_8(9), 
  7592 ;;		 -> STR_7(15), STR_6(9), STR_5(10), STR_4(9), 
  7593 ;;		 -> STR_3(14), STR_2(5), STR_1(8), 
  7594 ;; Auto vars:     Size  Location     Type
  7595 ;;  i               2    7[COMRAM] int 
  7596 ;; Return value:  Size  Location     Type
  7597 ;;                  1    wreg      void 
  7598 ;; Registers used:
  7599 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7600 ;; Tracked objects:
  7601 ;;		On entry : 0/0
  7602 ;;		On exit  : 0/0
  7603 ;;		Unchanged: 0/0
  7604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7605 ;;      Params:         1       0       0       0       0       0       0       0       0
  7606 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7607 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7608 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7609 ;;Total ram usage:        4 bytes
  7610 ;; Hardware stack levels used: 1
  7611 ;; Hardware stack levels required when called: 3
  7612 ;; This function calls:
  7613 ;;		i2_EscribeLCD_c
  7614 ;; This function is called by:
  7615 ;;		_ISR
  7616 ;; This function uses a non-reentrant model
  7617 ;;
  7618                           
  7619                           	psect	text41
  7620   002928                     __ptext41:
  7621                           	callstack 0
  7622   002928                     i2_MensajeLCD_Var:
  7623                           	callstack 21
  7624                           
  7625                           ;LibLCDXC8.h: 264: for(int i = 0; i<16; i++){
  7626                           
  7627                           ;incstack = 0
  7628   002928  0E00               	movlw	0
  7629   00292A  6E09               	movwf	(i2MensajeLCD_Var@i+1)^0,c
  7630   00292C  0E00               	movlw	0
  7631   00292E  6E08               	movwf	i2MensajeLCD_Var@i^0,c
  7632   002930                     i2l3709:
  7633                           
  7634                           ;LibLCDXC8.h: 265: if(a[i] == (0)){
  7635   002930  5006               	movf	i2MensajeLCD_Var@a^0,w,c
  7636   002932  2408               	addwf	i2MensajeLCD_Var@i^0,w,c
  7637   002934  6E07               	movwf	??i2_MensajeLCD_Var^0,c
  7638   002936  C007  FFF6         	movff	??i2_MensajeLCD_Var,tblptrl
  7639   00293A                     	if	1	;There is more than 1 active tblptr byte
  7640   00293A  0E08               	movlw	high __smallconst
  7641   00293C  6EF7               	movwf	tblptrh,c
  7642   00293E                     	endif
  7643   00293E                     	if	0	;tblptru may be non-zero
  7644   00293E                     	endif
  7645   00293E                     	if	0	;tblptru may be non-zero
  7646   00293E                     	endif
  7647   00293E  0008               	tblrd		*
  7648   002940  50F5               	movf	tablat,w,c
  7649   002942  0900               	iorlw	0
  7650   002944  B4D8               	btfsc	status,2,c
  7651   002946  0012               	return	
  7652                           
  7653                           ;LibLCDXC8.h: 267: };LibLCDXC8.h: 268: EscribeLCD_c(a[i]);
  7654   002948  5006               	movf	i2MensajeLCD_Var@a^0,w,c
  7655   00294A  2408               	addwf	i2MensajeLCD_Var@i^0,w,c
  7656   00294C  6E07               	movwf	??i2_MensajeLCD_Var^0,c
  7657   00294E  C007  FFF6         	movff	??i2_MensajeLCD_Var,tblptrl
  7658   002952                     	if	1	;There is more than 1 active tblptr byte
  7659   002952  0E08               	movlw	high __smallconst
  7660   002954  6EF7               	movwf	tblptrh,c
  7661   002956                     	endif
  7662   002956                     	if	0	;tblptru may be non-zero
  7663   002956                     	endif
  7664   002956                     	if	0	;tblptru may be non-zero
  7665   002956                     	endif
  7666   002956  0008               	tblrd		*
  7667   002958  50F5               	movf	tablat,w,c
  7668   00295A  ECB7  F015         	call	i2_EscribeLCD_c
  7669   00295E  4A08               	infsnz	i2MensajeLCD_Var@i^0,f,c
  7670   002960  2A09               	incf	(i2MensajeLCD_Var@i+1)^0,f,c
  7671   002962  BE09               	btfsc	(i2MensajeLCD_Var@i+1)^0,7,c
  7672   002964  D7E5               	goto	i2l3709
  7673   002966  5009               	movf	(i2MensajeLCD_Var@i+1)^0,w,c
  7674   002968  E105               	bnz	i2u396_40
  7675   00296A  0E10               	movlw	16
  7676   00296C  5C08               	subwf	i2MensajeLCD_Var@i^0,w,c
  7677   00296E  B0D8               	btfsc	status,0,c
  7678   002970  0012               	return	
  7679   002972  D7DE               	goto	i2l3709
  7680   002974                     i2u396_40:
  7681   002974  0012               	return		;funcret
  7682   002976                     __end_ofi2_MensajeLCD_Var:
  7683                           	callstack 0
  7684                           
  7685 ;; *************** function i2_EscribeLCD_c *****************
  7686 ;; Defined at:
  7687 ;;		line 116 in file "LibLCDXC8.h"
  7688 ;; Parameters:    Size  Location     Type
  7689 ;;  a               1    wreg     unsigned char 
  7690 ;; Auto vars:     Size  Location     Type
  7691 ;;  a               1    4[COMRAM] unsigned char 
  7692 ;; Return value:  Size  Location     Type
  7693 ;;                  1    wreg      void 
  7694 ;; Registers used:
  7695 ;;		wreg, status,2, status,0, cstack
  7696 ;; Tracked objects:
  7697 ;;		On entry : 0/0
  7698 ;;		On exit  : 0/0
  7699 ;;		Unchanged: 0/0
  7700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7701 ;;      Params:         0       0       0       0       0       0       0       0       0
  7702 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7703 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7704 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7705 ;;Total ram usage:        1 bytes
  7706 ;; Hardware stack levels used: 1
  7707 ;; Hardware stack levels required when called: 2
  7708 ;; This function calls:
  7709 ;;		i2_EnviaDato
  7710 ;;		i2_HabilitaLCD
  7711 ;;		i2_RetardoLCD
  7712 ;; This function is called by:
  7713 ;;		i2_MensajeLCD_Var
  7714 ;; This function uses a non-reentrant model
  7715 ;;
  7716                           
  7717                           	psect	text42
  7718   002B6E                     __ptext42:
  7719                           	callstack 0
  7720   002B6E                     i2_EscribeLCD_c:
  7721                           	callstack 21
  7722                           
  7723                           ;incstack = 0
  7724                           ;i2EscribeLCD_c@a stored from wreg
  7725   002B6E  6E05               	movwf	i2EscribeLCD_c@a^0,c
  7726                           
  7727                           ;LibLCDXC8.h: 120: LATE0=1;
  7728   002B70  808D               	bsf	3981,0,c	;volatile
  7729                           
  7730                           ;LibLCDXC8.h: 121: EnviaDato(a);
  7731   002B72  5005               	movf	i2EscribeLCD_c@a^0,w,c
  7732   002B74  ECDE  F014         	call	i2_EnviaDato
  7733                           
  7734                           ;LibLCDXC8.h: 122: HabilitaLCD();
  7735   002B78  ECE8  F015         	call	i2_HabilitaLCD	;wreg free
  7736                           
  7737                           ;LibLCDXC8.h: 123: RetardoLCD(4);
  7738   002B7C  0E04               	movlw	4
  7739   002B7E  EC19  F014         	call	i2_RetardoLCD
  7740   002B82  0012               	return		;funcret
  7741   002B84                     __end_ofi2_EscribeLCD_c:
  7742                           	callstack 0
  7743                           
  7744 ;; *************** function i2_DireccionaLCD *****************
  7745 ;; Defined at:
  7746 ;;		line 272 in file "LibLCDXC8.h"
  7747 ;; Parameters:    Size  Location     Type
  7748 ;;  a               1    wreg     unsigned char 
  7749 ;; Auto vars:     Size  Location     Type
  7750 ;;  a               1    4[COMRAM] unsigned char 
  7751 ;; Return value:  Size  Location     Type
  7752 ;;                  1    wreg      void 
  7753 ;; Registers used:
  7754 ;;		wreg, status,2, status,0, cstack
  7755 ;; Tracked objects:
  7756 ;;		On entry : 0/0
  7757 ;;		On exit  : 0/0
  7758 ;;		Unchanged: 0/0
  7759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7760 ;;      Params:         0       0       0       0       0       0       0       0       0
  7761 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7762 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7763 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7764 ;;Total ram usage:        1 bytes
  7765 ;; Hardware stack levels used: 1
  7766 ;; Hardware stack levels required when called: 2
  7767 ;; This function calls:
  7768 ;;		i2_EnviaDato
  7769 ;;		i2_HabilitaLCD
  7770 ;;		i2_RetardoLCD
  7771 ;; This function is called by:
  7772 ;;		_ISR
  7773 ;; This function uses a non-reentrant model
  7774 ;;
  7775                           
  7776                           	psect	text43
  7777   002B84                     __ptext43:
  7778                           	callstack 0
  7779   002B84                     i2_DireccionaLCD:
  7780                           	callstack 22
  7781                           
  7782                           ;incstack = 0
  7783                           ;i2DireccionaLCD@a stored from wreg
  7784   002B84  6E05               	movwf	i2DireccionaLCD@a^0,c
  7785                           
  7786                           ;LibLCDXC8.h: 275: LATE0=0;
  7787   002B86  908D               	bcf	3981,0,c	;volatile
  7788                           
  7789                           ;LibLCDXC8.h: 276: EnviaDato(a);
  7790   002B88  5005               	movf	i2DireccionaLCD@a^0,w,c
  7791   002B8A  ECDE  F014         	call	i2_EnviaDato
  7792                           
  7793                           ;LibLCDXC8.h: 277: HabilitaLCD();
  7794   002B8E  ECE8  F015         	call	i2_HabilitaLCD	;wreg free
  7795                           
  7796                           ;LibLCDXC8.h: 278: RetardoLCD(4);
  7797   002B92  0E04               	movlw	4
  7798   002B94  EC19  F014         	call	i2_RetardoLCD
  7799   002B98  0012               	return		;funcret
  7800   002B9A                     __end_ofi2_DireccionaLCD:
  7801                           	callstack 0
  7802                           
  7803 ;; *************** function i2_BorraLCD *****************
  7804 ;; Defined at:
  7805 ;;		line 102 in file "LibLCDXC8.h"
  7806 ;; Parameters:    Size  Location     Type
  7807 ;;		None
  7808 ;; Auto vars:     Size  Location     Type
  7809 ;;		None
  7810 ;; Return value:  Size  Location     Type
  7811 ;;                  1    wreg      void 
  7812 ;; Registers used:
  7813 ;;		wreg, status,2, status,0, cstack
  7814 ;; Tracked objects:
  7815 ;;		On entry : 0/0
  7816 ;;		On exit  : 0/0
  7817 ;;		Unchanged: 0/0
  7818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7819 ;;      Params:         0       0       0       0       0       0       0       0       0
  7820 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7821 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7822 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7823 ;;Total ram usage:        0 bytes
  7824 ;; Hardware stack levels used: 1
  7825 ;; Hardware stack levels required when called: 2
  7826 ;; This function calls:
  7827 ;;		i2_EnviaDato
  7828 ;;		i2_HabilitaLCD
  7829 ;;		i2_RetardoLCD
  7830 ;; This function is called by:
  7831 ;;		_ISR
  7832 ;; This function uses a non-reentrant model
  7833 ;;
  7834                           
  7835                           	psect	text44
  7836   002BAE                     __ptext44:
  7837                           	callstack 0
  7838   002BAE                     i2_BorraLCD:
  7839                           	callstack 22
  7840                           
  7841                           ;LibLCDXC8.h: 104: LATE0=0;
  7842                           
  7843                           ;incstack = 0
  7844   002BAE  908D               	bcf	3981,0,c	;volatile
  7845                           
  7846                           ;LibLCDXC8.h: 105: EnviaDato(0x01);
  7847   002BB0  0E01               	movlw	1
  7848   002BB2  ECDE  F014         	call	i2_EnviaDato
  7849                           
  7850                           ;LibLCDXC8.h: 106: HabilitaLCD();
  7851   002BB6  ECE8  F015         	call	i2_HabilitaLCD	;wreg free
  7852                           
  7853                           ;LibLCDXC8.h: 107: RetardoLCD(2);
  7854   002BBA  0E02               	movlw	2
  7855   002BBC  EC19  F014         	call	i2_RetardoLCD
  7856   002BC0  0012               	return		;funcret
  7857   002BC2                     __end_ofi2_BorraLCD:
  7858                           	callstack 0
  7859                           
  7860 ;; *************** function i2_EnviaDato *****************
  7861 ;; Defined at:
  7862 ;;		line 51 in file "LibLCDXC8.h"
  7863 ;; Parameters:    Size  Location     Type
  7864 ;;  a               1    wreg     unsigned char 
  7865 ;; Auto vars:     Size  Location     Type
  7866 ;;  a               1    3[COMRAM] unsigned char 
  7867 ;; Return value:  Size  Location     Type
  7868 ;;                  1    wreg      void 
  7869 ;; Registers used:
  7870 ;;		wreg, status,2, status,0, cstack
  7871 ;; Tracked objects:
  7872 ;;		On entry : 0/0
  7873 ;;		On exit  : 0/0
  7874 ;;		Unchanged: 0/0
  7875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7876 ;;      Params:         0       0       0       0       0       0       0       0       0
  7877 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7878 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7879 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7880 ;;Total ram usage:        2 bytes
  7881 ;; Hardware stack levels used: 1
  7882 ;; Hardware stack levels required when called: 1
  7883 ;; This function calls:
  7884 ;;		i2_HabilitaLCD
  7885 ;;		i2_RetardoLCD
  7886 ;; This function is called by:
  7887 ;;		i2_BorraLCD
  7888 ;;		i2_EscribeLCD_c
  7889 ;;		i2_DireccionaLCD
  7890 ;; This function uses a non-reentrant model
  7891 ;;
  7892                           
  7893                           	psect	text45
  7894   0029BC                     __ptext45:
  7895                           	callstack 0
  7896   0029BC                     i2_EnviaDato:
  7897                           	callstack 21
  7898                           
  7899                           ;incstack = 0
  7900                           ;i2EnviaDato@a stored from wreg
  7901   0029BC  6E04               	movwf	i2EnviaDato@a^0,c
  7902                           
  7903                           ;LibLCDXC8.h: 52: if(interfaz==4){
  7904   0029BE  0E04               	movlw	4
  7905   0029C0  1850               	xorwf	_interfaz^0,w,c
  7906   0029C2  A4D8               	btfss	status,2,c
  7907   0029C4  D017               	goto	i2l3155
  7908                           
  7909                           ;LibLCDXC8.h: 53: LATD=(LATD & 0b00001111) | (a & 0b11110000);
  7910   0029C6  C004  F003         	movff	i2EnviaDato@a,??i2_EnviaDato
  7911   0029CA  0EF0               	movlw	240
  7912   0029CC  1603               	andwf	??i2_EnviaDato^0,f,c
  7913   0029CE  508C               	movf	140,w,c	;volatile
  7914   0029D0  0B0F               	andlw	15
  7915   0029D2  1003               	iorwf	??i2_EnviaDato^0,w,c
  7916   0029D4  6E8C               	movwf	140,c	;volatile
  7917                           
  7918                           ;LibLCDXC8.h: 54: HabilitaLCD();
  7919   0029D6  ECE8  F015         	call	i2_HabilitaLCD	;wreg free
  7920                           
  7921                           ;LibLCDXC8.h: 55: RetardoLCD(1);
  7922   0029DA  0E01               	movlw	1
  7923   0029DC  EC19  F014         	call	i2_RetardoLCD
  7924                           
  7925                           ;LibLCDXC8.h: 56: LATD=(LATD & 0b00001111) | (a<<4);
  7926   0029E0  C004  F003         	movff	i2EnviaDato@a,??i2_EnviaDato
  7927   0029E4  3A03               	swapf	??i2_EnviaDato^0,f,c
  7928   0029E6  0EF0               	movlw	240
  7929   0029E8  1603               	andwf	??i2_EnviaDato^0,f,c
  7930   0029EA  508C               	movf	140,w,c	;volatile
  7931   0029EC  0B0F               	andlw	15
  7932   0029EE  1003               	iorwf	??i2_EnviaDato^0,w,c
  7933   0029F0  6E8C               	movwf	140,c	;volatile
  7934                           
  7935                           ;LibLCDXC8.h: 57: }else if(interfaz==8){
  7936   0029F2  0012               	return	
  7937   0029F4                     i2l3155:
  7938   0029F4  0E08               	movlw	8
  7939   0029F6  1850               	xorwf	_interfaz^0,w,c
  7940   0029F8  A4D8               	btfss	status,2,c
  7941   0029FA  0012               	return	
  7942                           
  7943                           ;LibLCDXC8.h: 58: LATD=a;
  7944   0029FC  C004  FF8C         	movff	i2EnviaDato@a,3980	;volatile
  7945   002A00  0012               	return		;funcret
  7946   002A02                     __end_ofi2_EnviaDato:
  7947                           	callstack 0
  7948                           
  7949 ;; *************** function i2_RetardoLCD *****************
  7950 ;; Defined at:
  7951 ;;		line 308 in file "LibLCDXC8.h"
  7952 ;; Parameters:    Size  Location     Type
  7953 ;;  a               1    wreg     unsigned char 
  7954 ;; Auto vars:     Size  Location     Type
  7955 ;;  a               1    1[COMRAM] unsigned char 
  7956 ;; Return value:  Size  Location     Type
  7957 ;;                  1    wreg      void 
  7958 ;; Registers used:
  7959 ;;		wreg, status,2, status,0
  7960 ;; Tracked objects:
  7961 ;;		On entry : 0/0
  7962 ;;		On exit  : 0/0
  7963 ;;		Unchanged: 0/0
  7964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7965 ;;      Params:         0       0       0       0       0       0       0       0       0
  7966 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7967 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7968 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7969 ;;Total ram usage:        2 bytes
  7970 ;; Hardware stack levels used: 1
  7971 ;; This function calls:
  7972 ;;		Nothing
  7973 ;; This function is called by:
  7974 ;;		i2_EnviaDato
  7975 ;;		i2_BorraLCD
  7976 ;;		i2_EscribeLCD_c
  7977 ;;		i2_DireccionaLCD
  7978 ;; This function uses a non-reentrant model
  7979 ;;
  7980                           
  7981                           	psect	text46
  7982   002832                     __ptext46:
  7983                           	callstack 0
  7984   002832                     i2_RetardoLCD:
  7985                           	callstack 22
  7986                           
  7987                           ;incstack = 0
  7988                           ;i2RetardoLCD@a stored from wreg
  7989   002832  6E02               	movwf	i2RetardoLCD@a^0,c
  7990                           
  7991                           ;LibLCDXC8.h: 309: switch(a){
  7992   002834  D01B               	goto	i2l2961
  7993   002836                     i2l2951:
  7994   002836  0E05               	movlw	5
  7995   002838  6E01               	movwf	??i2_RetardoLCD^0,c
  7996   00283A  0EDE               	movlw	222
  7997   00283C                     i2u663_47:
  7998   00283C  2EE8               	decfsz	wreg,f,c
  7999   00283E  D7FE               	bra	i2u663_47
  8000   002840  2E01               	decfsz	??i2_RetardoLCD^0,f,c
  8001   002842  D7FC               	bra	i2u663_47
  8002                           
  8003                           ;LibLCDXC8.h: 312: break;
  8004   002844  0012               	return	
  8005   002846                     i2l2953:
  8006   002846  0E53               	movlw	83
  8007   002848                     i2u664_47:
  8008   002848  2EE8               	decfsz	wreg,f,c
  8009   00284A  D7FE               	bra	i2u664_47
  8010   00284C  F000               	nop	
  8011                           
  8012                           ;LibLCDXC8.h: 314: _delay((unsigned long)((640)*(1000000/4000000.0)));
  8013   00284E  0E35               	movlw	53
  8014   002850                     i2u665_47:
  8015   002850  2EE8               	decfsz	wreg,f,c
  8016   002852  D7FE               	bra	i2u665_47
  8017   002854  F000               	nop	
  8018                           
  8019                           ;LibLCDXC8.h: 316: break;
  8020   002856  0012               	return	
  8021   002858                     i2l2955:
  8022   002858  0E08               	movlw	8
  8023   00285A                     i2u666_47:
  8024   00285A  2EE8               	decfsz	wreg,f,c
  8025   00285C  D7FE               	bra	i2u666_47
  8026   00285E  F000               	nop	
  8027                           
  8028                           ;LibLCDXC8.h: 319: break;
  8029   002860  0012               	return	
  8030   002862                     i2l2957:
  8031   002862  0E03               	movlw	3
  8032   002864                     i2u667_47:
  8033   002864  2EE8               	decfsz	wreg,f,c
  8034   002866  D7FE               	bra	i2u667_47
  8035   002868  F000               	nop	
  8036                           
  8037                           ;LibLCDXC8.h: 322: break;
  8038   00286A  0012               	return	
  8039   00286C                     i2l2961:
  8040   00286C  5002               	movf	i2RetardoLCD@a^0,w,c
  8041                           
  8042                           ; Switch size 1, requested type "simple"
  8043                           ; Number of cases is 4, Range of values is 1 to 4
  8044                           ; switch strategies available:
  8045                           ; Name         Instructions Cycles
  8046                           ; simple_byte           13     7 (average)
  8047                           ;	Chosen strategy is simple_byte
  8048   00286E  0A01               	xorlw	1	; case 1
  8049   002870  B4D8               	btfsc	status,2,c
  8050   002872  D7E1               	goto	i2l2951
  8051   002874  0A03               	xorlw	3	; case 2
  8052   002876  B4D8               	btfsc	status,2,c
  8053   002878  D7E6               	goto	i2l2953
  8054   00287A  0A01               	xorlw	1	; case 3
  8055   00287C  B4D8               	btfsc	status,2,c
  8056   00287E  D7EC               	goto	i2l2955
  8057   002880  0A07               	xorlw	7	; case 4
  8058   002882  A4D8               	btfss	status,2,c
  8059   002884  0012               	return	
  8060   002886  D7ED               	goto	i2l2957
  8061   002888                     __end_ofi2_RetardoLCD:
  8062                           	callstack 0
  8063                           
  8064 ;; *************** function i2_HabilitaLCD *****************
  8065 ;; Defined at:
  8066 ;;		line 95 in file "LibLCDXC8.h"
  8067 ;; Parameters:    Size  Location     Type
  8068 ;;		None
  8069 ;; Auto vars:     Size  Location     Type
  8070 ;;		None
  8071 ;; Return value:  Size  Location     Type
  8072 ;;                  1    wreg      void 
  8073 ;; Registers used:
  8074 ;;		wreg
  8075 ;; Tracked objects:
  8076 ;;		On entry : 0/0
  8077 ;;		On exit  : 0/0
  8078 ;;		Unchanged: 0/0
  8079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8080 ;;      Params:         0       0       0       0       0       0       0       0       0
  8081 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8082 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8083 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8084 ;;Total ram usage:        0 bytes
  8085 ;; Hardware stack levels used: 1
  8086 ;; This function calls:
  8087 ;;		Nothing
  8088 ;; This function is called by:
  8089 ;;		i2_EnviaDato
  8090 ;;		i2_BorraLCD
  8091 ;;		i2_EscribeLCD_c
  8092 ;;		i2_DireccionaLCD
  8093 ;; This function uses a non-reentrant model
  8094 ;;
  8095                           
  8096                           	psect	text47
  8097   002BD0                     __ptext47:
  8098                           	callstack 0
  8099   002BD0                     i2_HabilitaLCD:
  8100                           	callstack 22
  8101                           
  8102                           ;LibLCDXC8.h: 97: LATE1=1;
  8103                           
  8104                           ;incstack = 0
  8105   002BD0  828D               	bsf	3981,1,c	;volatile
  8106                           
  8107                           ;LibLCDXC8.h: 98: _delay((unsigned long)((40)*(1000000/4000000.0)));
  8108   002BD2  0E03               	movlw	3
  8109   002BD4                     i2u668_47:
  8110   002BD4  2EE8               	decfsz	wreg,f,c
  8111   002BD6  D7FE               	bra	i2u668_47
  8112   002BD8  F000               	nop	
  8113                           
  8114                           ;LibLCDXC8.h: 100: LATE1=0;
  8115   002BDA  928D               	bcf	3981,1,c	;volatile
  8116   002BDC  0012               	return		;funcret
  8117   002BDE                     __end_ofi2_HabilitaLCD:
  8118                           	callstack 0
  8119                           
  8120                           	psect	rparam
  8121   000000                     
  8122                           	psect	temp
  8123   000051                     btemp:
  8124                           	callstack 0
  8125   000051                     	ds	1
  8126   000000                     int$flags	set	btemp
  8127   000000                     wtemp8	set	btemp+1
  8128   000000                     ttemp5	set	btemp+1
  8129   000000                     ttemp6	set	btemp+4
  8130   000000                     ttemp7	set	btemp+8
  8131                           
  8132                           	psect	idloc
  8133                           
  8134                           ;Config register IDLOC0 @ 0x200000
  8135                           ;	unspecified, using default values
  8136   200000                     	org	2097152
  8137   200000  FF                 	db	255
  8138                           
  8139                           ;Config register IDLOC1 @ 0x200001
  8140                           ;	unspecified, using default values
  8141   200001                     	org	2097153
  8142   200001  FF                 	db	255
  8143                           
  8144                           ;Config register IDLOC2 @ 0x200002
  8145                           ;	unspecified, using default values
  8146   200002                     	org	2097154
  8147   200002  FF                 	db	255
  8148                           
  8149                           ;Config register IDLOC3 @ 0x200003
  8150                           ;	unspecified, using default values
  8151   200003                     	org	2097155
  8152   200003  FF                 	db	255
  8153                           
  8154                           ;Config register IDLOC4 @ 0x200004
  8155                           ;	unspecified, using default values
  8156   200004                     	org	2097156
  8157   200004  FF                 	db	255
  8158                           
  8159                           ;Config register IDLOC5 @ 0x200005
  8160                           ;	unspecified, using default values
  8161   200005                     	org	2097157
  8162   200005  FF                 	db	255
  8163                           
  8164                           ;Config register IDLOC6 @ 0x200006
  8165                           ;	unspecified, using default values
  8166   200006                     	org	2097158
  8167   200006  FF                 	db	255
  8168                           
  8169                           ;Config register IDLOC7 @ 0x200007
  8170                           ;	unspecified, using default values
  8171   200007                     	org	2097159
  8172   200007  FF                 	db	255
  8173                           
  8174                           	psect	config
  8175                           
  8176                           ;Config register CONFIG1L @ 0x300000
  8177                           ;	unspecified, using default values
  8178                           ;	PLL Prescaler Selection bits
  8179                           ;	PLLDIV = 0x0, unprogrammed default
  8180                           ;	System Clock Postscaler Selection bits
  8181                           ;	CPUDIV = 0x0, unprogrammed default
  8182                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  8183                           ;	USBDIV = 0x0, unprogrammed default
  8184   300000                     	org	3145728
  8185   300000  00                 	db	0
  8186                           
  8187                           ;Config register CONFIG1H @ 0x300001
  8188                           ;	Oscillator Selection bits
  8189                           ;	FOSC = INTOSC_EC, Internal oscillator, CLKO function on RA6, EC used by USB (INTCKO)
  8190                           ;	Fail-Safe Clock Monitor Enable bit
  8191                           ;	FCMEN = 0x0, unprogrammed default
  8192                           ;	Internal/External Oscillator Switchover bit
  8193                           ;	IESO = 0x0, unprogrammed default
  8194   300001                     	org	3145729
  8195   300001  09                 	db	9
  8196                           
  8197                           ;Config register CONFIG2L @ 0x300002
  8198                           ;	unspecified, using default values
  8199                           ;	Power-up Timer Enable bit
  8200                           ;	PWRT = 0x1, unprogrammed default
  8201                           ;	Brown-out Reset Enable bits
  8202                           ;	BOR = 0x3, unprogrammed default
  8203                           ;	Brown-out Reset Voltage bits
  8204                           ;	BORV = 0x3, unprogrammed default
  8205                           ;	USB Voltage Regulator Enable bit
  8206                           ;	VREGEN = 0x0, unprogrammed default
  8207   300002                     	org	3145730
  8208   300002  1F                 	db	31
  8209                           
  8210                           ;Config register CONFIG2H @ 0x300003
  8211                           ;	Watchdog Timer Enable bit
  8212                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  8213                           ;	Watchdog Timer Postscale Select bits
  8214                           ;	WDTPS = 0xF, unprogrammed default
  8215   300003                     	org	3145731
  8216   300003  1E                 	db	30
  8217                           
  8218                           ; Padding undefined space
  8219   300004                     	org	3145732
  8220   300004  FF                 	db	255
  8221                           
  8222                           ;Config register CONFIG3H @ 0x300005
  8223                           ;	CCP2 MUX bit
  8224                           ;	CCP2MX = 0x1, unprogrammed default
  8225                           ;	PORTB A/D Enable bit
  8226                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  8227                           ;	Low-Power Timer 1 Oscillator Enable bit
  8228                           ;	LPT1OSC = 0x0, unprogrammed default
  8229                           ;	MCLR Pin Enable bit
  8230                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  8231   300005                     	org	3145733
  8232   300005  81                 	db	129
  8233                           
  8234                           ;Config register CONFIG4L @ 0x300006
  8235                           ;	Stack Full/Underflow Reset Enable bit
  8236                           ;	STVREN = 0x1, unprogrammed default
  8237                           ;	Single-Supply ICSP Enable bit
  8238                           ;	LVP = ON, Single-Supply ICSP enabled
  8239                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  8240                           ;	ICPRT = 0x0, unprogrammed default
  8241                           ;	Extended Instruction Set Enable bit
  8242                           ;	XINST = 0x0, unprogrammed default
  8243                           ;	Background Debugger Enable bit
  8244                           ;	DEBUG = 0x1, unprogrammed default
  8245   300006                     	org	3145734
  8246   300006  85                 	db	133
  8247                           
  8248                           ; Padding undefined space
  8249   300007                     	org	3145735
  8250   300007  FF                 	db	255
  8251                           
  8252                           ;Config register CONFIG5L @ 0x300008
  8253                           ;	unspecified, using default values
  8254                           ;	Code Protection bit
  8255                           ;	CP0 = 0x1, unprogrammed default
  8256                           ;	Code Protection bit
  8257                           ;	CP1 = 0x1, unprogrammed default
  8258                           ;	Code Protection bit
  8259                           ;	CP2 = 0x1, unprogrammed default
  8260                           ;	Code Protection bit
  8261                           ;	CP3 = 0x1, unprogrammed default
  8262   300008                     	org	3145736
  8263   300008  0F                 	db	15
  8264                           
  8265                           ;Config register CONFIG5H @ 0x300009
  8266                           ;	unspecified, using default values
  8267                           ;	Boot Block Code Protection bit
  8268                           ;	CPB = 0x1, unprogrammed default
  8269                           ;	Data EEPROM Code Protection bit
  8270                           ;	CPD = 0x1, unprogrammed default
  8271   300009                     	org	3145737
  8272   300009  C0                 	db	192
  8273                           
  8274                           ;Config register CONFIG6L @ 0x30000A
  8275                           ;	unspecified, using default values
  8276                           ;	Write Protection bit
  8277                           ;	WRT0 = 0x1, unprogrammed default
  8278                           ;	Write Protection bit
  8279                           ;	WRT1 = 0x1, unprogrammed default
  8280                           ;	Write Protection bit
  8281                           ;	WRT2 = 0x1, unprogrammed default
  8282                           ;	Write Protection bit
  8283                           ;	WRT3 = 0x1, unprogrammed default
  8284   30000A                     	org	3145738
  8285   30000A  0F                 	db	15
  8286                           
  8287                           ;Config register CONFIG6H @ 0x30000B
  8288                           ;	unspecified, using default values
  8289                           ;	Configuration Register Write Protection bit
  8290                           ;	WRTC = 0x1, unprogrammed default
  8291                           ;	Boot Block Write Protection bit
  8292                           ;	WRTB = 0x1, unprogrammed default
  8293                           ;	Data EEPROM Write Protection bit
  8294                           ;	WRTD = 0x1, unprogrammed default
  8295   30000B                     	org	3145739
  8296   30000B  E0                 	db	224
  8297                           
  8298                           ;Config register CONFIG7L @ 0x30000C
  8299                           ;	unspecified, using default values
  8300                           ;	Table Read Protection bit
  8301                           ;	EBTR0 = 0x1, unprogrammed default
  8302                           ;	Table Read Protection bit
  8303                           ;	EBTR1 = 0x1, unprogrammed default
  8304                           ;	Table Read Protection bit
  8305                           ;	EBTR2 = 0x1, unprogrammed default
  8306                           ;	Table Read Protection bit
  8307                           ;	EBTR3 = 0x1, unprogrammed default
  8308   30000C                     	org	3145740
  8309   30000C  0F                 	db	15
  8310                           
  8311                           ;Config register CONFIG7H @ 0x30000D
  8312                           ;	unspecified, using default values
  8313                           ;	Boot Block Table Read Protection bit
  8314                           ;	EBTRB = 0x1, unprogrammed default
  8315   30000D                     	org	3145741
  8316   30000D  40                 	db	64
  8317                           tosu	equ	0xFFF
  8318                           tosh	equ	0xFFE
  8319                           tosl	equ	0xFFD
  8320                           stkptr	equ	0xFFC
  8321                           pclatu	equ	0xFFB
  8322                           pclath	equ	0xFFA
  8323                           pcl	equ	0xFF9
  8324                           tblptru	equ	0xFF8
  8325                           tblptrh	equ	0xFF7
  8326                           tblptrl	equ	0xFF6
  8327                           tablat	equ	0xFF5
  8328                           prodh	equ	0xFF4
  8329                           prodl	equ	0xFF3
  8330                           indf0	equ	0xFEF
  8331                           postinc0	equ	0xFEE
  8332                           postdec0	equ	0xFED
  8333                           preinc0	equ	0xFEC
  8334                           plusw0	equ	0xFEB
  8335                           fsr0h	equ	0xFEA
  8336                           fsr0l	equ	0xFE9
  8337                           wreg	equ	0xFE8
  8338                           indf1	equ	0xFE7
  8339                           postinc1	equ	0xFE6
  8340                           postdec1	equ	0xFE5
  8341                           preinc1	equ	0xFE4
  8342                           plusw1	equ	0xFE3
  8343                           fsr1h	equ	0xFE2
  8344                           fsr1l	equ	0xFE1
  8345                           bsr	equ	0xFE0
  8346                           indf2	equ	0xFDF
  8347                           postinc2	equ	0xFDE
  8348                           postdec2	equ	0xFDD
  8349                           preinc2	equ	0xFDC
  8350                           plusw2	equ	0xFDB
  8351                           fsr2h	equ	0xFDA
  8352                           fsr2l	equ	0xFD9
  8353                           status	equ	0xFD8

Data Sizes:
    Strings     121
    Constant    57
    Data        4
    BSS         39
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     67      80
    BANK0           160     35      65
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    eval_poly@d	PTR const  size(1) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    MensajeLCD_Var@a	PTR unsigned char  size(1) Largest target is 15
		 -> STR_15(CODE[14]), STR_14(CODE[9]), STR_13(CODE[12]), STR_12(CODE[10]), 
		 -> STR_11(CODE[13]), STR_10(CODE[9]), STR_9(CODE[11]), STR_8(CODE[9]), 
		 -> STR_7(CODE[15]), STR_6(CODE[9]), STR_5(CODE[10]), STR_4(CODE[9]), 
		 -> STR_3(CODE[14]), STR_2(CODE[5]), STR_1(CODE[8]), 


Critical Paths under _main in COMRAM

    _pow->_log
    _log->_eval_poly
    _exp->_ldexp
    _exp->_log
    _ldexp->_eval_poly
    _floor->___ftadd
    ___fttol->___lwtoft
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    _factorial_function->___wmul
    ___lwtoft->___ftpack
    _InicializaLCD->_EnviaDato
    _BorraLCD->_EnviaDato
    _Imprimir_Resultado->_EscribeLCD_n16
    ___lwdiv->___wmul
    _MensajeLCD_Var->_EscribeLCD_c
    _EscribeLCD_n16->___lldiv
    ___lldiv->___llmod
    _EscribeLCD_c->_EnviaDato
    _DireccionaLCD->_EnviaDato
    _EnviaDato->_RetardoLCD

Critical Paths under _ISR in COMRAM

    _ISR->i2_MensajeLCD_Var
    i2_MensajeLCD_Var->i2_EscribeLCD_c
    i2_EscribeLCD_c->i2_EnviaDato
    i2_DireccionaLCD->i2_EnviaDato
    i2_BorraLCD->i2_EnviaDato
    i2_EnviaDato->i2_RetardoLCD

Critical Paths under _main in BANK0

    _main->_pow
    _pow->_exp
    _exp->_ldexp

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0  108154
                                             28 BANK0      7     7      0
                           _BorraLCD
                           _ColorRGB
                       _ConfiguraLCD
                      _DireccionaLCD
                       _EscribeLCD_c
                 _Imprimir_Resultado
                      _InicializaLCD
                        _LeerTeclado
                     _MensajeLCD_Var
                            ___fttol
                             ___lmul
                            ___lwdiv
                           ___lwtoft
                             ___wmul
                 _factorial_function
                                _pow
 ---------------------------------------------------------------------------------
 (1) _pow                                                 17    11      6   85675
                                             11 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                           ___lwtoft (ARG)
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  5     2      3   27542
                                             62 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (2) _exp                                                  9     6      3   46600
                                              2 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (3) _ldexp                                                7     2      5     539
                                             62 COMRAM     5     0      5
                                              0 BANK0      2     2      0
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) _floor                                                8     5      3   12334
                                             52 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     682
                                             13 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     731
                                             24 COMRAM    15    11      4
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     918
                                             13 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    3787
                                             39 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           10     4      6   11719
                                             52 COMRAM    10     4      6
                            ___ftadd
                            ___ftmul
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    5167
                                             25 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    6174
                                             52 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    5758
                                             40 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     335
                                             13 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    4239
                                             21 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    3806
                                             21 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    3685
                                             21 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _factorial_function                                   6     2      4    1003
                                             19 COMRAM     6     2      4
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    3704
                                             21 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    3493
                                             13 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _LeerTeclado                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InicializaLCD                                        0     0      0     220
                           _BorraLCD
                          _EnviaDato
                        _HabilitaLCD
                         _RetardoLCD
 ---------------------------------------------------------------------------------
 (2) _BorraLCD                                             0     0      0     110
                          _EnviaDato
                        _HabilitaLCD
                         _RetardoLCD
 ---------------------------------------------------------------------------------
 (1) _Imprimir_Resultado                                  10     6      4   12134
                                             50 COMRAM    10     6      4
                      _DireccionaLCD
                       _EscribeLCD_c
                     _EscribeLCD_n16
                     _MensajeLCD_Var
                            ___lldiv
                             ___lmul
                            ___lwdiv
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     859
                                             13 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                             13 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4     618
                                             19 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              12     4      8    1282
                                             13 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) _MensajeLCD_Var                                       4     3      1    1380
                                             18 COMRAM     4     3      1
                       _EscribeLCD_c
 ---------------------------------------------------------------------------------
 (2) _EscribeLCD_n16                                      15    10      5    5079
                                             35 COMRAM    15    10      5
                       _EscribeLCD_c
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8    2287
                                             13 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8    1834
                                             22 COMRAM    13     5      8
                            ___llmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _EscribeLCD_c                                         1     1      0     132
                                             17 COMRAM     1     1      0
                          _EnviaDato
                        _HabilitaLCD
                         _RetardoLCD
 ---------------------------------------------------------------------------------
 (2) _DireccionaLCD                                        1     1      0     132
                                             17 COMRAM     1     1      0
                          _EnviaDato
                        _HabilitaLCD
                         _RetardoLCD
 ---------------------------------------------------------------------------------
 (3) _EnviaDato                                            2     2      0      88
                                             15 COMRAM     2     2      0
                        _HabilitaLCD
                         _RetardoLCD
 ---------------------------------------------------------------------------------
 (3) _RetardoLCD                                           2     2      0      22
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _HabilitaLCD                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfiguraLCD                                         1     1      0      66
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ColorRGB                                             2     2      0       0
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  4     4      0     534
                                              9 COMRAM     4     4      0
                         i2_BorraLCD
                    i2_DireccionaLCD
                   i2_MensajeLCD_Var
 ---------------------------------------------------------------------------------
 (7) i2_MensajeLCD_Var                                     4     3      1     292
                                              5 COMRAM     4     3      1
                     i2_EscribeLCD_c
 ---------------------------------------------------------------------------------
 (8) i2_EscribeLCD_c                                       1     1      0     132
                                              4 COMRAM     1     1      0
                        i2_EnviaDato
                      i2_HabilitaLCD
                       i2_RetardoLCD
 ---------------------------------------------------------------------------------
 (7) i2_DireccionaLCD                                      1     1      0     132
                                              4 COMRAM     1     1      0
                        i2_EnviaDato
                      i2_HabilitaLCD
                       i2_RetardoLCD
 ---------------------------------------------------------------------------------
 (7) i2_BorraLCD                                           0     0      0     110
                        i2_EnviaDato
                      i2_HabilitaLCD
                       i2_RetardoLCD
 ---------------------------------------------------------------------------------
 (9) i2_EnviaDato                                          2     2      0      88
                                              2 COMRAM     2     2      0
                      i2_HabilitaLCD
                       i2_RetardoLCD
 ---------------------------------------------------------------------------------
 (9) i2_RetardoLCD                                         2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (9) i2_HabilitaLCD                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BorraLCD
     _EnviaDato
       _HabilitaLCD
       _RetardoLCD
     _HabilitaLCD
     _RetardoLCD
   _ColorRGB
   _ConfiguraLCD
   _DireccionaLCD
     _EnviaDato
     _HabilitaLCD
     _RetardoLCD
   _EscribeLCD_c
     _EnviaDato
     _HabilitaLCD
     _RetardoLCD
   _Imprimir_Resultado
     _DireccionaLCD
     _EscribeLCD_c
     _EscribeLCD_n16
       _EscribeLCD_c
       ___lldiv
         ___llmod (ARG)
       ___llmod
     _MensajeLCD_Var
       _EscribeLCD_c
     ___lldiv
     ___lmul
     ___lwdiv
       ___wmul (ARG)
     ___lwmod
     ___wmul
   _InicializaLCD
     _BorraLCD
     _EnviaDato
     _HabilitaLCD
     _RetardoLCD
   _LeerTeclado
   _MensajeLCD_Var
   ___fttol
     ___lwtoft (ARG)
       ___ftpack
   ___lmul
   ___lwdiv
   ___lwtoft
   ___wmul
   _factorial_function
     ___wmul
   _pow
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg
     ___fttol
     ___lltoft
       ___ftpack
     ___lwtoft (ARG)
     _exp (ARG)
       ___awtoft
       ___ftdiv
         ___ftpack
       ___ftge
       ___ftmul
       ___ftneg
       ___ftsub
         ___awtoft (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
           ___ftmul (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
       ___fttol
       _eval_poly
         ___ftadd
         ___ftmul
       _floor
         ___altoft
           ___ftpack
           ___fttol (ARG)
         ___ftadd
         ___ftge
         ___fttol
         _frexp
       _ldexp
         _eval_poly (ARG)
       _log (ARG)
         ___awtoft
         ___ftadd
         ___ftmul
         _eval_poly
         _frexp
     _log (ARG)

 _ISR (ROOT)
   i2_BorraLCD
     i2_EnviaDato
       i2_HabilitaLCD
       i2_RetardoLCD
     i2_HabilitaLCD
     i2_RetardoLCD
   i2_DireccionaLCD
     i2_EnviaDato
     i2_HabilitaLCD
     i2_RetardoLCD
   i2_MensajeLCD_Var
     i2_EscribeLCD_c
       i2_EnviaDato
       i2_HabilitaLCD
       i2_RetardoLCD

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      30        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     23      41       5       40.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     43      50       1       85.1%
BITBIGSFRhlh        2A      0       0      25        0.0%
BITBIGSFRlll        21      0       0      28        0.0%
BITBIGSFRhhlh       19      0       0      21        0.0%
BITBIGSFRhhllll      E      0       0      24        0.0%
BITBIGSFRhhh         D      0       0      20        0.0%
BITBIGSFRllh         8      0       0      27        0.0%
BITBIGSFRhlll        5      0       0      26        0.0%
BITBIGSFRhhlllh      2      0       0      23        0.0%
BITBIGSFRhhllh       1      0       0      22        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      91      29        0.0%
DATA                 0      0      91       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Thu May 18 07:50:14 2023

              ___altoft@exp 0030                           _a 0091                           _b 0044  
                         _i 0095                           _m 004C                           _r 0087  
             ___altoft@sign 0031            i2DireccionaLCD@a 0005                          _PD 007E82  
                        _TO 007E83                          _n1 0099                          _n2 0097  
                EnviaDato@a 0011                          _op 00A0         ___wmul@multiplicand 0010  
              ___ftadd@exp1 0034                ___ftadd@exp2 0033               ??_LeerTeclado 000E  
              ___ftadd@sign 0032               _InicializaLCD 2284                         l260 1FE4  
                       l252 1FD4                         l271 201A                         l264 200A  
                       l258 1FDC                         l178 0904                         l283 2052  
                       l275 202E                         l372 249E                         l284 206A  
                       l285 205A                         l277 2036                         l269 2012  
                       l287 2062                         l279 203E                         l708 2AF8  
                       l824 28D0                         l753 266A                         l834 2A3A  
                       l675 191A                         l686 1DC2                         _GIE 007F97  
                       _RB4 007C0C                         _RB5 007C0D                         _RB6 007C0E  
                       _RB7 007C0F                         _ISR 0008                         _POR 007E81  
                       _n1c 009F                         _n2c 009E                         _exp 15FA  
                       _log 1B08                         _res 0083                         _pow 198C  
                       wreg 000FE8                        ?_ISR 0001                ___ftdiv@cntr 001F  
          ??i2_EscribeLCD_c 0005                ___ftdiv@sign 0024                        l1014 19C6  
                      l1019 1AFA                        l1038 16B4                        l1055 1EC0  
                      l1039 17D6                        l3215 2796                        l3241 28A6  
                      l3075 265C                        l3067 2628                        l3171 0F78  
                      l3219 27AA                        l3251 28C6                        l3069 2634  
                      l3173 0FFE                        l3181 139C                        l3261 2A18  
                      l4301 25C4                        l3175 10E4                        l3239 289E  
                      l3511 2046                        l3423 1FCA                        l4143 2194  
                      l4135 2156                        l4215 18AE                        l4311 2612  
                      l2721 29AE                        l3177 122A                        l3169 0F46  
                      l4145 21B2                        l4137 2160                        l4217 18B8  
                      l4305 25E6                        l4321 1EFA                        l3267 2A30  
                      l3259 2A10                        l3355 2296                        l4147 21BC  
                      l4139 217E                        l4235 1936                        l4227 18EC  
                      l4219 18C2                        l4171 254C                        l3189 28E2  
                      l3621 1410                        l3365 22B4                        l4413 1D9C  
                      l4245 1966                        l4229 18F6                        l4261 1C6A  
                      l4173 2558                        l3551 24D0                        l2663 27E0  
                      l3375 22D2                        l3447 1FEC                        l4431 2A5A  
                      l4255 1C42                        l4351 1F72                        l4343 1F5E  
                      l4511 2100                        l3553 24D4                        l3545 24C4  
                      l2665 27F0                        l2673 2816                        l4521 268E  
                      l4193 185C                        l3547 24C8                        l3563 24E2  
                      l2667 2802                        l3395 230A                        l3483 2022  
                      l3459 2000                        l4443 2A98                        l4187 1834  
                      l4275 1C9C                        l4339 1F4E                        l4507 20F2  
                      l4603 19D6                        l3557 24D8                        l3549 24CC  
                      l3565 2524                        l2669 280C                        l3629 1472  
                      l3637 14B2                        l4285 1CC4                        l4357 1F8E  
                      l4349 1F66                        l4461 1E1E                        l4533 1B22  
                      l4621 1A74                        l3559 24DC                        l4519 2682  
                      l4279 1CAC                        l3665 15B2                        l3649 1502  
                      l3681 26EA                        l4393 1D5E                        l4289 1CD4  
                      l4369 23D2                        l4465 1E2C                        l4561 164C  
                      l4617 1A52                        l4609 19EE                        l3675 15F0  
                      l3659 1552                        l4387 1D36                        l4555 1614  
                      l4539 1B42                        l3669 15CE                        l3685 270C  
                      l4477 220C                        l4469 1E46                        l4821 0B54  
                      l4725 09F6                        l4479 226E                        l4495 20CE  
                      l4487 2086                        l4567 1684                        l4903 0C98  
                      l4719 09DC                        l4735 0A14                        l4671 0932  
                      l2977 2450                        l4817 0B40                        l4761 0A62  
                      l2979 245C                        l4923 0D26                        l4915 0CCC  
                      l4771 0A80                        l4667 0914                        ?_exp 0062  
                      l2989 2490                        l4589 17AC                        l4941 0DC4  
                      l4917 0CE4                        l4669 092E                        ?_log 003F  
                      l4935 0DB0                        l4927 0D46                        l4919 0D1A  
                      l4855 0BDE                        l4847 0BC6                        l4961 0E7E  
                      l4963 0E84                        l4955 0E48                        l4699 0990  
                      l4949 0DE6                        l4965 0E9A                        l4797 0AEC  
                      l4975 0EBA                        l4959 0E5A                        l4879 0C40  
                      l4799 0AF2                        l4987 0F28                        l4989 0F2E  
                      ?_pow 006B                        STR_1 08A6                        STR_2 08AE  
                      STR_3 0849                        STR_4 0869                        STR_5 0889  
                      STR_6 0869                        STR_7 083A                        STR_8 0869  
                      STR_9 087E                        _LATB 000F8A                        _LATC 000F8B  
                      _LATD 000F8C                        u3230 2926                        u3310 2A1C  
                      u3080 2638                        u5010 1826                        u5110 18CA  
                      u3440 2B3C                        u3280 28AA                        u3520 1FAE  
                      u5040 184E                        u5201 1C52                        u5140 18FE  
                      u5070 188C                        u5330 1F78                        u3900 153A  
                      u5181 1C2A                        u5510 20A8                        u6070 0B32  
                      u5271 1EDE                        u3840 14B0                        u5280 1EE8  
                      u5360 23FE                        u2970 2460                        u3850 14C0  
                      u5290 1F18                        u5610 168E                        u6170 0BA4  
                      u5371 1D1E                        u3860 14D2                        u3940 271C  
                      u5620 1690                        u5700 1A3C                        u3870 14E4  
                      u5470 1E38                        u5518 20AC                        u6270 0C20  
                      u5391 1D46                        u5295 1F10                        u3880 1516  
                      u4920 21C6                        u5368 2400                        u3890 1528  
                      u6380 0C88                        u5900 0A98                        u6607 2804  
                      u4880 2148                        u5840 0A2C                        u6617 280E  
                      u6627 2BC6                        u4971 17F4                        u6547 0920  
                      u5780 09A8                        u4981 1808                        u6557 09E8  
                      u6567 0F36                        u6577 27E6                        u5970 0ACE  
                      u6587 27F2                        u6597 27FA                        _RBPU 007F8F  
                      _TMR0 000FD6              ??_EscribeLCD_c 0012                        _main 08B4  
              ___ftpack@arg 000E                ___ftpack@exp 0011                        fsr2h 000FDA  
                      fsr2l 000FD9                        btemp 0051                        exp@x 0062  
                      log@x 003F                        pow@x 006B                        pow@y 006E  
                      prodh 000FF4                        prodl 000FF3                        start 000E  
              ___ftmul@cntr 0027                ___param_bank 000000                ___ftmul@sign 0028  
                     ??_ISR 000A                ___fttol@exp1 0027                       ??_exp 0044  
                     ??_log 0042                ___fttol@lval 0023                       ??_pow 0044  
           i2_DireccionaLCD 2B84              ?_InicializaLCD 0001                       ?_main 0001  
           __end_of___ftadd 198C                       STR_10 0869                       STR_11 0865  
                     STR_12 0893                       STR_13 0872                       STR_14 089D  
                     STR_15 0857               EscribeLCD_c@a 0012             __end_of___ftdiv 1DF4  
           __end_of___ftneg 2B06             __end_of___lldiv 24B0             __end_of___ftmul 1D0E  
                     _T0CON 000FD5             __end_of___llmod 267C             __end_of___ftsub 2A84  
           __end_of___fttol 1FA0                       _LATE0 007C68                       _LATE1 007C69  
                     _LATE2 007C6A                       _LATC7 007C5F             __end_of___lwdiv 28DA  
           __end_of___lwmod 2A44                       i2l320 2398                       _TRISB 000F93  
                     _TRISC 000F94                       _TRISD 000F95                       _TRISE 000F96  
       ___lmul@multiplicand 0012                ___lltoft@exp 001E                       _Tecla 009D  
             ___awtoft@sign 0019         __end_of_LeerTeclado 206E                       _color 004A  
               ?i2_BorraLCD 0001                       _floor 1DF4                       _ldexp 206E  
                     _frexp 23AC                       _errno 008F               ___ftpack@sign 0012  
      EscribeLCD_n16@decena 0031                       tablat 000FF5                       pow@yi 0078  
               _HabilitaLCD 2BC2        EscribeLCD_n16@millar 0029                       ttemp5 0052  
                     ttemp6 0055                       ttemp7 0059                       status 000FD8  
                     wtemp8 0052        EscribeLCD_n16@unidad 0032                 exp@exponent 0068  
               ldexp@newexp 0042            __end_of_BorraLCD 2BAE            __end_of_ColorRGB 252A  
           __initialization 2730                 log@exponent 0042                __end_of_main 0F42  
          i2_MensajeLCD_Var 2928                      ??_main 007C        __end_of_ConfiguraLCD 2B42  
             ___fttol@sign1 0022               __activetblptr 000002          _Imprimir_Resultado 13BE  
                    _ADCON1 000FC1                      ?_floor 0035                      ?_ldexp 003F  
                    ?_frexp 000E            __end_of___altoft 25A2            ___llmod@dividend 000E  
            DireccionaLCD@a 0012            __end_of___awtoft 2ABC            __end_of___ftpack 21E6  
          _contador_digitos 0093            __end_of___lltoft 26D8                      i2l3155 29F4  
                    i2l4093 2368                      i2l4087 234C                      i2l4089 2354  
                    i2l3709 2930                      i2l2951 2836                      i2l2953 2846  
                    i2l2961 286C                      i2l2955 2858                      i2l2957 2862  
          __end_of___lwtoft 2B2A                      _OSCCON 000FD3                      _TMR0IE 007F95  
                    _TMR0IF 007F92                      _TMR0ON 007EAF         ?_Imprimir_Resultado 0033  
     __end_of_DireccionaLCD 2B6E                  _RetardoLCD 27DC     __end_ofi2_DireccionaLCD 2B9A  
          ??_EscribeLCD_n16 0029                      ___ftge 25A2                      ___lmul 2786  
                    ___wmul 2ABC                   ??___ftadd 002F                   ??___ftdiv 001C  
                 ??___ftneg 0011                   ??___lldiv 001F                   ??___ftmul 0020  
                 ??___llmod 0016                   ??___ftsub 003B                   ??___fttol 001D  
                 ??___lwdiv 0018                   ??___lwmod 0012             ??_InicializaLCD 0012  
                    clear_0 2766                      clear_1 2772                      isa$std 000001  
      ??_Imprimir_Resultado 0037        __end_of_EscribeLCD_c 2B58       EscribeLCD_n16@centena 002D  
                    floor@i 0038                 _LeerTeclado 1FA0                      floor@x 0035  
     ___ftmul@f3_as_product 0024                ?i2_EnviaDato 0001                __pdataCOMRAM 0050  
              __mediumconst 0000                      tblptrh 000FF7                      tblptrl 000FF6  
                    tblptru 000FF8  __end_of_factorial_function 2730            __end_ofexp@coeff 081F  
          __end_oflog@coeff 083A       __end_ofi2_HabilitaLCD 2BDE                  __accesstop 0060  
   __end_of__initialization 2778                  ___altoft@c 0028                  ___ftadd@f1 0029  
                ___ftadd@f2 002C                  ___ftge@ff1 000E                  ___ftge@ff2 0011  
              eval_poly@res 003C               ___rparam_used 000001                  ___ftdiv@f1 0016  
                ___ftdiv@f2 0019                  ___ftdiv@f3 0020                  ___ftneg@f1 000E  
                ___awtoft@c 0016                  ___ftmul@f1 001A                  ___ftmul@f2 001D  
                ___ftsub@f1 0035                  ___ftsub@f2 0038                  ___fttol@f1 0019  
            __pcstackCOMRAM 0001                __pidataBANK0 2BDE                  ___lltoft@c 0016  
             __end_of_floor 1ECE               __end_of_ldexp 2138               __end_of_frexp 242E  
         __end_of_EnviaDato 29BC                  ___lwtoft@c 0016                   ?_BorraLCD 0001  
                   ??_floor 0038                     ??_ldexp 0060                     ??_frexp 0012  
                 ?_ColorRGB 0001              _MensajeLCD_Var 28DA                  __pbssBANK0 0083  
           MensajeLCD_Var@a 0013             MensajeLCD_Var@i 0015      factorial_function@fact 0018  
               ?_RetardoLCD 0001                 RetardoLCD@a 000F            ?i2_DireccionaLCD 0001  
                   ?___ftge 000E                     ?___lmul 000E                     ?___wmul 000E  
                 ?___altoft 0028             EscribeLCD_n16@a 0024             EscribeLCD_n16@b 0028  
            ___lmul@product 0016                   ?___awtoft 0016                   ?___ftpack 000E  
                 ?___lltoft 0016                   ?___lwtoft 0016      __end_of_MensajeLCD_Var 2928  
              ??i2_BorraLCD 0005                  ??_BorraLCD 0012                  ??_ColorRGB 000E  
  __end_ofi2_MensajeLCD_Var 2976                ?_HabilitaLCD 0001                _ConfiguraLCD 2B2A  
                   __Hparam 0000                     __Lparam 0000                     ___ftadd 17E4  
                   ___ftdiv 1D0E                     ___ftneg 2AE2                     ___lldiv 242E  
                   ___ftmul 1C1A                     ___llmod 2616                     ___ftsub 2A44  
                   ___fttol 1ECE                     ___lwdiv 2888                     ___lwmod 2A02  
              __psmallconst 0800                  ??___altoft 002C                     _exp$899 0065  
        __end_ofi2_BorraLCD 2BC2         factorial_function@a 0014                     __pcinit 2730  
                ??___awtoft 0019                  ??___ftpack 0013           __end_of_eval_poly 2284  
                   __ramtop 0800                  ??___lltoft 001A                     __ptext0 08B4  
                   __ptext1 198C                     __ptext2 1B08                     __ptext3 15FA  
                   __ptext4 206E                     __ptext5 1DF4                     __ptext6 23AC  
                   __ptext7 1ECE                     __ptext8 25A2                     __ptext9 252A  
                ??___lwtoft 0019                     _pow$897 0071                     _pow$898 0074  
           ?_MensajeLCD_Var 0013              __pintcode_body 2320        end_of_initialization 2778  
                   exp@sign 006A               __Lmediumconst 0000                     int_func 2320  
              _EscribeLCD_c 2B42             ___lldiv@divisor 001B                     pow@sign 0077  
           ___lldiv@counter 0023                     postdec2 000FDD                     postinc0 000FEE  
                   postinc2 000FDE                ?_LeerTeclado 0001             i2EscribeLCD_c@a 0005  
               ___ftdiv@exp 0023               ?i2_RetardoLCD 0001          _factorial_function 26D8  
               ___ftmul@exp 0023              __end_of___ftge 2616              __end_of___lmul 27DC  
            __end_of___wmul 2AE2               __pidataCOMRAM 2BE1         ?_factorial_function 0014  
     __end_of_InicializaLCD 2320                  floor@expon 003B                   _EnviaDato 2976  
       start_initialization 2730                  eval_poly@d 0038                  eval_poly@n 0039  
                eval_poly@x 0035                 __end_of_ISR 23AC                  ldexp@value 003F  
               __end_of_exp 17E4                 __end_of_log 1C1A                 __end_of_pow 1B08  
      ??_factorial_function 0018                  frexp@value 000E              ??i2_RetardoLCD 0001  
              ??_RetardoLCD 000E             ___llmod@divisor 0012             ___llmod@counter 0016  
                  ??___ftge 0014                    ??___lmul 0016                    ??___wmul 0012  
               __pdataBANK0 009E                  ?_EnviaDato 0001                 __pbssCOMRAM 0044  
        __end_of_RetardoLCD 2832               __pcstackBANK0 0060           ?i2_MensajeLCD_Var 0006  
        ??i2_MensajeLCD_Var 0007               _DireccionaLCD 2B58              i2_EscribeLCD_c 2B6E  
          ___lwdiv@dividend 0014                   _factorial 009B                   __pintcode 0008  
                  ?___ftadd 0029                    ?___ftdiv 0016                    ?___ftneg 000E  
                  ?___lldiv 0017                    ?___ftmul 001A                    ?___llmod 000E  
                  ?___ftsub 0035                    ?___fttol 0019                    ?___lwdiv 0014  
                  ?___lwmod 000E            ??_MensajeLCD_Var 0014                 __smallconst 0800  
                 _eval_poly 21E6            ___lwdiv@quotient 0018              ___wmul@product 0012  
             i2_HabilitaLCD 2BD0              ?_DireccionaLCD 0001      __end_ofi2_EscribeLCD_c 2B84  
                  i2u481_40 235E                    i2u482_45 2360                    i2u396_40 2974  
                  i2u485_40 2382                    i2u486_45 2384                    i2u663_47 283C  
                  i2u664_47 2848                    i2u665_47 2850                    i2u666_47 285A  
                  i2u667_47 2864                    i2u668_47 2BD4           ___wmul@multiplier 000E  
             ??i2_EnviaDato 0003        __end_ofi2_RetardoLCD 2888                 ??_EnviaDato 0010  
                ?_eval_poly 0035                    _BorraLCD 2B9A                    _ColorRGB 24B0  
         ___lmul@multiplier 000E              ?i2_HabilitaLCD 0001             ?i2_EscribeLCD_c 0001  
                 frexp@eptr 0011                    __Hrparam 0000                    __Lrparam 0000  
                  ___altoft 252A                i2EnviaDato@a 0004                    ___awtoft 2A84  
                  ___ftpack 2138              _EscribeLCD_n16 0F42                    ___lltoft 267C  
                  ___lwtoft 2B06               ConfiguraLCD@a 000E                    _main$158 0081  
                  _main$159 0082                    _main$896 007E           ??i2_DireccionaLCD 0005  
           ___lwdiv@divisor 0016             ___lwdiv@counter 001A                    __ptext10 21E6  
                  __ptext11 1C1A                    __ptext20 2138                    __ptext12 2A44  
                  __ptext21 1FA0                    __ptext13 17E4                    __ptext30 0F42  
                  __ptext22 2284                    __ptext14 2AE2                    __ptext31 2616  
                  __ptext23 2B9A                    __ptext15 1D0E                    __ptext32 242E  
                  __ptext24 13BE                    __ptext16 2A84                    __ptext41 2928  
                  __ptext33 2B42                    __ptext25 2ABC                    __ptext17 267C  
                  __ptext42 2B6E                    __ptext34 2B58                    __ptext26 2A02  
                  __ptext18 26D8                    __ptext43 2B84                    __ptext35 2976  
                  __ptext27 2888                    __ptext19 2B06                    __ptext44 2BAE  
                  __ptext36 27DC                    __ptext28 2786                    __ptext45 29BC  
                  __ptext37 2BC2                    __ptext29 28DA                    __ptext46 2832  
                  __ptext38 2B2A                    __ptext47 2BD0                    __ptext39 24B0  
       __end_ofi2_EnviaDato 2A02                    _contador 0048             ??_DireccionaLCD 0012  
                  _interfaz 0050                    _partdecl 008B                    isa$xinst 000000  
                  _potencia 009C                    int$flags 0051      __end_of_EscribeLCD_n16 13BE  
__end_of_Imprimir_Resultado 15FA                    exp@coeff 0801                    log@coeff 081F  
               ??_eval_poly 003B             ??i2_HabilitaLCD 0001                    intlevel2 0000  
             ??_HabilitaLCD 000E            ___lwmod@dividend 000E            ___lldiv@dividend 0017  
             ?_ConfiguraLCD 0001               i2RetardoLCD@a 0002             ?_EscribeLCD_n16 0024  
               i2_EnviaDato 29BC            ___lldiv@quotient 001F             ___lwmod@divisor 0010  
           ___lwmod@counter 0012         Imprimir_Resultado@i 003B         Imprimir_Resultado@r 0033  
                i2_BorraLCD 2BAE              ??_ConfiguraLCD 000E               ?_EscribeLCD_c 0001  
               _verificador 0046           i2MensajeLCD_Var@a 0006           i2MensajeLCD_Var@i 0008  
              i2_RetardoLCD 2832         __end_of_HabilitaLCD 2BD0  
